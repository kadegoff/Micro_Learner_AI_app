// public/js/Micro_Learner-app.js

// Global configuration
$serverMode = true;
if ($serverMode) {
  const API_BASE_URL = "../../../backend";
} else {
  const API_BASE_URL = "/backend";
}
let authToken = localStorage.getItem("Micro_Learner_token");
let currentUser = null;
let currentPlan = null;
let selectedPlan = null;
let selectedModel = "chatgpt";

console.log("🏁 Micro Learner App Initializing...");
console.log("🔧 API_BASE_URL:", API_BASE_URL);
console.log("🔑 Initial authToken:", authToken ? "TOKEN_EXISTS" : "NO_TOKEN");
console.log("👤 Initial currentUser:", currentUser);
console.log("📊 Initial selectedModel:", selectedModel);

// Fix 1: Prevent infinite logout loops
let isLoggingOut = false; // Add this global flag

// Update your AJAX error handler in $.ajaxSetup
$.ajaxSetup({
  beforeSend: function (xhr) {
    console.log("🚀 AJAX Request Starting");
    console.log("📍 URL:", this.url || "URL not available");

    // Extract filename from URL for better logging
    const fileName = this.url
      ? this.url.split("/").pop().split("?")[0]
      : "unknown";
    console.log("📄 Target File:", fileName);

    console.log("🔧 Method:", this.type || this.method || "GET");
    console.log("📦 Data:", this.data || "No data");

    if (authToken) {
      xhr.setRequestHeader("Authorization", "Bearer " + authToken);
      console.log("🔑 Auth token added to request");
    } else {
      console.log("⚠️ No auth token available");
    }

    $(".loading-spinner").show();
    console.log("⏳ Loading spinner shown");
  },

  complete: function (xhr, status) {
    const fileName = this.url
      ? this.url.split("/").pop().split("?")[0]
      : "unknown";
    console.log(`✅ AJAX Request Complete for ${fileName}`);
    console.log("📊 Status:", status);
    console.log("🔢 HTTP Status Code:", xhr.status);
    console.log(
      `📄 Response Text Length from ${fileName}:`,
      xhr.responseText ? xhr.responseText.length : 0
    );

    $(".loading-spinner").hide();
    console.log("✨ Loading spinner hidden");
  },

  error: function (xhr, status, error) {
    const fileName = this.url
      ? this.url.split("/").pop().split("?")[0]
      : "unknown";
    console.log(`❌ AJAX Request Error from ${fileName}`);
    console.log("🔢 HTTP Status:", xhr.status);
    console.log("📝 Status Text:", status);
    console.log("⚡ Error:", error);
    console.log(`📄 Response Text from ${fileName}:`, xhr.responseText);

    try {
      const responseJSON = JSON.parse(xhr.responseText);
      console.log(`📊 Parsed Response from ${fileName}:`, responseJSON);
    } catch (e) {
      console.log("⚠️ Could not parse response as JSON");
    }

    // 🔧 FIX: Skip global error handling for promo code validation
    if (fileName === "validate_promo_code.php") {
      console.log("🎫 Skipping global error handler for promo code validation");
      return; // Let the specific handler deal with it
    }

    // FIX: Prevent infinite logout loops
    if (xhr.status === 401 && !isLoggingOut) {
      console.log("🚪 Unauthorized - redirecting to login");
      logout();
    } else if (xhr.status === 401 && isLoggingOut) {
      console.log("🔄 Already logging out, skipping additional logout call");
    } else {
      const errorMsg = xhr.responseJSON?.error || "An error occurred";
      console.log("🎯 Error message to show:", errorMsg);
      showToast(errorMsg, "error");
    }
  },

  success: function (data, status, xhr) {
    const fileName = this.url
      ? this.url.split("/").pop().split("?")[0]
      : "unknown";
    console.log(`🎉 AJAX Request Success from ${fileName}`);
    console.log("📊 Status:", status);
    console.log(`📦 Response Data from ${fileName}:`, data);
    console.log("🔢 HTTP Status Code:", xhr.status);
  },
});

// ================== UI FUNCTIONS ==================

function showLogin() {
  console.log("🔐 showLogin() called");
  closeModal("signup-modal");
  $("#login-modal").addClass("active");
  console.log("✅ Login modal shown");
}

function showSignup() {
  console.log("📝 showSignup() called");
  closeModal("login-modal");
  $("#signup-modal").addClass("active");
  console.log("✅ Signup modal shown");
}

function closeModal(modalId) {
  console.log("❌ closeModal() called for:", modalId);
  $("#" + modalId).removeClass("active");
  console.log("✅ Modal closed:", modalId);
}

function showDashboard() {
  console.log("📊 showDashboard() called");
  console.log("👤 Current user for dashboard:", currentUser);

  $("#landing-page").hide();
  $("#dashboard").addClass("active");
  console.log("✅ Dashboard UI updated");

  // Hide nav-center when user is logged in
  $(".nav-center").css("display", "none");
  console.log("🧭 Nav center hidden for logged in user");

  // Update nav
  $("#nav-buttons").html(`
    <div class="user-info">
      <button style="background: none !important "class="btn btn-text" id="dashboard-nav-btn">Dashboard</button>
    </div>
  `);
  console.log("🧭 Navigation updated");

  // Update user info
  $("#user-email").text(currentUser.email);
  console.log("📧 User email set:", currentUser.email);

  if (currentUser.picture) {
    $("#user-avatar").html(
      `<img src="${currentUser.picture}" alt="${currentUser.name}">`
    );
    console.log("🖼️ User avatar set from picture");
  } else {
    const initials = currentUser.name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase();
    $("#user-initials").text(initials);
    console.log("🔤 User initials set:", initials);
  }

  // Update stats
  console.log("📈 Calling updateDashboardStats()");
  updateDashboardStats();

  // Load saved config
  console.log("⚙️ Calling loadUserConfig()");
  loadUserConfig();

  updateDangerZoneButtons();

  // Show team section if enterprise plan
  if (currentUser.plan === "enterprise") {
    console.log("👥 Loading team members for enterprise plan");
    loadTeamMembers();
  }
}

// Update the showLanding function (around line 180)
function showLanding() {
  console.log("🏠 showLanding() called");
  $("#landing-page").show();
  $("#dashboard").removeClass("active");

  // Show nav-center when user is logged out
  $(".nav-center").css("display", "flex");
  console.log("🧭 Nav center shown for logged out user");

  // Reset nav
  $("#nav-buttons").html(`
    <button class="btn btn-text" id="nav-login-btn">Sign in</button>
    <button class="btn btn-outline" id="nav-signup-btn">Get started</button>
  `);
  console.log("✅ Landing page shown, navigation reset");
}

const PLAN_FEATURES = {
  free: "• 15 messages/day<br>• 3K word memory<br>• Resets after 6.5hrs",
  pro: "• Increased usage<br>• Edit thoughts<br>• Resets after 5hrs",
  elite: "• 5x usage<br>• Context control<br>• Resets after 5hrs",
  enterprise: "• Team features<br>• Monitoring<br>• Resets after 4hrs",
};

// Then use it in updateDashboardStats():
function updateDashboardStats() {
  console.log("📊 updateDashboardStats() called");
  console.log("📋 Current user plan:", currentUser.plan);

  // Update plan features display using global constant
  const userPlan = (currentUser.plan || "free").toLowerCase();
  $("#plan-features").html(PLAN_FEATURES[userPlan] || PLAN_FEATURES.free);

  console.log("✅ Plan features updated for:", userPlan);

  // Update referral code
  if (currentUser.referral_code) {
    $("#referral-code").val(currentUser.referral_code);
    console.log("🔗 Referral code set:", currentUser.referral_code);
  } else {
    console.log("ℹ️ No referral code available");
  }

  // Load billing info to update credits and referral counts
  console.log("💳 Loading billing info to update credits and referral counts");
  loadBillingInfo();
}

// ================== COOKIE UTILITY FUNCTIONS ==================
// Add these functions at the top of your Micro_Learner-app.js file

function setCookie(name, value, days = 30) {
  console.log(
    `🍪 setCookie() called - Setting ${name} cookie for ${days} days`
  );

  let expires = "";
  if (days) {
    const date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }

  // Set cookie with security attributes
  const cookieValue = `${name}=${
    value || ""
  }${expires}; path=/; SameSite=Strict; Secure`;
  document.cookie = cookieValue;

  console.log(`✅ Cookie set: ${name}`);
}

function getCookie(name) {
  console.log(`🍪 getCookie() called for: ${name}`);

  const nameEQ = name + "=";
  const ca = document.cookie.split(";");

  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === " ") c = c.substring(1, c.length);
    if (c.indexOf(nameEQ) === 0) {
      const value = c.substring(nameEQ.length, c.length);
      console.log(`✅ Cookie found: ${name}`);
      return value;
    }
  }

  console.log(`❌ Cookie not found: ${name}`);
  return null;
}

function deleteCookie(name) {
  console.log(`🗑️ deleteCookie() called for: ${name}`);

  document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; SameSite=Strict; Secure`;

  console.log(`✅ Cookie deleted: ${name}`);
}

// ================== UPDATED LOGIN FUNCTION ==================
function handleLogin(e) {
  console.log("🔐 handleLogin() called");
  e.preventDefault();
  isAuthInProgress = true;

  const email = $("#login-email").val();
  const password = $("#login-password").val();

  console.log("[handleLogin] Attempting login with:", { email, password });
  console.log("🌐 Making AJAX request to:", `${API_BASE_URL}/auth/login.php`);

  $.ajax({
    url: `${API_BASE_URL}/auth/login.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({ email, password }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Login request starting");
      console.log("📧 Email:", email);
      console.log("🔒 Password provided:", password ? "YES" : "NO");
    },
    success: function (response) {
      console.log("🎯🎯🎯 LOGIN RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Login successful - using centralized handler");
        const parsedResponse = response;
        handleLoginSuccess(parsedResponse, "standard");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message || "Login failed");
      } else {
        console.warn("Unexpected response format", response);
        showToast("Unexpected response format", "error");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 LOGIN ERROR:", {
        status: status,
        error: error,
        response: xhr.responseText,
      });

      let errorMessage = "Login failed. Please try again.";
      try {
        const errorResponse = JSON.parse(xhr.responseText);
        if (errorResponse.error || errorResponse.message) {
          errorMessage = errorResponse.error || errorResponse.message;
        }
      } catch (e) {
        // Use default error message
      }

      alert(errorMessage);
    },
  }).always(function () {
    isAuthInProgress = false;
  });
}

// Add this global variable at the top of your Micro_Learner-app.js file
let preSelectedPlan = null; // Track which plan was selected from pricing cards

// Modified showChoosePlan function to handle pre-selected plans
function showChoosePlan(planToSelect = null) {
  console.log(
    "📋 showChoosePlan() called with preSelected plan:",
    planToSelect
  );

  // If a plan was passed in (from pricing cards), use it
  // Otherwise use the global preSelectedPlan or default to free
  selectedPlan = planToSelect || preSelectedPlan || "free";

  // Clear any previous selections and promo codes
  $("#choose-plan-selector .plan-option").removeClass("selected");
  $(
    "#choose-plan-selector .plan-option[data-plan='" + selectedPlan + "']"
  ).addClass("selected");

  // Clear promo code state
  window.appliedPromoCode = null;
  $("#choose-plan-promo-code").val("").prop("readonly", false);
  $("#apply-choose-plan-promo-btn").removeClass("success-state").text("Apply");
  $("#remove-choose-plan-promo-btn").remove();

  // Show modal
  $("#choose-plan-modal").addClass("active");
  console.log("✅ Choose plan modal shown with selected plan:", selectedPlan);

  // Update the display for the selected plan
  updateChoosePlanDisplay();
}

// Enhanced selectChoosePlan function with immediate promo code clearing
function selectChoosePlan(planId) {
  console.log("📋 selectChoosePlan() called for:", planId);

  selectedPlan = planId;
  $("#choose-plan-selector .plan-option").removeClass("selected");
  $("#choose-plan-selector .plan-option[data-plan='" + planId + "']").addClass(
    "selected"
  );

  console.log("✅ Plan selected:", selectedPlan);

  // NEW: Check if there's an applied promo code that needs re-validation
  if (window.appliedPromoCode && window.appliedPromoCode.code) {
    console.log(
      "🎫 Re-validating promo code for new plan:",
      window.appliedPromoCode.code
    );

    // IMPORTANT: Clear the promo code immediately to prevent showing invalid discount
    const originalPromoCode = window.appliedPromoCode.code;
    clearChoosePlanPromoCodeState();

    // Then re-validate and potentially restore it
    revalidatePromoCodeForChoosePlan(originalPromoCode);
  } else {
    // No promo code to validate, just update display
    updateChoosePlanDisplay();
  }
}
// Enhanced downgrade notice logic for both functions

function generateDowngradeNoticeContent(currentPlan, selectedPlan, basePrice) {
  console.log("📝 generateDowngradeNoticeContent() called");
  console.log("📋 Current plan:", currentPlan, "Selected plan:", selectedPlan);
  console.log("👥 User team role:", currentUser?.team_role);

  let noticeContent = "";

  if (currentPlan === "enterprise") {
    const userTeamRole = currentUser?.team_role || "member";

    if (userTeamRole === "admin") {
      // Enterprise team leader trying to downgrade - must leave team first
      noticeContent = `
        <strong>⚠️ Team Leader Account Notice:</strong><br>
        As the team leader, you must leave or delete your team first before changing to a lower plan.<br><br>
        
        <strong>Next Steps:</strong><br>
        • Go to your settings<br>
        • Use "Delete Team" to disband the team, OR<br>
        • Transfer leadership to another member, then use "Leave Team"<br>
        • After leaving/deleting the team, you can select any plan<br><br>
        
        <strong>Why is this required?</strong><br>
        Enterprise plan downgrades affect your entire team and require explicit team management decisions.<br><br>
        
        <strong>No payment due today.</strong> Please manage your team membership first.
      `;
    } else {
      // Enterprise team member trying to downgrade - must leave team first
      noticeContent = `
        <strong>⚠️ Team Member Account Notice:</strong><br>
        You must leave your team first before changing to a lower plan.<br><br>
        
        <strong>Next Steps:</strong><br>
        • Go to your settings<br>
        • Use "Leave Team" to remove yourself from the team<br>
        • After leaving the team, you can select any plan<br><br>
        
        <strong>Why is this required?</strong><br>
        Your Enterprise access is managed through your team membership.<br>
        You must leave the team before switching to an individual plan.<br><br>
        
        <strong>No payment due today.</strong> Please leave your team first.
      `;
    }
  } else {
    // Regular downgrade notice for non-enterprise plans
    noticeContent = `
      <strong>Downgrade Notice:</strong><br>
      You'll continue with your current ${currentPlan} plan until it expires,<br>
      then automatically switch to ${selectedPlan} at $${basePrice}/month.<br><br>
      
      <strong>No payment due today.</strong>
    `;
  }

  return noticeContent;
}

// Updated updateChoosePlanDisplay function (replace the downgrade section)
function updateChoosePlanDisplay() {
  console.log("💰 updateChoosePlanDisplay() called");
  console.log("📋 Selected plan:", selectedPlan);
  console.log("👤 Current user plan:", currentUser?.plan);
  console.log(
    "🎫 Applied promo code:",
    window.appliedPromoCode ? window.appliedPromoCode.code : "NONE"
  );

  const prices = { free: 0, pro: 25, elite: 120, enterprise: 150 };
  const planNames = {
    free: "Free",
    pro: "Pro",
    elite: "Elite",
    enterprise: "Enterprise",
  };

  const basePrice = prices[selectedPlan] || 0;
  let promoDiscount = 0;
  let runningTotal = basePrice;

  // Check if this is a downgrade
  const currentPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const currentPlanPrice = prices[currentPlan] || 0;
  const selectedPlanPrice = prices[selectedPlan] || 0;
  const isDowngrade = selectedPlanPrice < currentPlanPrice;

  console.log("📊 Choose Plan comparison:", {
    currentPlan,
    currentPlanPrice,
    selectedPlan,
    selectedPlanPrice,
    isDowngrade,
  });

  // 1. SELECTED PLAN - MONTHLY PRICE
  $("#choose-plan-selected-name").text(planNames[selectedPlan]);
  $("#choose-plan-monthly-price").text("$" + basePrice);

  // 2. PROMO CODE DISCOUNT - ONLY if there's a valid applied promo code
  if (window.appliedPromoCode && window.appliedPromoCode.code) {
    const promo = window.appliedPromoCode;
    console.log("🎫 Applying promo code discount:", promo);

    if (promo.discount_type === "percentage") {
      promoDiscount = basePrice * (promo.discount_value / 100);
    } else if (promo.discount_type === "fixed") {
      promoDiscount = promo.discount_value;
    }

    runningTotal -= promoDiscount;

    $("#choose-plan-discount-row").show();
    $("#choose-plan-discount-amount").html(
      "-$" + promoDiscount.toFixed(2) + " (" + promo.description + ")"
    );
  } else {
    console.log("🎫 No valid promo code - hiding discount row");
    $("#choose-plan-discount-row").hide();
  }

  // CLEANUP: Always remove existing dynamic rows first
  $("#choose-plan-downgrade-info, #choose-plan-credit-row").remove();

  // 3. HANDLE CREDITS - Different logic for upgrades vs downgrades
  if (isDowngrade) {
    console.log(
      "📉 CHOOSE PLAN DOWNGRADE DETECTED - No pro-rated credits applied"
    );

    // For downgrades, show the monthly price but total should be $0
    $("#choose-plan-total-price").text("$0.00");

    // Enhanced downgrade notice with enterprise team handling
    const downgradeNoticeContent = generateDowngradeNoticeContent(
      currentPlan,
      selectedPlan,
      basePrice
    );

    $("#choose-plan-total-price").closest(".checkout-row").after(`
      <div class="checkout-row" id="choose-plan-downgrade-info" style="border-top: 1px solid #e5e5e5; margin-top: 0.5rem; padding-top: 0.5rem;">
        <div style="font-size: 0.875rem; color: #666; text-align: center;">
          ${downgradeNoticeContent}
        </div>
      </div>
    `);

    console.log("✅ Choose plan downgrade details updated - Total: $0.00");
  } else {
    console.log(
      "📈 CHOOSE PLAN UPGRADE/NEW SIGNUP DETECTED - Fetching available credits"
    );

    // ✨ NEW: Always fetch credits (whether upgrade or new signup)
    // This will include both pro-rated credits AND referral credits
    fetchAllAvailableCredits(selectedPlan)
      .then(function (creditData) {
        let actualData;
        if (creditData && creditData.data) {
          actualData = creditData.data;
        } else if (
          creditData &&
          creditData.total_available_credits !== undefined
        ) {
          actualData = creditData;
        } else {
          actualData = {
            pro_rated_credit: 0,
            referral_credits: 0,
            total_available_credits: 0,
          };
        }

        const proRatedCredit = parseFloat(actualData.pro_rated_credit) || 0;
        const referralCredits = parseFloat(actualData.referral_credits) || 0;
        const totalAvailableCredits =
          parseFloat(actualData.total_available_credits) || 0;

        // Calculate credits to apply (don't exceed what's owed)
        const creditsToApply = Math.min(totalAvailableCredits, runningTotal);

        console.log("💰 Credit breakdown:", {
          proRatedCredit,
          referralCredits,
          totalAvailableCredits,
          runningTotal,
          creditsToApply,
        });

        // Apply only the credits needed to cover the amount owed
        if (creditsToApply > 0) {
          $("#choose-plan-total-price").closest(".checkout-row").before(`
            <div class="checkout-row" id="choose-plan-credit-row">
              <span>Available Credits</span>
              <span id="choose-plan-credit-amount">-$${creditsToApply.toFixed(
                2
              )} 
                <span style="color: #22c55e;">(Auto-applied)</span>
                ${
                  referralCredits > 0 && creditsToApply >= referralCredits
                    ? `<br><small style="color: #666;">Includes $${Math.min(
                        referralCredits,
                        creditsToApply
                      ).toFixed(2)} referral credits</small>`
                    : ""
                }
              </span>
            </div>
          `);
          runningTotal = Math.max(0, runningTotal - creditsToApply);
        }

        $("#choose-plan-total-price").text("$" + runningTotal.toFixed(2));

        console.log(
          "✅ Choose plan display updated with applied credits - Final total:",
          runningTotal
        );
      })
      .catch(function (error) {
        console.error("❌ Error fetching available credits:", error);
        $("#choose-plan-total-price").text("$" + runningTotal.toFixed(2));
      });
  }
}

// Updated updateCheckoutDetails function (replace the downgrade section)
function updateCheckoutDetails() {
  console.log("💰 updateCheckoutDetails() called");
  console.log("📋 Selected plan:", selectedPlan);
  console.log("👤 Current user plan:", currentUser?.plan);
  console.log(
    "🎫 Applied promo code:",
    window.appliedPromoCode ? window.appliedPromoCode.code : "NONE"
  );

  if (!selectedPlan) {
    console.log("⚠️ No plan selected, clearing details");
    $("#selected-plan-name").text("-");
    $("#monthly-price").text("-");
    $("#total-price").text("-");
    return;
  }

  const prices = {
    pro: 25,
    elite: 120,
    enterprise: 150,
  };

  const basePrice = prices[selectedPlan] || 0;
  let promoDiscount = 0;
  let runningTotal = basePrice;

  console.log("💰 Base price:", basePrice);

  // Update plan name and monthly price
  $("#selected-plan-name").text(
    selectedPlan.charAt(0).toUpperCase() + selectedPlan.slice(1)
  );
  $("#monthly-price").text(`$${basePrice}`);

  // Check if this is a downgrade
  const currentPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const currentPlanPrices = {
    free: 0,
    pro: 25,
    elite: 120,
    enterprise: 150,
  };

  const currentPlanPrice = currentPlanPrices[currentPlan] || 0;
  const selectedPlanPrice = prices[selectedPlan] || 0;
  const isDowngrade = selectedPlanPrice < currentPlanPrice;

  console.log("📊 Plan comparison:", {
    currentPlan,
    currentPlanPrice,
    selectedPlan,
    selectedPlanPrice,
    isDowngrade,
  });

  // 2. PROMO CODE DISCOUNT - ONLY if there's a valid applied promo code
  if (window.appliedPromoCode && window.appliedPromoCode.code) {
    const promo = window.appliedPromoCode;
    console.log("🎫 Applying promo code discount:", promo);

    if (promo.discount_type === "percentage") {
      promoDiscount = basePrice * (promo.discount_value / 100);
    } else if (promo.discount_type === "fixed") {
      promoDiscount = promo.discount_value;
    }

    runningTotal -= promoDiscount;
    console.log("💰 Promo discount applied:", promoDiscount);

    $("#discount-row").show();
    $("#discount-amount").html(
      `-$${promoDiscount.toFixed(2)} (${promo.description})`
    );
  } else {
    console.log("🎫 No valid promo code - hiding discount row");
    $("#discount-row").hide();
    $("#discount-amount").text("");
  }

  // Remove downgrade info if it exists
  $("#downgrade-info-row").remove();

  // 3. HANDLE CREDITS - Different logic for upgrades vs downgrades
  if (isDowngrade) {
    console.log("📉 DOWNGRADE DETECTED - No pro-rated credits applied");

    // Remove any existing credit rows
    $("#credit-info-row, #unused-credit-row, #all-credits-row").remove();

    // For downgrades, show the monthly price but total should be $0
    $("#total-price").text("$0.00");

    // Enhanced downgrade notice with enterprise team handling
    const downgradeNoticeContent = generateDowngradeNoticeContent(
      currentPlan,
      selectedPlan,
      basePrice
    );

    $("#total-price").closest(".checkout-row").after(`
      <div class="checkout-row" id="downgrade-info-row" style="border-top: 1px solid #e5e5e5; margin-top: 0.5rem; padding-top: 0.5rem;">
        <div style="font-size: 0.875rem; color: #666; text-align: center;">
          ${downgradeNoticeContent}
        </div>
      </div>
    `);

    console.log("✅ Downgrade details updated - Total: $0.00");
  } else {
    console.log(
      "📈 UPGRADE/NEW SIGNUP DETECTED - Fetching all available credits"
    );

    // ✨ NEW: Use existing credit balance + pro-rated credits
    const existingCredits =
      parseFloat($("#credit-balance").text().replace("$", "")) || 0;

    // Fetch pro-rated credits and combine with existing credits
    fetchAllAvailableCredits(selectedPlan)
      .then(function (creditData) {
        let actualData;
        if (creditData && creditData.data) {
          actualData = creditData.data;
        } else if (creditData && creditData.pro_rated_credit !== undefined) {
          actualData = creditData;
        } else {
          console.error("❌ Unexpected credit data structure:", creditData);
          actualData = { pro_rated_credit: 0, total_available_credits: 0 };
        }

        const proRatedCredit = parseFloat(actualData.pro_rated_credit) || 0;
        const totalAvailableCredits = existingCredits + proRatedCredit;

        // Calculate credits to apply (don't exceed what's owed)
        const creditsToApply = Math.min(totalAvailableCredits, runningTotal);

        console.log("💰 Credit breakdown:", {
          existingCredits,
          proRatedCredit,
          totalAvailableCredits,
          runningTotal,
          creditsToApply,
        });

        // Remove any existing credit rows
        $("#credit-info-row, #unused-credit-row, #all-credits-row").remove();

        // Apply only the credits needed to cover the amount owed
        if (creditsToApply > 0) {
          let creditRowHtml = `
            <div class="checkout-row" id="all-credits-row">
              <span>Available Credits</span>
              <span id="all-credit-amount">-$${creditsToApply.toFixed(2)} 
                <span style="color: #22c55e;">(Auto-applied)</span>`;

          // Add breakdown if there are multiple credit sources and we're using credits from both
          if (
            existingCredits > 0 &&
            proRatedCredit > 0 &&
            creditsToApply > existingCredits
          ) {
            creditRowHtml += `<br><small style="color: #666;">
              $${existingCredits.toFixed(2)} account credits + $${(
              creditsToApply - existingCredits
            ).toFixed(2)} pro-rated
            </small>`;
          } else if (existingCredits > 0 && creditsToApply <= existingCredits) {
            creditRowHtml += `<br><small style="color: #666;">
              Account credits (includes referral credits)
            </small>`;
          } else if (proRatedCredit > 0) {
            creditRowHtml += `<br><small style="color: #666;">
              Pro-rated credit for unused time
            </small>`;
          }

          creditRowHtml += `</span></div>`;

          $("#total-price").closest(".checkout-row").before(creditRowHtml);
          runningTotal = Math.max(0, runningTotal - creditsToApply);
        }

        $("#total-price").text(`$${runningTotal.toFixed(2)}`);
        $("#total-price").next().remove();

        console.log(
          "✅ Upgrade checkout details updated with applied credits - Final total:",
          runningTotal
        );
      })
      .catch(function (error) {
        console.error("❌ Error fetching pro-rated credits:", error);

        // Fall back to just existing credits if pro-rated credit fetch fails
        if (existingCredits > 0) {
          // Calculate credits to apply (don't exceed what's owed)
          const creditsToApply = Math.min(existingCredits, runningTotal);

          // Remove any existing credit rows
          $("#credit-info-row, #unused-credit-row, #all-credits-row").remove();

          $("#total-price").closest(".checkout-row").before(`
            <div class="checkout-row" id="all-credits-row">
              <span>Available Credits</span>
              <span id="all-credit-amount">-$${creditsToApply.toFixed(2)} 
                <span style="color: #22c55e;">(Auto-applied)</span>
                <br><small style="color: #666;">Account credits (includes referral credits)</small>
              </span>
            </div>
          `);
          runningTotal = Math.max(0, runningTotal - creditsToApply);
        }

        $("#total-price").text(`$${runningTotal.toFixed(2)}`);
      });
  }
}
// Handle promo code errors with specific messaging
function handlePromoCodeError(errorResponse) {
  console.log("❌ Handling promo code error:", errorResponse);

  let userMessage = "";

  switch (errorResponse.error) {
    case "PLAN_NOT_ELIGIBLE":
      userMessage = `❌ This promo code is not valid for the ${getPlanName(
        selectedPlan
      )} plan. Try selecting a different plan or use a different promo code.`;
      break;
    case "USER_USAGE_LIMIT_REACHED":
      if (errorResponse.usage_info && errorResponse.usage_info.limit === 1) {
        userMessage = `❌ You have already used this promo code.`;
      } else {
        userMessage = `❌ You have reached the usage limit for this promo code.`;
      }
      break;
    case "CODE_NOT_FOUND":
      userMessage =
        "❌ Invalid promo code. Please check your code and try again.";
      break;
    case "CODE_EXPIRED":
      userMessage = "❌ This promo code has expired.";
      break;
    case "CODE_NOT_ACTIVE":
      userMessage = "❌ This promo code is not yet active.";
      break;
    case "CODE_LIMIT_REACHED":
      userMessage = "❌ This promo code has reached its usage limit.";
      break;
    default:
      userMessage = errorResponse.message || "❌ Invalid promo code.";
  }

  showToast(userMessage, "error");
  window.appliedPromoCode = null;

  // Update display based on which modal is open
  if ($("#upgrade-modal").hasClass("active")) {
    updateCheckoutDetails();
  } else if ($("#choose-plan-modal").hasClass("active")) {
    updateChoosePlanDisplay();
  }
}

// Helper function to get plan name for display
function getPlanName(planType) {
  const planNames = {
    free: "Free",
    pro: "Pro",
    elite: "Elite",
    enterprise: "Enterprise",
  };
  return planNames[planType] || planType;
}

function confirmPlanChoice() {
  console.log("✅ confirmPlanChoice() called for plan:", selectedPlan);

  // Verify auth state
  if (!authToken || !currentUser) {
    console.error("❌ Cannot confirm plan choice - missing auth data");
    showToast("Authentication error. Please try logging in again.", "error");
    closeChoosePlanModal();
    return;
  }

  if (selectedPlan === "free") {
    // Free plan selected
    console.log("🆓 Free plan selected");
    closeChoosePlanModal();
    showToast("Welcome to Micro Learner! Enjoy your free plan.", "success");

    // Update user plan for consistency
    if (currentUser) {
      currentUser.plan = "Free";
      localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));
    }
    return;
  }

  // Check if this is a downgrade vs upgrade
  const currentPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const prices = { free: 0, pro: 25, elite: 120, enterprise: 150 };
  const currentPlanPrice = prices[currentPlan] || 0;
  const selectedPlanPrice = prices[selectedPlan] || 0;
  const isDowngrade = selectedPlanPrice < currentPlanPrice;

  console.log("📊 Plan choice analysis:", {
    currentPlan,
    selectedPlan,
    isDowngrade,
  });

  // NEW: Block enterprise users from downgrading directly
  if (currentPlan === "enterprise" && isDowngrade) {
    console.log(
      "🚫 Enterprise user attempting downgrade - blocking and showing notice"
    );

    const userTeamRole = currentUser?.team_role || "member";
    let blockMessage;

    if (userTeamRole === "admin") {
      blockMessage =
        `❌ Team Leader - Leave Team Required\n\n` +
        `As the team leader, you must manage your team before changing plans.\n\n` +
        `Steps to change your plan:\n` +
        `1. Go to settings\n` +
        `2. Delete your team OR transfer leadership and leave\n` +
        `3. Return here to select your new plan\n\n` +
        `This ensures proper team management and prevents billing issues.`;
    } else {
      blockMessage =
        `❌ Team Member - Leave Team Required\n\n` +
        `You must leave your team before switching to an individual plan.\n\n` +
        `Steps to change your plan:\n` +
        `1. Go to settings\n` +
        `2. Click "Leave Team"\n` +
        `3. Return here to select your new plan\n\n` +
        `Your Enterprise access is tied to your team membership.`;
    }

    alert(blockMessage);
    closeChoosePlanModal();

    // Redirect to team section for easy access
    showSection("team");
    return;
  }

  if (isDowngrade) {
    console.log("📉 Downgrade selected, initiating downgrade flow");
    initiateDowngrade(selectedPlan);
  } else {
    console.log("📈 Upgrade selected, proceeding to Stripe checkout");
    // Paid plan upgrade - redirect to checkout with promo code
    const referralCode =
      getUrlParameter("ref") || $("#signup-referral").val() || "";
    const promoCode = window.appliedPromoCode
      ? window.appliedPromoCode.code
      : "";

    closeChoosePlanModal();
    initializeCheckoutDirect(selectedPlan, promoCode, referralCode);
  }
}
function closeChoosePlanModal() {
  console.log("❌ closeChoosePlanModal() called");
  $("#choose-plan-modal").removeClass("active");
  console.log("✅ Choose plan modal closed");
}

function removeChoosePlanPromoCode() {
  console.log("🗑️ removeChoosePlanPromoCode() called");

  // REUSE existing promo removal logic
  window.appliedPromoCode = null;
  $("#choose-plan-promo-code").val("").prop("readonly", false);
  $("#apply-choose-plan-promo-btn").removeClass("success-state").text("Apply");
  $("#remove-choose-plan-promo-btn").remove();

  updateChoosePlanDisplay();
  showToast("Promo code removed", "success");
}

// ================== EVENT LISTENERS ==================

// ====== CHOOSE PLAN MODAL EVENT LISTENERS ======
console.log("📋 Setting up choose plan modal listeners");

// Plan selection
$(document).on("click", "#choose-plan-selector .plan-option", function () {
  const planId = $(this).data("plan");
  console.log("📋 Choose plan option clicked:", planId);
  selectChoosePlan(planId);
});

// Apply promo code - uses choose plan specific function but leverages existing validation
$("#apply-choose-plan-promo-btn").on("click", function () {
  console.log("🎫 Apply choose plan promo button clicked");
  applyChoosePlanPromoCode();
});

// Remove promo code
$(document).on("click", "#remove-choose-plan-promo-btn", function () {
  console.log("🗑️ Remove choose plan promo button clicked");
  removeChoosePlanPromoCode();
});

// Confirm plan choice - leverages existing checkout flow
$("#confirm-plan-choice-btn").on("click", function () {
  console.log("✅ Confirm plan choice button clicked");
  confirmPlanChoice();
});

// Close modal handlers - default to free plan
$("#close-choose-plan").on("click", function () {
  console.log("❌ Close choose plan button clicked");
  if (!selectedPlan) selectedPlan = "free";
  confirmPlanChoice();
});

$("#choose-plan-modal").on("click", function (e) {
  if ($(e.target).hasClass("modal")) {
    console.log("❌ Clicked outside choose plan modal");
    if (!selectedPlan) selectedPlan = "free";
    confirmPlanChoice();
  }
});

// Enter key to apply promo code
$("#choose-plan-promo-code").on("keypress", function (e) {
  if (e.which === 13) {
    applyChoosePlanPromoCode();
  }
});

// ADD THIS to the existing event listeners section
$("#copy-referral-code-btn").on("click", function () {
  console.log("📋 Copy referral code button clicked");
  copyReferralCode();
});

// Modify shouldRedirectToCheckout to handle no plan selection
function shouldRedirectToCheckout(plan, isEnterpriseInvite) {
  console.log(
    "💰 shouldRedirectToCheckout - Plan:",
    plan,
    "Enterprise Invite:",
    isEnterpriseInvite
  );

  // If it's an enterprise invite, the enterprise leader pays - no checkout needed
  if (isEnterpriseInvite) {
    console.log("👥 Enterprise invite detected - no payment needed");
    return false;
  }

  // If no plan selected or free plan, no payment needed
  if (!plan || plan === "free" || plan === "") {
    console.log("🆓 No plan or free plan selected - no payment needed");
    return false;
  }

  // For pro, elite, or any other paid plan
  console.log("💳 Paid plan selected - checkout needed");
  return true;
}

function redirectToCheckout(plan, referralCode = "") {
  console.log("💳 redirectToCheckout called for plan:", plan);

  // Verify auth state first
  if (!authToken || !currentUser) {
    console.error("❌ Cannot redirect to checkout - missing auth data");
    showToast("Authentication error. Please try logging in again.", "error");
    return;
  }

  showToast("Redirecting to payment...", "success");

  // Slightly longer delay to ensure everything is ready
  setTimeout(() => {
    console.log("⏰ Checkout redirect timeout triggered");
    console.log(
      "🔍 Pre-checkout auth check - Token:",
      authToken ? "EXISTS" : "MISSING"
    );
    console.log(
      "🔍 Pre-checkout auth check - User:",
      currentUser ? "EXISTS" : "MISSING"
    );

    // Final auth verification before checkout
    if (authToken && currentUser && window.authToken) {
      console.log(
        "✅ Auth data confirmed, proceeding to checkout initialization"
      );
      initializeCheckoutDirect(plan, "", referralCode);
    } else {
      console.error("❌ Auth verification failed for checkout");

      // Try to restore from localStorage as fallback
      const storedToken = localStorage.getItem("Micro_Learner_token");
      const storedUser = localStorage.getItem("Micro_Learner_user");

      if (storedToken && storedUser) {
        console.log("🔄 Restoring auth from localStorage for checkout");
        authToken = storedToken;
        currentUser = JSON.parse(storedUser);
        window.authToken = authToken;
        window.currentUser = currentUser;

        initializeCheckoutDirect(plan, "", referralCode);
      } else {
        showToast(
          "Authentication error. Please try logging in again.",
          "error"
        );
        showDashboard();
      }
    }
  }, 1500); // Longer delay for stability
}

function handleSignup(e) {
  console.log("🚀 Starting signup process");
  e.preventDefault();
  isAuthInProgress = true;
  console.log("✅ Default form submission prevented");

  const name = $("#signup-name").val();
  const email = $("#signup-email").val();
  const password = $("#signup-password").val();
  const referralCode = getUrlParameter("ref") || $("#signup-referral").val();

  console.log("📋 Form data extracted:", {
    name: name,
    email: email,
    password: password ? "***HIDDEN***" : "EMPTY",
    referralCode: referralCode || "NONE",
    passwordLength: password ? password.length : 0,
    preSelectedPlan: preSelectedPlan || "NONE",
  });

  const signupData = {
    name,
    email,
    password,
    referral_code: referralCode,
  };

  console.log(
    "📤 Preparing AJAX request to:",
    `${API_BASE_URL}/auth/signup.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/auth/signup.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify(signupData),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Signup request starting");
      console.log("👤 Name:", name);
      console.log("📧 Email:", email);
      console.log("🔒 Password provided:", password ? "YES" : "NO");
      console.log("🔗 Referral code:", referralCode || "NONE");
    },
    success: function (response) {
      console.log("🎯🎯🎯 SIGNUP RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("🎉 Signup successful!");
        const parsedResponse = response;

        authToken = parsedResponse.data.token;
        session_token = parsedResponse.data.session_token;
        currentUser = parsedResponse.data.user;

        // ✨ NEW: Set all auth cookies
        if (session_token) {
          setCookie("session_token", session_token);
          console.log("🍪 Session token cookie set");
        }
        if (authToken) {
          setCookie("auth_token", authToken);
          console.log("🍪 Auth token cookie set");
        }
        if (currentUser) {
          setCookie("current_user", JSON.stringify(currentUser));
          console.log("🍪 Current user cookie set");
        }

        localStorage.setItem("Micro_Learner_token", authToken);
        localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));
        window.authToken = authToken;

        ensureTeamRoleConsistency();

        closeModal("signup-modal");

        // Initialize dashboard
        initializeDashboard(currentUser.plan);
        showDashboard();
        showToast("Welcome to Micro Learner!", "success");
        loadDashboardData();
        //if (currentUser.plan === "Free") {
        // or "free" if that's your expected format
        showSection("download-app");
        /*} else {
          showSection("configuration");
        }*/

        // Check for enterprise invites FIRST
        if (
          parsedResponse.data.enterprise_invites &&
          parsedResponse.data.enterprise_invites.length > 0
        ) {
          console.log(
            "👥 Enterprise invites found - showing invite modal first"
          );

          // Show enterprise invite modal with callback for when processing is complete
          showEnterpriseInviteModalWithCallback(
            parsedResponse.data.enterprise_invites,
            function (inviteAccepted) {
              // This callback runs after user processes all invites
              if (inviteAccepted) {
                console.log(
                  "✅ User accepted enterprise invite - skipping plan selection"
                );
                // User is now on enterprise plan, don't show choose plan modal
                preSelectedPlan = null; // Clear the pre-selected plan
              } else {
                console.log(
                  "❌ User declined all invites - showing plan selection"
                );
                // User declined invites, show plan selection with pre-selected plan
                if (!parsedResponse.data.is_enterprise_invite) {
                  showChoosePlan(preSelectedPlan); // Pass the pre-selected plan
                }
              }
            }
          );
        } else {
          // No enterprise invites, proceed with normal flow
          if (!parsedResponse.data.is_enterprise_invite) {
            console.log(
              "💳 No enterprise invites - showing upgrade modal with pre-selected plan:",
              preSelectedPlan
            );
            showChoosePlan(preSelectedPlan); // Pass the pre-selected plan
          } else {
            console.log(
              "👥 Enterprise invite user (legacy) - skipping upgrade modal"
            );
          }
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Signup failed - server returned error");
        alert(response.message || "Signup failed");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 SIGNUP ERROR from signup.php:", {
        status: status,
        error: error,
        response: xhr.responseText,
        statusCode: xhr.status,
      });

      let errorMessage = "Signup failed. Please try again.";
      try {
        const errorResponse = JSON.parse(xhr.responseText);
        errorMessage = getErrorMessage(errorResponse, xhr.status);
      } catch (parseError) {
        console.error("💥 Could not parse error response as JSON:", parseError);
      }

      alert(errorMessage);
    },
  }).always(function () {
    isAuthInProgress = false;
    // Clear the pre-selected plan after signup attempt
    preSelectedPlan = null;
  });
}

// Function to determine if we should redirect to checkout
function shouldRedirectToCheckout(plan, isEnterpriseInvite) {
  console.log(
    "💰 shouldRedirectToCheckout - Plan:",
    plan,
    "Enterprise Invite:",
    isEnterpriseInvite
  );

  // If it's an enterprise invite, the enterprise leader pays - no checkout needed
  if (isEnterpriseInvite) {
    console.log("👥 Enterprise invite detected - no payment needed");
    return false;
  }

  // If it's a free plan, no payment needed
  if (!plan || plan === "free") {
    console.log("🆓 Free plan selected - no payment needed");
    return false;
  }

  // For pro, elite, or any other paid plan
  console.log("💳 Paid plan selected - checkout needed");
  return true;
}

// Function to handle checkout redirect with proper auth
function redirectToCheckout(plan, referralCode = "") {
  console.log("💳 redirectToCheckout called for plan:", plan);

  showToast("Redirecting to payment...", "success");

  // Small delay to ensure auth token is properly set
  setTimeout(() => {
    console.log("⏰ Checkout redirect timeout triggered");
    console.log(
      "🔍 Pre-checkout auth check - Token:",
      authToken ? "EXISTS" : "MISSING"
    );
    console.log(
      "🔍 Pre-checkout auth check - User:",
      currentUser ? "EXISTS" : "MISSING"
    );

    if (authToken && currentUser) {
      // Skip token validation and go directly to checkout since we just created the account
      console.log(
        "✅ Auth data present, proceeding to checkout initialization"
      );
      initializeCheckoutDirect(plan, "", referralCode);
    } else {
      console.error("❌ No auth data available for checkout");
      showToast("Authentication error. Please try logging in again.", "error");
      showDashboard();
    }
  }, 1000); // Reduced delay since we're skipping validation
}

// ================== ENHANCED ENTERPRISE INVITE MODAL ==================

// Global variable to track invite processing state
let enterpriseInviteCallback = null;

function showEnterpriseInviteModalWithCallback(invites, callback) {
  console.log(
    "👥 showEnterpriseInviteModalWithCallback() called with",
    invites.length,
    "invites"
  );

  // Store the callback for when invite processing is complete
  enterpriseInviteCallback = callback;

  // Use the existing function to show the modal
  showEnterpriseInviteModal(invites);
}

// ================== MODIFIED ACCEPT INVITE FUNCTION ==================

function acceptEnterpriseInvite(inviteId, teamId, teamName) {
  console.log("✅ acceptEnterpriseInvite() called", {
    inviteId,
    teamId,
    teamName,
  });

  if (
    !confirm(
      `Join "${teamName}" team?\n\nYou'll get full Enterprise access and your account will be managed by the team leader.`
    )
  ) {
    console.log("❌ User cancelled invite acceptance");
    return;
  }

  const $inviteCard = $(
    `.enterprise-invite-card[data-invite-id="${inviteId}"]`
  );
  $inviteCard.addClass("processing");

  console.log("🌐 Making AJAX request to accept enterprise invite");

  $.ajax({
    url: `${API_BASE_URL}/dashboard/enterprise_invite_handler.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      invite_id: inviteId,
      action: "accept",
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Accept invite request starting");
      console.log("🎫 Invite ID:", inviteId);
      console.log("👥 Team ID:", teamId);
      console.log("🏢 Team Name:", teamName);
    },
    success: function (response) {
      console.log("🎯🎯🎯 ACCEPT INVITE RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Enterprise invite accepted successfully");
        const parsedResponse = response;

        // 🔧 CRITICAL FIX: Update current user data immediately
        if (parsedResponse.data.user) {
          currentUser = parsedResponse.data.user;
          console.log("👤 User data updated from server response");
        }

        // 🔧 FORCE ENTERPRISE PLAN: Ensure plan is set correctly
        if (currentUser) {
          currentUser.plan = "Enterprise"; // Force set to Enterprise
          currentUser.team_role = currentUser.team_role || "member"; // Ensure team role

          // Update all storage immediately
          localStorage.setItem(
            "Micro_Learner_user",
            JSON.stringify(currentUser)
          );
          setCookie("current_user", JSON.stringify(currentUser));

          console.log("👤 FORCED Enterprise plan update:", {
            plan: currentUser.plan,
            team_role: currentUser.team_role,
          });

          // 🔧 IMMEDIATE UPDATE: Update danger zone buttons right now
          updateDangerZoneButtons();
          console.log(
            "✅ Danger zone buttons updated immediately after data change"
          );
        }

        // Close the modal
        closeEnterpriseInviteModal();
        showToast(`Successfully joined "${teamName}" team!`, "success");

        // ✨ Execute callback to indicate invite was accepted
        if (enterpriseInviteCallback) {
          console.log("🔄 Executing callback - invite accepted");
          enterpriseInviteCallback(true); // true = invite was accepted
          enterpriseInviteCallback = null; // Clear callback
        }

        // Refresh dashboard to show enterprise features
        setTimeout(() => {
          console.log("🔄 Refreshing dashboard for Enterprise plan");

          // Ensure team role consistency
          ensureTeamRoleConsistency();

          // Reinitialize dashboard for Enterprise
          initializeDashboard("Enterprise");
          showDashboard();
          loadDashboardData();

          // Update danger zone buttons again (just to be sure)
          updateDangerZoneButtons();

          // Show team section
          showSection("team");

          console.log("✅ Enterprise dashboard refresh completed");
        }, 1000);
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Enterprise invite acceptance failed:", response);
        alert(response.message || "Failed to accept invitation");
        $inviteCard.removeClass("processing");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
        $inviteCard.removeClass("processing");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 ACCEPT INVITE ERROR:", { xhr, status, error });

      let errorMessage = "Failed to accept invitation";
      if (xhr.responseJSON?.message) {
        errorMessage = xhr.responseJSON.message;
      } else if (xhr.responseJSON?.error) {
        errorMessage = xhr.responseJSON.error;
      }

      alert(errorMessage);
      $inviteCard.removeClass("processing");
    },
  });
}

// ================== MODIFIED DECLINE FUNCTIONS ==================

function declineEnterpriseInvite(inviteId, teamName) {
  console.log("❌ declineEnterpriseInvite() called", { inviteId, teamName });

  if (
    !confirm(
      `Decline invitation to join "${teamName}"?\n\nYou can't undo this action, but the team leader can send you a new invitation later.`
    )
  ) {
    console.log("❌ User cancelled invite decline");
    return;
  }

  const $inviteCard = $(
    `.invite-card[data-invite-id="${inviteId}"]` // ✅ Updated to use correct class
  );
  $inviteCard.addClass("processing");

  console.log("🌐 Making AJAX request to decline enterprise invite");

  $.ajax({
    url: `${API_BASE_URL}/dashboard/enterprise_invite_handler.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      invite_id: inviteId,
      action: "decline",
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Decline invite request starting");
      console.log("🎫 Invite ID:", inviteId);
      console.log("🏢 Team Name:", teamName);
    },
    success: function (response) {
      console.log("🎯🎯🎯 DECLINE INVITE RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Enterprise invite declined successfully");
        const parsedResponse = response;

        $inviteCard.fadeOut(300, function () {
          $(this).remove();

          const remainingInvites = $(
            "#enterprise-invites-list .invite-card" // ✅ Fixed: Use correct class
          ).length;
          console.log("📊 Remaining invites:", remainingInvites);

          if (remainingInvites === 0) {
            // ✨ All invites processed - execute callback
            closeEnterpriseInviteModal();

            if (enterpriseInviteCallback) {
              console.log("🔄 Executing callback - all invites declined");
              enterpriseInviteCallback(false); // false = no invites accepted
              enterpriseInviteCallback = null;
            }

            showToast("All invitations processed", "success");
          } else if (remainingInvites === 1) {
            $("#multiple-invites-notice").hide();
            $("#decline-all-invites-btn").hide();
          }
        });

        showToast(`Declined invitation to "${teamName}"`, "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Enterprise invite decline failed:", response);
        alert(response.message || "Failed to decline invitation");
        $inviteCard.removeClass("processing");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
        $inviteCard.removeClass("processing");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 DECLINE INVITE ERROR:", { xhr, status, error });

      let errorMessage = "Failed to decline invitation";
      if (xhr.responseJSON?.message) {
        errorMessage = xhr.responseJSON.message;
      } else if (xhr.responseJSON?.error) {
        errorMessage = xhr.responseJSON.error;
      }

      alert(errorMessage);
      $inviteCard.removeClass("processing");
    },
  });
}

function declineAllEnterpriseInvites() {
  console.log("❌ declineAllEnterpriseInvites() called");

  const inviteCards = $("#enterprise-invites-list .enterprise-invite-card");
  const inviteCount = inviteCards.length;

  if (inviteCount === 0) {
    console.log("ℹ️ No invites to decline");
    return;
  }

  if (
    !confirm(
      `Decline all ${inviteCount} team invitations?\n\nThis action cannot be undone, but team leaders can send you new invitations later.`
    )
  ) {
    console.log("❌ User cancelled decline all");
    return;
  }

  console.log(`🌐 Declining ${inviteCount} enterprise invites`);

  const inviteIds = [];
  inviteCards.each(function () {
    const inviteId = parseInt($(this).data("invite-id"));
    if (inviteId) {
      inviteIds.push(inviteId);
    }
  });

  console.log("📋 Invite IDs to decline:", inviteIds);
  inviteCards.addClass("processing");

  // Sequential processing of decline requests
  let processed = 0;
  let hasErrors = false;

  function processNextInvite() {
    if (processed >= inviteIds.length) {
      // All processed
      if (!hasErrors) {
        closeEnterpriseInviteModal();

        // ✨ NEW: Execute callback since all invites were declined
        if (enterpriseInviteCallback) {
          console.log(
            "🔄 Executing callback - all invites declined via decline all"
          );
          enterpriseInviteCallback(false); // false = no invites accepted
          enterpriseInviteCallback = null;
        }

        showToast(`Declined all ${inviteCount} team invitations`, "success");
      } else {
        showToast("Some invitations could not be declined", "warning");
        inviteCards.removeClass("processing");
      }
      return;
    }

    const currentInviteId = inviteIds[processed];

    $.ajax({
      url: `${API_BASE_URL}/dashboard/enterprise_invite_handler.php`,
      method: "POST",
      dataType: "json",
      data: JSON.stringify({
        invite_id: currentInviteId,
        action: "decline",
      }),
      contentType: "application/json",
      beforeSend: function (xhr) {
        console.log("🚀 Decline invite batch request starting");
        console.log("🎫 Processing invite ID:", currentInviteId);
        console.log("📊 Progress:", processed + 1, "of", inviteIds.length);
      },
      success: function (response) {
        if (response.status === "success" || response.success === true) {
          console.log(`✅ Invite ${currentInviteId} declined successfully`);
          processed++;
          processNextInvite();
        } else if (
          response.status === "error" ||
          response.error === "error" ||
          response.success === false
        ) {
          console.log(
            `❌ Failed to decline invite ${currentInviteId}:`,
            response
          );
          hasErrors = true;
          processed++;
          processNextInvite();
        } else {
          console.warn("Unexpected response format", response);
          hasErrors = true;
          processed++;
          processNextInvite();
        }
      },
      error: function (xhr, status, error) {
        console.log(`❌ Failed to decline invite ${currentInviteId}:`, {
          xhr,
          status,
          error,
        });
        hasErrors = true;
        processed++;
        processNextInvite();
      },
    });
  }

  // Start processing
  processNextInvite();
}

// Helper function to handle signup errors from successful response
function handleSignupError(response) {
  let errorMessage = "Signup failed. Please try again.";

  if (response.message) {
    if (
      response.message.toLowerCase().includes("email already exists") ||
      response.message.toLowerCase().includes("email taken")
    ) {
      errorMessage =
        "This email is already registered. Please use a different email or try logging in.";
    } else if (response.message.toLowerCase().includes("invalid email")) {
      errorMessage = "Please enter a valid email address.";
    } else if (response.message.toLowerCase().includes("password")) {
      errorMessage =
        "Password does not meet requirements. Please choose a stronger password.";
    } else if (response.message.toLowerCase().includes("name")) {
      errorMessage = "Please enter a valid name.";
    } else if (response.message.toLowerCase().includes("plan")) {
      errorMessage = "Invalid plan selected. Please choose a valid plan.";
    } else if (response.message.toLowerCase().includes("referral code")) {
      errorMessage =
        "Invalid referral code provided. Please check the code and try again.";
    } else if (response.message.toLowerCase().includes("promo code")) {
      errorMessage =
        "Invalid promo code provided. Please check the code and try again.";
    } else {
      errorMessage = response.message;
    }
  }

  showToast(errorMessage, "error");
}

// Helper function to get error message based on response and status code
function getErrorMessage(errorResponse, statusCode) {
  // Check debug logs for specific errors
  if (errorResponse.debug && Array.isArray(errorResponse.debug)) {
    const debugLogs = errorResponse.debug.join(" ").toLowerCase();

    if (debugLogs.includes("email already exists")) {
      return "This email is already registered. Please use a different email or try logging in.";
    }

    if (debugLogs.includes("invalid email")) {
      return "Please enter a valid email address.";
    }

    // Check for referral code issues BEFORE password issues
    if (debugLogs.includes("invalid referral code")) {
      return "Invalid referral code provided. Please check the code and try again.";
    }

    // Check for promo code issues
    if (
      debugLogs.includes("invalid promo code") ||
      debugLogs.includes("promo code")
    ) {
      return "Invalid promo code provided. Please check the code and try again.";
    }

    // Only check password if it's actually a password issue
    if (
      debugLogs.includes("password") &&
      !debugLogs.includes("referral") &&
      !debugLogs.includes("promo")
    ) {
      return "Password does not meet requirements. Please choose a stronger password.";
    }

    if (debugLogs.includes("database connection failed")) {
      return "Server error. Please try again in a few minutes.";
    }
  }

  // Check main error message with priority order
  if (errorResponse.error) {
    const errorText = errorResponse.error.toLowerCase();

    // Check for specific promo/referral code errors with detailed messages
    if (
      errorText.includes("promo code") &&
      errorText.includes("only valid for")
    ) {
      // Return the detailed server message for plan-specific promo code errors
      return errorResponse.error;
    }

    if (
      errorText.includes("referral code") &&
      errorText.includes("only valid for")
    ) {
      // Return the detailed server message for plan-specific referral code errors
      return errorResponse.error;
    }

    // Check referral/promo codes (generic cases)
    if (errorText.includes("referral code")) {
      return "Invalid referral code provided. Please check the code and try again.";
    }

    if (errorText.includes("promo code")) {
      return "Invalid promo code provided. Please check the code and try again.";
    }

    if (
      errorText.includes("email already exists") ||
      errorText.includes("email taken")
    ) {
      return "This email is already registered. Please use a different email or try logging in.";
    }

    if (errorText.includes("invalid email")) {
      return "Please enter a valid email address.";
    }

    // Only show password error if it's actually about password
    if (
      errorText.includes("password") &&
      !errorText.includes("referral") &&
      !errorText.includes("promo")
    ) {
      return "Password does not meet requirements. Please choose a stronger password.";
    }

    if (errorText.includes("name")) {
      return "Please enter a valid name.";
    }

    if (errorText.includes("plan")) {
      return "Invalid plan selected. Please choose a valid plan.";
    }

    // Return the actual error message if it's user-friendly and short
    if (errorResponse.error.length < 100) {
      return errorResponse.error;
    }
  }

  // Check main message field as fallback
  if (errorResponse.message) {
    const message = errorResponse.message.toLowerCase();

    // Check for specific promo/referral code errors with detailed messages
    if (message.includes("promo code") && message.includes("only valid for")) {
      // Return the detailed server message for plan-specific promo code errors
      return errorResponse.message;
    }

    if (
      message.includes("referral code") &&
      message.includes("only valid for")
    ) {
      // Return the detailed server message for plan-specific referral code errors
      return errorResponse.message;
    }

    if (message.includes("referral code")) {
      return "Invalid referral code provided. Please check the code and try again.";
    }

    if (message.includes("promo code")) {
      return "Invalid promo code provided. Please check the code and try again.";
    }

    if (
      message.includes("email already exists") ||
      message.includes("email taken")
    ) {
      return "This email is already registered. Please use a different email or try logging in.";
    }

    if (message.includes("invalid email")) {
      return "Please enter a valid email address.";
    }

    if (
      message.includes("password") &&
      !message.includes("referral") &&
      !message.includes("promo")
    ) {
      return "Password does not meet requirements. Please choose a stronger password.";
    }

    if (message.includes("name")) {
      return "Please enter a valid name.";
    }

    if (message.includes("plan")) {
      return "Invalid plan selected. Please choose a valid plan.";
    }

    // Return the actual message if it's user-friendly
    if (errorResponse.message.length < 100) {
      return errorResponse.message;
    }
  }

  // Status code based messages
  switch (statusCode) {
    case 400:
      return "Invalid signup information. Please check your details and try again.";
    case 409:
      return "This email is already registered. Please use a different email or try logging in.";
    case 422:
      return "Please check your information and ensure all fields are filled correctly.";
    case 500:
      return "Server error. Please try again in a few minutes.";
    case 503:
      return "Service temporarily unavailable. Please try again later.";
    default:
      return "Signup failed. Please try again.";
  }
}

// Global flag to track Google SDK status
let isGoogleSDKLoaded = false;
let googleSDKCallbacks = [];

// Function to wait for Google SDK to load
function waitForGoogleSDK(callback) {
  if (typeof google !== "undefined" && google.accounts) {
    console.log("✅ Google SDK is ready");
    isGoogleSDKLoaded = true;
    callback();
  } else {
    console.log("⏳ Waiting for Google SDK...");
    googleSDKCallbacks.push(callback);
  }
}

// Global callback that Google SDK will call when ready
window.onGoogleSDKLoad = function () {
  console.log("🎉 Google SDK loaded successfully");
  isGoogleSDKLoaded = true;

  // Execute all waiting callbacks
  googleSDKCallbacks.forEach((callback) => {
    try {
      callback();
    } catch (error) {
      console.error("Error executing Google SDK callback:", error);
    }
  });
  googleSDKCallbacks = [];
};

// Enhanced Google Sign-In initialization
function initializeGoogleSignIn() {
  console.log("🔐 Initializing Google Sign-In");

  waitForGoogleSDK(() => {
    try {
      google.accounts.id.initialize({
        client_id:
          "276407218386-cugc87dqivvd3gnop411aos9fg0n06kd.apps.googleusercontent.com",
        callback: handleGoogleSignIn,
        auto_prompt: false,
        use_fedcm_for_prompt: true,
      });

      console.log("✅ Google Sign-In initialized successfully");

      // Render button for login modal
      const loginButton = document.getElementById("google-signin-login");
      if (loginButton) {
        google.accounts.id.renderButton(loginButton, {
          theme: "outline",
          size: "large",
          text: "continue_with",
          // Remove width: "100%" - this causes the warning
        });
        console.log("✅ Google Sign-In button rendered for login");
      }

      // Render button for signup modal
      const signupButton = document.getElementById("google-signin-signup");
      if (signupButton) {
        google.accounts.id.renderButton(signupButton, {
          theme: "outline",
          size: "large",
          text: "signup_with",
          // Remove width: "100%" - this causes the warning
        });
        console.log("✅ Google Sign-In button rendered for signup");
      }
    } catch (error) {
      console.error("❌ Error initializing Google Sign-In:", error);
    }
  });
}

// Enhanced Google Sign-In trigger function
function googleSignIn() {
  console.log("🔐 googleSignIn() called");

  waitForGoogleSDK(() => {
    try {
      console.log("✅ Google SDK available, triggering sign-in");
      google.accounts.id.prompt();
    } catch (error) {
      console.error("❌ Error triggering Google Sign-In:", error);
      showToast("Google Sign In error. Please try again.", "error");
    }
  });
}

function selectPlanFromPricing(planId) {
  console.log("🎯 selectPlanFromPricing() called for plan:", planId);

  // Store the selected plan globally
  preSelectedPlan = planId;

  console.log("📋 Pre-selected plan stored:", preSelectedPlan);

  // Show the signup modal
  showSignup();
}

function handleGoogleSignIn(response) {
  console.log("🔐 handleGoogleSignIn() called");
  isAuthInProgress = true;

  const idToken = response.credential;
  const referralCode = getUrlParameter("ref") || "";

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/auth/google_auth.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/auth/google_auth.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      google_id_token: idToken,
      referral_code: referralCode,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Google auth request starting");
      console.log("🔑 ID Token provided:", idToken ? "YES" : "NO");
      console.log("🔗 Referral code:", referralCode || "NONE");
    },
    success: function (response) {
      console.log("🎯🎯🎯 GOOGLE AUTH RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Google sign-in successful - using centralized handler");
        const parsedResponse = response;
        console.log("🎯🎯🎯 GOOGLE AUTH parsedResponse:", response);

        // Use centralized login handler (same as all other auth methods)
        const loginSuccessful = handleLoginSuccess(parsedResponse, "google");

        // ✨ FIXED: Check for enterprise invites FIRST, then decide on plan selection
        if (loginSuccessful && parsedResponse.is_new_user) {
          // Check if there are enterprise invites
          if (
            parsedResponse.enterprise_invites &&
            parsedResponse.enterprise_invites.length > 0
          ) {
            console.log(
              "👥 New Google user WITH enterprise invites - enterprise modal will handle everything"
            );
            // Do NOT show choose plan modal - the enterprise invite modal is already showing
            // and will handle the flow via its callback
          } else {
            console.log(
              "💳 New Google user WITHOUT enterprise invites - showing plan selection"
            );
            setTimeout(() => {
              showChoosePlan(preSelectedPlan);
            }, 1500);
          }
        } else if (loginSuccessful) {
          console.log(
            "✅ Existing Google user - dashboard loaded, no plan selection needed"
          );
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Google sign-in failed:", response);
        const errorMessage =
          response.error || response.message || "Google sign-in failed";
        showToast(errorMessage, "error");
      } else {
        console.warn("Unexpected response format", response);
        showToast("Unexpected response format", "error");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 GOOGLE AUTH ERROR:", { xhr, status, error });

      let errorMessage = "Google sign-in error. Please try again.";
      try {
        if (xhr.responseJSON && xhr.responseJSON.error) {
          errorMessage = xhr.responseJSON.error;
        } else if (xhr.responseText) {
          const errorResponse = JSON.parse(xhr.responseText);
          if (errorResponse.error) {
            errorMessage = errorResponse.error;
          }
        }
      } catch (parseError) {
        console.error("Could not parse error response:", parseError);
      }

      console.log("🎯 Final error message to show:", errorMessage);
      alert(errorMessage);
    },
  }).always(function () {
    isAuthInProgress = false;
    preSelectedPlan = null; // Clear pre-selected plan
  });
}

// Make sure these functions are globally available
window.handleGoogleSignIn = handleGoogleSignIn;
window.onGoogleSDKLoad = window.onGoogleSDKLoad;
window.googleSignIn = googleSignIn;

// Update the logout function (around line 1380) - add nav-center display
function logout() {
  console.log("🚪 logout() called - enhanced cleanup");

  // Prevent multiple simultaneous logouts
  if (isLoggingOut) {
    console.log("🔄 Logout already in progress, skipping");
    return;
  }

  isLoggingOut = true;
  // Remove all elements with class current-plan-banner if they exist
  const planBanners = document.querySelectorAll(".current-plan-banner");
  if (planBanners.length > 0) {
    planBanners.forEach((banner) => {
      banner.remove();
      console.log("🗑️ Removed current-plan-banner element");
    });
    console.log(
      `🗑️ Removed ${planBanners.length} current-plan-banner element(s)`
    );
  }

  // IMMEDIATE cleanup of global variables
  authToken = null;
  currentUser = null;
  selectedPlan = null;
  window.authToken = null;
  window.currentUser = null;
  window.appliedPromoCode = null;

  // Clear ALL localStorage items
  localStorage.clear();

  // Clear ALL sessionStorage items
  sessionStorage.clear();

  // Clear ALL cookies (more thorough approach)
  document.cookie.split(";").forEach(function (cookie) {
    const eqPos = cookie.indexOf("=");
    const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
    // Clear with multiple path/domain variations
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/`;
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=${window.location.hostname}`;
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=.${window.location.hostname}`;
  });

  // Make server logout call
  $.ajax({
    url: `${API_BASE_URL}/auth/logout.php`,
    method: "POST",
    dataType: "json",
    data: {},
    contentType: "application/json",
    timeout: 5000,
    beforeSend: function (xhr) {
      console.log("🚀 Logout request starting");
    },
    success: function (response) {
      if (response.status === "success" || response.success === true) {
        console.log("✅ Server logout successful");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.log("⚠️ Server logout error:", response.message);
      } else {
        console.warn("Unexpected logout response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨 Logout request error (continuing anyway):", {
        xhr,
        status,
        error,
      });
    },
  }).always(function () {
    // Always perform client-side cleanup regardless of server response
    console.log("🧹 Performing comprehensive client-side logout cleanup");

    // Reset the logout flag
    isLoggingOut = false;

    // Force clear any remaining data
    authToken = null;
    currentUser = null;

    // Reset UI to landing page (this will also show nav-center)
    showLanding();

    // Clear any active modals
    $(".modal").removeClass("active");

    showToast("Signed out successfully", "success");
  });
}

// ================== DASHBOARD TAB FUNCTIONS ==================
function loadSettings() {
  console.log("⚙️ loadSettings() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/settings_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/settings_tab.php`,
    method: "GET",
    dataType: "json",
    data: { action: "get_settings" },
    beforeSend: function (xhr) {
      console.log("🚀 Load settings request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 LOAD SETTINGS RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Settings loaded successfully");
        const parsedResponse = response;

        // Populate form fields with user data
        $("#display-name").val(parsedResponse.name || "");
        $("#settings-email").val(parsedResponse.email || "");

        // ✨ NEW: Set the auto detect questions toggle
        const autoDetectQuestions =
          parsedResponse.auto_detect_questions || false;
        $("#auto-detect-questions").prop("checked", autoDetectQuestions);
        console.log(
          "🎯 Auto detect questions toggle set to:",
          autoDetectQuestions
        );

        // ✨ NEW: Set email notifications toggle (if not already set)
        const emailNotifications =
          parsedResponse.email_notifications !== undefined
            ? parsedResponse.email_notifications
            : true; // Default to true
        $("#email-notifications").prop("checked", emailNotifications);
        console.log(
          "📧 Email notifications toggle set to:",
          emailNotifications
        );

        console.log("📝 Settings form populated with all toggles");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.warn("⚠️ Settings loading failed, using current user data");
        // Fallback to current user data if no specific settings found
        if (parsedResponse) {
          $("#display-name").val(parsedResponse.name || "");
          $("#settings-email").val(parsedResponse.email || "");

          // Set defaults for toggles if no response data
          $("#auto-detect-questions").prop("checked", false);
          $("#email-notifications").prop("checked", true);
        }
      } else {
        console.warn("Unexpected response format", response);
        // Fallback to current user data
        if (parsedResponse) {
          $("#display-name").val(parsedResponse.name || "");
          $("#settings-email").val(parsedResponse.email || "");

          // Set defaults for toggles
          $("#auto-detect-questions").prop("checked", false);
          $("#email-notifications").prop("checked", true);
        }
      }

      // ✨ NEW: Only disable email field for Google accounts
      const isGoogleAccount = checkIfGoogleAccount();
      console.log("🔍 Is Google account:", isGoogleAccount);

      if (isGoogleAccount) {
        $("#settings-email").prop("disabled", true);
        console.log("🔒 Email field disabled for Google account");

        // Add visual indicator for Google accounts
        if (!$("#google-account-notice").length) {
          $("#settings-email").after(`
            <p id="google-account-notice" style="
              font-size: 0.75rem; 
              color: #6b6b6b; 
              margin-top: 0.25rem;
              font-style: italic;
            ">
              📧 Email cannot be changed for Google accounts
            </p>
          `);
        }
      } else {
        $("#settings-email").prop("disabled", false);
        console.log("✅ Email field enabled for regular account");

        // Remove Google account notice if it exists
        $("#google-account-notice").remove();
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 LOAD SETTINGS ERROR:", { xhr, status, error });

      // 🔍 THIS IS THE KEY - Log the raw response to see the actual PHP error
      console.log("📄 RAW RESPONSE TEXT:", xhr.responseText);
      console.log("📊 RESPONSE STATUS:", xhr.status);
      console.log("📋 RESPONSE HEADERS:", xhr.getAllResponseHeaders());

      // Additional debugging
      if (xhr.responseText) {
        console.log(
          "🔍 RESPONSE STARTS WITH:",
          xhr.responseText.substring(0, 200)
        );

        // Check if it's an HTML error (PHP error output)
        if (
          xhr.responseText.includes("<br") ||
          xhr.responseText.includes("<b>")
        ) {
          console.log("⚠️ DETECTED HTML ERROR OUTPUT (PHP error):");
          console.log(xhr.responseText);
        }

        // Try to extract the actual error message
        if (
          xhr.responseText.includes("Fatal error") ||
          xhr.responseText.includes("Warning") ||
          xhr.responseText.includes("Notice")
        ) {
          console.log("🚨 PHP ERROR DETECTED IN RESPONSE!");
        }
      }

      // Fallback to current user data on error
      if (currentUser) {
        console.log("📝 Using currentUser data as fallback");
        $("#display-name").val(currentUser.name || "");
        $("#settings-email").val(currentUser.email || "");

        // Set defaults for toggles on error
        $("#auto-detect-questions").prop("checked", false);
        $("#email-notifications").prop("checked", true);

        // Still apply Google account logic on error
        const isGoogleAccount = checkIfGoogleAccount();
        if (isGoogleAccount) {
          $("#settings-email").prop("disabled", true);
          if (!$("#google-account-notice").length) {
            $("#settings-email").after(`
          <p id="google-account-notice" style="
            font-size: 0.75rem; 
            color: #6b6b6b; 
            margin-top: 0.25rem;
            font-style: italic;
          ">
            📧 Email cannot be changed for Google accounts
          </p>
        `);
          }
        } else {
          $("#settings-email").prop("disabled", false);
          $("#google-account-notice").remove();
        }
      }
    },
  });
}

// ✨ NEW: Helper function to check if current user is a Google account
function checkIfGoogleAccount() {
  console.log("🔍 checkIfGoogleAccount() called");
  console.log("👤 Current user data:", currentUser);

  if (!currentUser) {
    console.log("❌ No current user data available");
    return false;
  }

  // Method 1: Check for explicit Google account flag from backend
  if (
    currentUser.auth_provider === "google" ||
    currentUser.is_google_account === true
  ) {
    console.log(
      "✅ Google account detected via auth_provider/is_google_account flag"
    );
    return true;
  }

  // Method 2: Check for Google ID field
  if (currentUser.google_id || currentUser.google_user_id) {
    console.log("✅ Google account detected via google_id field");
    return true;
  }

  // Method 3: Check if user has no password (Google users typically don't have passwords)
  if (
    currentUser.has_password === false ||
    currentUser.password_set === false
  ) {
    console.log("✅ Google account detected via no password");
    return true;
  }

  // Method 4: Check email domain patterns that might indicate Google signup
  // (This is less reliable but can be a fallback)
  if (currentUser.email && currentUser.signup_method === "google") {
    console.log("✅ Google account detected via signup_method");
    return true;
  }

  console.log("❌ Not a Google account - regular email/password account");
  return false;
}

// Also update your loadDashboardData function to load settings initially
function loadDashboardData() {
  console.log("📊 loadDashboardData() called");
  // Load all initial data
  console.log("⚙️ Loading user config");
  loadUserConfig();

  console.log("⚙️ Loading user settings");
  loadSettings();

  console.log("🧠 Loading recent memories");
  loadRecentMemories();

  console.log("📈 Updating usage stats");
  //updateUsageStats();

  if (currentUser.plan === "enterprise") {
    console.log("👥 Loading team members for enterprise plan");
    loadTeamMembers();
  }
}

// Configuration Tab
function saveConfig() {
  console.log("💾 saveConfig() called");

  const prePrompts = $("#pre-prompts").val();
  const prePromptsLength = prePrompts.length;

  // Define character limits based on plan
  const planLimits = {
    pro: 200,
    elite: 500,
    enterprise: 1000,
  };

  // Get current user's plan limit
  const currentPlan = currentUser.plan?.toLowerCase();
  const charLimit = planLimits[currentPlan];

  // Validate pre-prompt length
  if (!charLimit) {
    console.error("❌ Unknown plan type:", currentUser.plan);
    alert("Unable to determine plan limits. Please contact support.");
    return;
  }

  if (prePromptsLength > charLimit) {
    console.warn(
      `⚠️ Micro Training is too long: ${prePromptsLength}/${charLimit} chars for ${currentPlan} plan`
    );
    alert(
      `Micro Training is too long! Maximum ${charLimit} characters allowed for ${currentPlan.toUpperCase()} plan. Current: ${prePromptsLength} characters.`
    );
    return;
  }

  console.log(
    `✅ Micro Training validation passed: ${prePromptsLength}/${charLimit} chars`
  );

  const config = {
    ai_model: selectedModel,
    pre_prompts: prePrompts,
    context_level: $("#context-slider").val() || 5,
    shared: currentUser.plan === "enterprise",
  };

  console.log("⚙️ Config to save:", config);
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/settings_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/settings_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({ action: "save_config", config }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Save config request starting");
      console.log("🤖 AI Model:", selectedModel);
      console.log("📝 Pre-prompts length:", prePromptsLength);
      console.log("🎛️ Context level:", $("#context-slider").val());
      console.log("👤 User plan:", currentPlan);
      console.log("📏 Character limit:", charLimit);
    },
    success: function (response) {
      console.log("🎯🎯🎯 SAVE CONFIG RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Config saved successfully");
        showToast("Configuration saved!", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Config save failed:", response);
        alert(response.message || "Failed to save configuration");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 SAVE CONFIG ERROR from settings_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to save configuration");
    },
  });
}

// ================== AUTO LOGIN FUNCTION ==================
function attemptAutoLogin() {
  console.log("🔄 attemptAutoLogin() called");

  const tokenFromStorage = localStorage.getItem("Micro_Learner_token");
  const sessionTokenFromCookie = getCookie("session_token");

  if (!tokenFromStorage) {
    console.log("❌ No auth token available for auto login");
    return Promise.resolve(false);
  }

  console.log("🌐 Validating token with server...");

  return $.ajax({
    url: `${API_BASE_URL}/auth/auto_login.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      session_token: sessionTokenFromCookie,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Auto login request starting");
      console.log(
        "🔑 Token from storage:",
        tokenFromStorage ? "EXISTS" : "MISSING"
      );
      console.log(
        "🍪 Session token from cookie:",
        sessionTokenFromCookie ? "EXISTS" : "MISSING"
      );
      xhr.setRequestHeader("Authorization", "Bearer " + tokenFromStorage);
    },
    success: function (response) {
      if (response.status === "success" || response.success === true) {
        console.log("✅ Auto login successful - using centralized handler");
        const parsedResponse = response;
        return handleLoginSuccess(parsedResponse, "auto");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.warn("❌ Auto login failed:", response);
        clearAuthData();
        return false;
      } else {
        console.warn("Unexpected response format", response);
        clearAuthData();
        return false;
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨 AUTO LOGIN ERROR:", { xhr, status, error });
      clearAuthData();
      return false;
    },
  });
}

function ensureTeamRoleConsistency() {
  // Verify team role is set and valid
  if (!currentUser.team_role) {
    console.warn("⚠️ Team role missing, setting default");
    currentUser.team_role = "member";
    localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));
  }

  // Normalize team role (handle case sensitivity)
  const normalizedRole = currentUser.team_role.toLowerCase().trim();
  if (currentUser.team_role !== normalizedRole) {
    console.log(
      "🔧 Normalizing team role:",
      currentUser.team_role,
      "->",
      normalizedRole
    );
    currentUser.team_role = normalizedRole;
    localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));
  }

  console.log("✅ Team role consistency verified:", currentUser.team_role);
}

function clearAuthData() {
  console.log("🧹 clearAuthData() called");

  authToken = null;
  currentUser = null;
  localStorage.removeItem("Micro_Learner_token");
  localStorage.removeItem("Micro_Learner_user");

  // ✨ NEW: Delete all auth cookies
  deleteCookie("session_token");
  deleteCookie("auth_token");
  deleteCookie("current_user");
  console.log("🍪 All auth cookies deleted");

  console.log("✅ Auth data cleared from localStorage and cookies");
}

// ================== UPDATED INITIALIZATION ==================

// ================== PERIODIC AUTO LOGIN CHECK ==================

// Optional: Periodically check if session is still valid
function startSessionMonitoring() {
  console.log("👁️ Starting session monitoring");

  setInterval(function () {
    // Only check if we think we're authenticated
    if (authToken && currentUser && $("#dashboard").hasClass("active")) {
      console.log("👁️ Periodic session check");

      $.ajax({
        url: `${API_BASE_URL}/auth/auto_login.php`,
        method: "GET",
        dataType: "json",
        beforeSend: function (xhr) {
          if (authToken) {
            xhr.setRequestHeader("Authorization", "Bearer " + authToken);
          }
        },
        success: function (response) {
          if (response.status === "success" || response.success === true) {
            console.log("✅ Session still valid");
            const parsedResponse = response;
            // Optionally refresh token if provided
            if (
              parsedResponse.data.token &&
              parsedResponse.data.token !== authToken
            ) {
              authToken = parsedResponse.data.token;
              localStorage.setItem("Micro_Learner_token", authToken);
              console.log("🔄 Token refreshed during session check");
            }
          } else if (
            response.status === "error" ||
            response.error === "error" ||
            response.success === false
          ) {
            console.log("❌ Session invalid, logging out");
            logout();
          } else {
            console.warn("Unexpected response format", response);
          }
        },
        error: function (xhr) {
          if (xhr.status === 401) {
            console.log("🔒 Session expired, logging out");
            logout();
          }
        },
      });
    }
  }, 5 * 60 * 1000); // Check every 5 minutes
}
function loadUserConfig() {
  console.log("⚙️ loadUserConfig() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/settings_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/settings_tab.php`,
    method: "GET",
    dataType: "json",
    data: { action: "get_config" },
    beforeSend: function (xhr) {
      console.log("🚀 Load user config request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 LOAD CONFIG RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Config loaded successfully");
        const parsedResponse = response;

        // FIX: Handle both response formats - config can be at top level or nested under data
        const config = parsedResponse.config || parsedResponse.data?.config;

        if (config) {
          $("#pre-prompts").val(
            config.pre_prompts || config.current_prompt || ""
          );
          $("#context-slider").val(config.context_level || 5);
          $("#context-value").text(config.context_level || 5);

          // FIX: Handle both possible field names for the AI model
          selectedModel =
            config.ai_model ||
            config.current_modal ||
            config.current_model ||
            "chatgpt";

          // Convert display name to internal ID if needed
          const modelMapping = {
            "DeepSeek R1": "deepseek-r1",
            "DeepSeek Chat": "deepseek-chat",
            ChatGPT: "chatgpt",
            "Claude 3.5": "claude-3.5",
            "Claude 4.0": "claude-4.0",
          };

          if (modelMapping[selectedModel]) {
            selectedModel = modelMapping[selectedModel];
          }

          $(".modal-option").removeClass("selected");
          $(`.modal-option[data-model="${selectedModel}"]`).addClass(
            "selected"
          );

          console.log("🤖 Selected AI model:", selectedModel);
        } else {
          console.warn("⚠️ No config data found in response");
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.warn("⚠️ Config loading failed or request failed");
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 LOAD CONFIG ERROR from settings_tab.php:", {
        xhr,
        status,
        error,
      });
    },
  });
}

// Memory Search Tab
function searchMemories() {
  console.log("🔍 searchMemories() called");

  const query = $("#memory-search").val();
  console.log("🔍 Search query:", query);

  if (!query.trim()) {
    console.log("ℹ️ Empty query, loading recent memories");
    loadRecentMemories();
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/memory_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/memory_tab.php`,
    method: "GET",
    dataType: "json",
    data: {
      action: "search",
      query: query,
      page: 1,
      limit: 50,
    },
    beforeSend: function (xhr) {
      console.log("🚀 Search memories request starting");
      console.log("🔍 Query:", query);
    },
    success: function (response) {
      console.log("🎯🎯🎯 SEARCH MEMORIES RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Memory search successful");
        const parsedResponse = response;
        displayMemoryResults(parsedResponse.data.memories);

        // Update result count
        $("#memory-results-count").text(
          `Found ${parsedResponse.data.pagination.total} results`
        );
        console.log(
          "📊 Updated result count:",
          parsedResponse.data.pagination.total
        );
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Memory search failed:", response);
        alert(response.message || "Memory search failed");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 SEARCH MEMORIES ERROR from memory_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Memory search failed");
    },
  });
}

function loadRecentMemories() {
  console.log("🧠 loadRecentMemories() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/memory_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/memory_tab.php`,
    method: "GET",
    dataType: "json",
    data: {
      action: "recent",
      limit: 10,
    },
    beforeSend: function (xhr) {
      console.log("🚀 Load recent memories request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 RECENT MEMORIES RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log(
          "✅ Recent memories loaded:",
          response.data.memories.length
        );
        const parsedResponse = response;
        displayMemoryResults(parsedResponse.data.memories);
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Load recent memories failed:", response);
        alert(response.message || "Failed to load recent memories");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 RECENT MEMORIES ERROR from memory_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to load recent memories");
    },
  });
}

function displayMemoryResults(memories) {
  console.log(
    "📋 displayMemoryResults() called with",
    memories.length,
    "memories"
  );

  const $results = $("#memory-results");
  $results.empty();

  if (memories.length === 0) {
    console.log("ℹ️ No memories to display");
    $results.html('<p style="color: #8a8a8a">No memories found</p>');
    return;
  }

  memories.forEach((memory, index) => {
    console.log(`📝 Processing memory ${index + 1}:`, memory.id);

    const date = new Date(memory.created_at);
    const timeAgo = getTimeAgo(date);

    const $memory = $(`
      <div class="memory-item" data-memory-id="${memory.id}">
        <div class="memory-date">${timeAgo} - ${memory.context}</div>
        <div class="memory-text">"${escapeHtml(memory.content)}"</div>
        <div class="memory-actions" style="margin-top: 0.5rem; display: none;">
          <button class="btn btn-text edit-memory-btn" data-id="${
            memory.id
          }" style="font-size: 0.75rem">Edit</button>
          <button class="btn btn-text delete-memory-btn" data-id="${
            memory.id
          }" style="font-size: 0.75rem; color: #e00">Delete</button>
        </div>
      </div>
    `);

    // Show actions on hover
    $memory.hover(
      function () {
        $(this).find(".memory-actions").show();
      },
      function () {
        $(this).find(".memory-actions").hide();
      }
    );

    $results.append($memory);
  });

  console.log("✅ Memory results displayed successfully");
}

function deleteMemory(memoryId) {
  console.log("🗑️ deleteMemory() called for ID:", memoryId);

  if (!confirm("Delete this memory?")) {
    console.log("❌ User cancelled memory deletion");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/memory_tab.php?action=delete&id=${memoryId}`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/memory_tab.php?action=delete&id=${memoryId}`,
    method: "DELETE",
    dataType: "json",
    beforeSend: function (xhr) {
      console.log("🚀 Delete memory request starting");
      console.log("🗑️ Memory ID:", memoryId);
    },
    success: function (response) {
      console.log("🎯🎯🎯 DELETE MEMORY RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Memory deleted successfully");
        $(`.memory-item[data-memory-id="${memoryId}"]`).fadeOut();
        showToast("Memory deleted", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Delete memory failed:", response);
        alert(response.message || "Failed to delete memory");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 DELETE MEMORY ERROR from memory_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to delete memory");
    },
  });
}

function editMemory(memoryId) {
  console.log("✏️ editMemory() called for ID:", memoryId);
  // TODO: Implement edit modal
  showToast("Edit feature coming soon", "info");
}

// Analytics Tab
function showSection(section) {
  console.log("📂 showSection() called for:", section);

  // Hide all sections
  $(".dashboard-section").hide();

  // Show selected section
  $(`#${section}-section`).show();

  // Update menu using data attribute
  $(".menu-item").removeClass("active");
  $(`.menu-item[data-section="${section}"]`).addClass("active");

  console.log("✅ Section switched to:", section);
  // Load section-specific data
  switch (section) {
    case "analytics":
      console.log("📊 Loading analytics data");
      loadAnalytics();
      break;
    case "configuration": // ADD THIS CASE
      console.log("⚙️ Loading configuration data");
      loadConfiguration();
      break;
    case "team":
      console.log("👥 Loading team data");
      loadTeamMembers();
      break;
    case "billing":
      console.log("💳 Loading billing data including credits");
      loadBillingInfo();
      break;
    case "memory-search":
      console.log("🧠 Loading memory data");
      loadRecentMemories();
      break;
    case "downloa-app":
      console.log("🧠 Loading app section");
      break;
    default:
      console.log("ℹ️ No specific data loading for section:", section);
  }
}

// ================== CONFIGURATION TAB FUNCTIONS ==================

function loadConfiguration() {
  console.log("⚙️ loadConfiguration() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/configuration_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/configuration_tab.php`,
    method: "GET",
    dataType: "json",
    data: { action: "get_configuration" },
    beforeSend: function (xhr) {
      console.log("🚀 Load configuration request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 LOAD CONFIGURATION RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Configuration loaded successfully");
        const parsedResponse = response;

        if (parsedResponse.data) {
          const config = parsedResponse.data.config;
          const availableModels = parsedResponse.data.available_models || [];
          const features = parsedResponse.data.features || {};

          // Populate AI model selection
          populateAIModels(availableModels);

          // Load user's configuration settings
          if (config) {
            // Set pre-prompts
            $("#pre-prompts").val(
              config.current_prompt || config.pre_prompts || ""
            );

            // Set context level
            const contextLevel = config.context_level || 5;
            $("#context-slider").val(contextLevel);
            $("#context-value").text(contextLevel);

            // FIX: Handle both possible field names for the AI model
            selectedModel =
              config.ai_model ||
              config.current_modal ||
              config.current_model ||
              "chatgpt";

            // Convert display name back to internal ID if needed
            const modelMapping = {
              "DeepSeek R1": "deepseek-r1",
              "DeepSeek Chat": "deepseek-chat",
              ChatGPT: "chatgpt",
              "Claude 3.5": "claude-3.5",
              "Claude 4.0": "claude-4.0",
            };

            // If selectedModel is a display name, convert to ID
            if (modelMapping[selectedModel]) {
              selectedModel = modelMapping[selectedModel];
            }

            console.log(
              "🤖 Raw model from API:",
              config.ai_model || config.current_modal || config.current_model
            );
            console.log("🤖 Converted selectedModel:", selectedModel);

            // Clear any existing selections and select the correct model
            $(".modal-option").removeClass("selected");
            const $targetOption = $(
              `.modal-option[data-model="${selectedModel}"]`
            );

            if ($targetOption.length > 0) {
              $targetOption.addClass("selected");
              console.log("✅ Model option selected:", selectedModel);
            } else {
              console.warn(
                "⚠️ No modal option found for model:",
                selectedModel
              );
              // Try to find a close match or default to first option
              const $firstOption = $(".modal-option").first();
              if ($firstOption.length > 0) {
                $firstOption.addClass("selected");
                selectedModel = $firstOption.data("model") || "chatgpt";
                console.log("🔄 Defaulted to first option:", selectedModel);
              }
            }

            // Update model display in UI if there's a display element
            const selectedModelData = availableModels.find(
              (model) => model.id === selectedModel
            );
            if (selectedModelData && $("#selected-model-display").length) {
              $("#selected-model-display").text(selectedModelData.name);
            }

            console.log("🤖 Final selectedModel:", selectedModel);
            console.log(
              "🎛️ Configuration loaded - Context level:",
              contextLevel
            );
            console.log(
              "📝 Configuration loaded - Pre-prompts length:",
              (config.current_prompt || config.pre_prompts || "").length
            );
          }

          // Update feature availability based on user plan
          updateConfigurationFeatures(features);

          // Load configuration history/statistics if available
          if (parsedResponse.data.stats) {
            updateConfigurationStats(parsedResponse.data.stats);
          }
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.warn("⚠️ Configuration loading failed or request failed");
        // Load default configuration
        loadDefaultConfiguration();
      } else {
        console.warn("Unexpected response format", response);
        loadDefaultConfiguration();
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 LOAD CONFIGURATION ERROR:", { xhr, status, error });

      // Fallback to existing loadUserConfig function
      console.log("🔄 Falling back to existing loadUserConfig");
      loadUserConfig();

      showToast(
        "Error loading configuration, using cached settings",
        "warning"
      );
    },
  });
}

// Populate available AI models based on user's plan
function populateAIModels(availableModels) {
  console.log("🤖 populateAIModels() called with:", availableModels);

  const $modelsContainer = $("#ai-models-container");
  if (!$modelsContainer.length) {
    console.warn("⚠️ AI models container not found");
    return;
  }

  $modelsContainer.empty();

  availableModels.forEach((model) => {
    const isSelected = model.id === selectedModel;
    const isAvailable = model.available !== false;

    console.log(
      `🤖 Adding model: ${model.name} (${model.id}) - Available: ${isAvailable}`
    );

    const $modelOption = $(`
      <div class="modal-option ${isSelected ? "selected" : ""} ${
      !isAvailable ? "disabled" : ""
    }" 
           data-model="${model.id}" 
           ${!isAvailable ? 'data-disabled="true"' : ""}>
        <div class="model-icon">🤖</div>
        <div class="model-info">
          <div class="model-name">${model.name}</div>
          <div class="model-description">${model.description || ""}</div>
          ${
            model.badge ? `<span class="model-badge">${model.badge}</span>` : ""
          }
          ${
            !isAvailable
              ? '<span class="model-unavailable">Plan Upgrade Required</span>'
              : ""
          }
        </div>
      </div>
    `);

    $modelsContainer.append($modelOption);
  });

  console.log("✅ AI models populated successfully");
}

// Update configuration features based on user plan
function updateConfigurationFeatures(features) {
  console.log("🎯 updateConfigurationFeatures() called with:", features);

  // Show/hide context control based on plan
  /*if (features.context_control === true) {
    $("#context-control").show();
    console.log("🎛️ Context control enabled");
  } else {
    $("#context-control").hide();
    console.log("🎛️ Context control disabled");
  }*/

  // Show/hide advanced pre-prompts based on plan
  if (features.advanced_prompts === true) {
    $("#advanced-prompts-section").show();
    console.log("📝 Advanced prompts enabled");
  } else {
    $("#advanced-prompts-section").hide();
    console.log("📝 Advanced prompts disabled");
  }

  // Update pre-prompts character limit
  const charLimit = features.pre_prompt_limit || 500;
  $("#pre-prompts").attr("maxlength", charLimit);
  $("#char-limit-display").text(`${charLimit} characters max`);

  console.log("📏 Pre-prompt character limit set to:", charLimit);

  // Show/hide team configuration options
  if (features.team_config === true && currentUser.plan === "enterprise") {
    $("#team-config-section").show();
    console.log("👥 Team configuration enabled");
  } else {
    $("#team-config-section").hide();
    console.log("👥 Team configuration disabled");
  }
}

// Update configuration statistics
function updateConfigurationStats(stats) {
  console.log("📊 updateConfigurationStats() called with:", stats);

  if (stats.last_updated) {
    $("#config-last-updated").text(
      `Last updated: ${new Date(stats.last_updated).toLocaleDateString()}`
    );
  }

  if (stats.total_saves !== undefined) {
    $("#config-save-count").text(`Saved ${stats.total_saves} times`);
  }

  if (stats.model_usage) {
    updateModelUsageStats(stats.model_usage);
  }

  console.log("✅ Configuration stats updated");
}

// Load default configuration if no saved config exists
function loadDefaultConfiguration() {
  console.log("🔄 loadDefaultConfiguration() called");

  // Set default values
  $("#pre-prompts").val("");
  $("#context-slider").val(5);
  $("#context-value").text(5);
  selectedModel = "chatgpt";

  // Select default model
  $(".modal-option").removeClass("selected");
  $(`.modal-option[data-model="${selectedModel}"]`).addClass("selected");

  console.log("✅ Default configuration loaded");
}

// Update model usage statistics
function updateModelUsageStats(modelUsage) {
  console.log("📈 updateModelUsageStats() called with:", modelUsage);

  const $statsContainer = $("#model-usage-stats");
  if (!$statsContainer.length) {
    console.warn("⚠️ Model usage stats container not found");
    return;
  }

  $statsContainer.empty();

  Object.entries(modelUsage).forEach(([modelId, usage]) => {
    // Model name should come from the available models data, not hardcoded
    const $stat = $(`
      <div class="usage-stat">
        <span class="stat-label">${usage.model_name || modelId}</span>
        <span class="stat-value">${usage.messages || 0} messages</span>
      </div>
    `);
    $statsContainer.append($stat);
  });

  console.log("✅ Model usage stats updated");
}

// Update the showSection function case for configuration
// Add this to your existing showSection function in the switch statement:
/*
case "configuration":
  console.log("⚙️ Loading configuration data");
  loadConfiguration();
  break;
*/

// Enhanced save configuration function
function saveConfigurationEnhanced() {
  console.log("💾 saveConfigurationEnhanced() called");

  const config = {
    ai_model: selectedModel,
    pre_prompts: $("#pre-prompts").val(),
    context_level: $("#context-slider").val() || 5,
    shared: currentUser.plan === "enterprise",
    // Add additional configuration options
    auto_save: $("#auto-save-config").is(":checked"),
    notification_preferences: {
      email_updates: $("#email-config-updates").is(":checked"),
      usage_alerts: $("#usage-alerts").is(":checked"),
    },
  };

  console.log("⚙️ Enhanced config to save:", config);
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/configuration_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/configuration_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({ action: "save_configuration", config }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Save configuration enhanced request starting");
      console.log("🤖 AI Model:", selectedModel);
      console.log("📝 Pre-prompts length:", $("#pre-prompts").val().length);
      console.log("🎛️ Context level:", $("#context-slider").val());
      console.log(
        "⚙️ Auto save enabled:",
        $("#auto-save-config").is(":checked")
      );
    },
    success: function (response) {
      console.log("🎯🎯🎯 SAVE CONFIGURATION RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Configuration saved successfully");
        const parsedResponse = response;
        showToast("Configuration saved!", "success");

        // Update last saved timestamp
        $("#config-last-updated").text(
          `Last updated: ${new Date().toLocaleDateString()}`
        );

        // Refresh configuration display
        loadConfiguration();
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Configuration save failed:", response);
        alert(response.message || "Failed to save configuration");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log(
        "🚨🚨🚨 SAVE CONFIGURATION ERROR from configuration_tab.php:",
        { xhr, status, error }
      );
      alert("Error saving configuration");
    },
  });
}

function loadAnalytics() {
  console.log("📊 loadAnalytics() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/analytics_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/analytics_tab.php`,
    method: "GET",
    dataType: "json",
    beforeSend: function (xhr) {
      console.log("🚀 Load analytics request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 ANALYTICS RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Analytics loaded successfully");
        const parsedResponse = response;
        const data = parsedResponse.data;

        // Update individual stats
        $("#tokens-used").text(data.tokens_used || 0);
        $("#memory-size").text(data.memory_size || "0KB");
        $("#active-model").text(selectedModel.toUpperCase());

        console.log("📈 Analytics data updated in UI");

        // Update chart
        console.log("📊 Updating usage chart");
        updateUsageChart(data.weekly_usage, data.user_plan || "free");

        // If credit information is available in analytics, update it
        if (data.credits) {
          console.log("💰 Credit data found in analytics, updating...");
          updateCreditBalance(data.credits);
        }

        // If referral information is available in analytics, update friends count
        if (data.referral) {
          console.log(
            "👥 Referral data found in analytics, updating friends count..."
          );
          $("#total-friends-referred").text(
            data.referral.total_friends_referred || 0
          );
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Analytics load failed:", response);
        alert(response.message || "Failed to load analytics");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 ANALYTICS ERROR from analytics_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to load analytics");
    },
  });
}

function updateUsageChart(weeklyData, userPlan = "free") {
  console.log(
    "📊 updateUsageChart() called with enhanced input/output data:",
    weeklyData,
    "plan:",
    userPlan
  );

  const $chart = $("#usage-chart");
  $chart.empty();

  // Day labels for the week (Sunday to Saturday)
  const dayLabels = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

  // Set maximum value based on plan
  const planMaxValues = {
    free: 200,
    pro: 500,
    elite: 1000,
    enterprise: 1000,
  };

  const chartMaxValue = planMaxValues[userPlan] || 200;
  console.log("📈 Chart max value for plan:", chartMaxValue);

  // Create 5 equal intervals for Y-axis
  const interval = chartMaxValue / 5;
  const yAxisValues = [0, 1, 2, 3, 4, 5].map((i) => i * interval);

  // Create container for chart bars and labels
  const chartHTML = `
    <div style="display: flex; flex-direction: column; height: 100%; width: 100%; position: relative;">
      <!-- Chart Legend -->
      <div class="chart-legend">
        <div class="legend-item">
          <div class="legend-color legend-input"></div>
          <span>Input</span>
        </div>
        <div class="legend-item">
          <div class="legend-color legend-output"></div>
          <span>Output</span>
        </div>
      </div>
      
      <!-- Y-axis scale labels -->
      <div style="position: absolute; left: 0; top: 1rem; height: calc(100% - 31px - 2rem); width: 30px; display: flex; flex-direction: column-reverse; justify-content: space-between; font-size: 0.65rem; color: #8a8a8a;">
        ${yAxisValues
          .map(
            (value) =>
              `<span style="line-height: 1; height: 20%; display: flex; align-items: center;">${Math.round(
                value
              )}</span>`
          )
          .join("")}
      </div>
      
      <!-- Chart bars container -->
      <div style="display: flex; align-items: flex-end; height: calc(100% - 30px); gap: 0.5rem; padding: 1rem 1rem 0 35px; position: relative;">
        <!-- Grid lines -->
        <div style="position: absolute; left: 35px; right: 1rem; top: 1rem; bottom: 0; pointer-events: none; display: flex; flex-direction: column; justify-content: space-between;">
          ${yAxisValues
            .slice()
            .reverse()
            .map(
              () =>
                `<div style="height: 1px; background: #f0f0f0; opacity: 0.3; width: 100%;"></div>`
            )
            .join("")}
        </div>
        
        ${weeklyData
          .map((dayData, index) => {
            // Handle both old format (just numbers) and new format (objects with input/output)
            let inputTokens = 0;
            let outputTokens = 0;
            let totalTokens = 0;

            if (typeof dayData === "object" && dayData !== null) {
              inputTokens = dayData.input_tokens || 0;
              outputTokens = dayData.output_tokens || 0;
              totalTokens = dayData.tokens || inputTokens + outputTokens;
            } else {
              // Fallback for old format - treat as total tokens
              totalTokens = dayData || 0;
              // Estimate split (60% input, 40% output for display purposes)
              inputTokens = Math.round(totalTokens * 0.6);
              outputTokens = Math.round(totalTokens * 0.4);
            }

            const inputHeight =
              chartMaxValue > 0 ? (inputTokens / chartMaxValue) * 100 : 0;
            const outputHeight =
              chartMaxValue > 0 ? (outputTokens / chartMaxValue) * 100 : 0;

            // For zero values, show small fixed height bars
            const inputDisplayHeight =
              inputTokens === 0 ? "2px" : `${inputHeight}%`;
            const outputDisplayHeight =
              outputTokens === 0 ? "2px" : `${outputHeight}%`;
            const inputMinHeight =
              inputTokens === 0 ? "2px" : inputTokens > 0 ? "4px" : "0";
            const outputMinHeight =
              outputTokens === 0 ? "2px" : outputTokens > 0 ? "4px" : "0";

            console.log(
              `📊 Chart bar ${index}: input=${inputTokens} (${inputHeight}%), output=${outputTokens} (${outputHeight}%), total=${totalTokens}`
            );

            return `
            <div style="flex: 1; position: relative; display: flex; flex-direction: column; align-items: center;">
              <!-- Tooltip for combined values -->
              <div class="chart-value-tooltip" style="
                position: absolute; 
                bottom: calc(${
                  Math.max(inputHeight, outputHeight) || 0
                }% + 16px); 
                background: #1a1a1a; 
                color: white; 
                padding: 6px 10px; 
                border-radius: 4px; 
                font-size: 0.7rem; 
                white-space: nowrap;
                opacity: 0;
                transition: opacity 0.2s;
                pointer-events: none;
                z-index: 10;
                min-width: 100px;
                text-align: center;
              ">
                <div>Input: ${inputTokens}</div>
                <div>Output: ${outputTokens}</div>
                <div style="border-top: 1px solid #444; margin-top: 2px; padding-top: 2px;">Total: ${totalTokens}</div>
              </div>
              
              <!-- Bar container -->
              <div style="
                display: flex; 
                gap: 2px; 
                width: 100%; 
                align-items: flex-end;
                height: 100%;
                cursor: pointer;
              "
              onmouseenter="this.previousElementSibling.style.opacity='1';"
              onmouseleave="this.previousElementSibling.style.opacity='0';">
                
                <!-- Input tokens bar -->
                <div class="chart-bar chart-bar-input" style="
                  height: ${inputDisplayHeight}; 
                  width: 50%; 
                  background: linear-gradient(to top, #2563eb, #3b82f6); 
                  border-radius: 2px 2px 0 0; 
                  transition: all 0.3s;
                  position: relative;
                  min-height: ${inputMinHeight};
                  ${inputTokens === 0 ? "opacity: 0.3;" : ""}
                " 
                onmouseenter="this.style.background='linear-gradient(to top, #1d4ed8, #2563eb)';"
                onmouseleave="this.style.background='linear-gradient(to top, #2563eb, #3b82f6)';"
                ></div>
                
                <!-- Output tokens bar -->
                <div class="chart-bar chart-bar-output" style="
                  height: ${outputDisplayHeight}; 
                  width: 50%; 
                  background: linear-gradient(to top, #16a34a, #22c55e); 
                  border-radius: 2px 2px 0 0; 
                  transition: all 0.3s;
                  position: relative;
                  min-height: ${outputMinHeight};
                  ${outputTokens === 0 ? "opacity: 0.3;" : ""}
                " 
                onmouseenter="this.style.background='linear-gradient(to top, #15803d, #16a34a)';"
                onmouseleave="this.style.background='linear-gradient(to top, #16a34a, #22c55e)';"
                ></div>
              </div>
            </div>
          `;
          })
          .join("")}
      </div>
      
      <!-- Day labels -->
      <div style="display: flex; justify-content: space-around; padding: 0.5rem 1rem 0.5rem 35px; font-size: 0.75rem; color: #8a8a8a; font-weight: 500;">
        ${dayLabels.map((day) => `<span>${day}</span>`).join("")}
      </div>
      
      <!-- Chart summary with input/output breakdown -->
      <div style="text-align: center; padding: 0.5rem; font-size: 0.7rem; color: #6b6b6b; border-top: 1px solid #f0f0f0; margin-top: 0.5rem;">
        ${(() => {
          let totalInput = 0;
          let totalOutput = 0;
          let totalTokens = 0;

          weeklyData.forEach((dayData) => {
            if (typeof dayData === "object" && dayData !== null) {
              totalInput += dayData.input_tokens || 0;
              totalOutput += dayData.output_tokens || 0;
              totalTokens +=
                dayData.tokens ||
                (dayData.input_tokens || 0) + (dayData.output_tokens || 0);
            } else {
              const dayTotal = dayData || 0;
              totalTokens += dayTotal;
              totalInput += Math.round(dayTotal * 0.6);
              totalOutput += Math.round(dayTotal * 0.4);
            }
          });

          return `
            <div>
              Input: <strong style="color: #3b82f6;">${totalInput}</strong> • 
              Output: <strong style="color: #22c55e;">${totalOutput}</strong> • 
              Total: <strong>${totalTokens}</strong>
            </div>
            <div style="margin-top: 2px;">
              Daily avg: <strong>${Math.round(totalTokens / 7)}</strong> • 
              Plan limit: <strong>${chartMaxValue}</strong>
            </div>
          `;
        })()}
      </div>
    </div>
  `;

  $chart.html(chartHTML);
  console.log(
    "✅ Enhanced usage chart updated with input/output token breakdown and color coding"
  );
}

// Team Management
function loadTeamMembers() {
  console.log("👥 loadTeamMembers() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/team_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/team_tab.php`,
    method: "GET",
    dataType: "json",
    beforeSend: function (xhr) {
      console.log("🚀 Load team members request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 TEAM MEMBERS RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Team members loaded:", response.data.members.length);
        const parsedResponse = response;
        displayTeamMembers(parsedResponse.data.members);
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Team members load failed:", response);
        alert(response.message || "Failed to load team members");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 TEAM MEMBERS ERROR:", { xhr, status, error });
      alert("Failed to load team members");
    },
  });
}

function displayTeamMembers(members) {
  console.log("👥 displayTeamMembers() called with", members.length, "members");

  const $teamList = $("#team-list");
  $teamList.empty();

  members.forEach((member, index) => {
    console.log(`👤 Processing team member ${index + 1}:`, member.name);

    const initials = member.name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase();

    const $member = $(`
      <div class="team-member">
        <div class="member-left">
          <div class="member-avatar">${initials}</div>
          <div class="member-info">
            <div class="member-name">${member.name}</div>
            <div class="member-email">${member.email}</div>
          </div>
        </div>
        <div class="member-actions">
          <span class="member-role">${member.role}</span>
          ${
            member.role !== "admin"
              ? `<button class="icon-btn danger remove-member-btn" data-id="${member.id}">×</button>`
              : ""
          }
        </div>
      </div>
    `);

    $teamList.append($member);
  });

  console.log("✅ Team members displayed successfully");
}

function inviteMember() {
  console.log("📧 inviteMember() called");

  const email = prompt(
    "Enter team member email: This will send a pending request to the user desired. If the user has an existing account with that email, the user will have the choice to accept the invite the next time they open the site. If the user does not have an account yet, they will be offered the opportunity to accept the invitation once they create an account with that email. Once the invitation is accepted, the enterprise plan charge will be charged right to your account."
  );
  if (!email) {
    console.log("❌ User cancelled member invitation");
    return;
  }

  console.log("📧 Inviting member:", email);
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/team_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/team_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({ action: "invite", email }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Invite member request starting");
      console.log("📧 Email to invite:", email);
    },
    success: function (response) {
      console.log("🎯🎯🎯 INVITE MEMBER RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Member invitation processed successfully");
        const parsedResponse = response;

        // Check the actual message from the server to determine the appropriate response
        const serverMessage = parsedResponse.data?.message || "";

        if (
          serverMessage.toLowerCase().includes("already in the team") ||
          serverMessage.toLowerCase().includes("already invited") ||
          serverMessage.toLowerCase().includes("already a member")
        ) {
          // User is already in the team
          showToast(`${email} is already a member of the team`, "info");
          console.log("ℹ️ User already in team, showing info message");
        } else if (
          serverMessage.toLowerCase().includes("invitation sent") ||
          serverMessage.toLowerCase().includes("invited successfully") ||
          !serverMessage
        ) {
          // Invitation was sent successfully (or default case)
          showToast(`Invitation sent to ${email}`, "success");
          console.log("✅ Invitation sent successfully");
        } else {
          // Show the actual server message if it's something else
          showToast(serverMessage, "info");
          console.log("ℹ️ Showing server message:", serverMessage);
        }

        // Refresh the team list to show updated status
        loadTeamMembers();
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Member invitation failed:", response);

        // Handle specific error cases
        const errorMessage =
          response.message || response.error || "Failed to send invitation";

        if (
          errorMessage
            .toLowerCase()
            .includes("already a member of another team")
        ) {
          showToast(
            `${email} is already a member of another team and cannot be invited`,
            "error"
          );
        } else {
          alert(errorMessage);
        }
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 INVITE MEMBER ERROR from team_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to send invitation. Please try again.");
    },
  });
}

function removeMember(userId) {
  console.log("🗑️ removeMember() called for user ID:", userId);

  if (
    !confirm(
      "Remove this team member? Once you remove them, their enterprise plan will be gone and not refundable. You will have the choice to add them back whenever, but you will be charged again the next time."
    )
  ) {
    console.log("❌ User cancelled member removal");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/team_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/team_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({ action: "remove", user_id: userId }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Remove member request starting");
      console.log("👤 User ID to remove:", userId);
    },
    success: function (response) {
      console.log("🎯🎯🎯 REMOVE MEMBER RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Team member removed successfully");
        loadTeamMembers();
        showToast("Team member removed", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Remove member failed:", response);
        alert(response.message || "Failed to remove team member");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 REMOVE MEMBER ERROR from team_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to remove team member");
    },
  });
}

function loadBillingInfo() {
  console.log("💳 loadBillingInfo() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/billing_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/billing_tab.php`,
    method: "GET",
    dataType: "json",
    beforeSend: function (xhr) {
      console.log("🚀 Load billing info request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 BILLING INFO RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Billing info loaded successfully");
        const parsedResponse = response;
        const billing = parsedResponse.data;

        // Update existing billing info
        $("#current-plan").text(billing.current_plan?.name || "Unknown");
        $("#billing-status").text(billing.subscription?.status || "Active");
        $("#next-reset").text(billing.next_reset || "In 6.5 hours");

        console.log("💳 Billing UI updated");

        updateDangerZoneButtons();

        // Handle scheduled plan changes (downgrades)
        // Handle scheduled plan changes (downgrades)
        if (billing.scheduled_plan_change) {
          console.log(
            "📉 Scheduled plan change detected:",
            billing.scheduled_plan_change
          );

          const scheduledPlan = billing.scheduled_plan_change;
          const effectiveDate = scheduledPlan.effective_date
            ? new Date(scheduledPlan.effective_date).toLocaleDateString()
            : "Next billing cycle";

          $("#next-month-plan").html(`
    ${scheduledPlan.plan_name} 
    <small style="color: #666; font-size: 0.8em; display: block;">
      Effective: ${effectiveDate}
    </small>
  `);
          $("#next-month-plan-row").show();

          // ✨ NEW: Add cancel button after the next-month-plan-row
          if (!$("#cancel-scheduled-change-row").length) {
            $("#next-month-plan-row").after(`
      <div class="billing-row" id="cancel-scheduled-change-row">
        <div class="billing-label">
          <div>Scheduled Change</div>
          <div style="font-size: 0.8em; color: #666;">You can cancel this change anytime</div>
        </div>
        <button class="btn btn-text" id="cancel-scheduled-change-btn" style="color: #e00;">
          Cancel Change
        </button>
      </div>
    `);
          } else {
            $("#cancel-scheduled-change-row").show();
          }

          console.log("📅 Next month's plan updated:", scheduledPlan.plan_name);
        } else {
          console.log("ℹ️ No scheduled plan changes");
          $("#next-month-plan-row").hide();
          $("#cancel-scheduled-change-row").hide(); // ✨ NEW: Hide cancel button row
        }

        // Display payment history
        console.log("📜 Displaying payment history");
        displayPaymentHistory(billing.payment_history);

        // Update referral count
        $("#total-friends-referred").text(
          `${billing.referral?.total_friends_referred || 0}`
        );
        console.log(
          "🔗 Friends referred count updated:",
          billing.referral?.total_friends_referred || 0
        );

        // Update referral count
        $("#total-friends-referred").text(
          `${billing.referral?.total_friends_referred || 0}`
        );
        console.log(
          "🔗 Friends referred count updated:",
          billing.referral?.total_friends_referred || 0
        );

        // ADD THIS - Update referral code display
        const referralCode =
          billing.referral?.referral_code ||
          currentUser?.referral_code ||
          "Not available";
        $("#referral-code-display").text(referralCode);
        console.log("🔗 Referral code updated:", referralCode);

        // Update credit balance information
        updateCreditBalance(billing.credits || {});

        // NEW: Update checkout displays if visible after credit balance is loaded
        setTimeout(() => {
          if ($("#upgrade-modal").hasClass("active")) {
            updateCheckoutDetails();
          }
          if ($("#choose-plan-modal").hasClass("active")) {
            updateChoosePlanDisplay();
          }
        }, 100);
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Billing info load failed:", response);
        alert(response.message || "Failed to load billing information");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 BILLING INFO ERROR from billing_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to load billing information");
    },
  });
}

// Updated function to update credit balance display with new structure
function updateCreditBalance(creditsData) {
  console.log("💰 updateCreditBalance() called with data:", creditsData);

  // Extract credit information from the new response structure
  const currentBalance = creditsData.available_balance || 0;
  const totalCreditsEverEarned = creditsData.total_credits_ever_earned || 0;

  console.log("💰 Current credit balance:", currentBalance);
  console.log("💰 Total credits ever earned:", totalCreditsEverEarned);

  // Update the credit balance display
  $("#credit-balance").text(`$${currentBalance.toFixed(2)}`);
  $("#total-credits-earned").text(`$${totalCreditsEverEarned.toFixed(2)}`);

  console.log("✅ Credit balance UI updated with new structure");

  // Optional: Change color based on balance amount
  if (currentBalance > 0) {
    $("#credit-balance").css("color", "#22c55e"); // Green for positive balance
  } else {
    $("#credit-balance").css("color", "#6b6b6b"); // Gray for zero balance
  }
}

function displayPaymentHistory(payments) {
  console.log("📜 displayPaymentHistory() called");
  console.log("💳 Payments to display:", payments?.length || 0);

  const $history = $("#payment-history");
  $history.empty();

  if (!payments || payments.length === 0) {
    console.log("ℹ️ No payment history to display");
    $history.html(
      '<p style="color: #8a8a8a; font-size: 0.875rem">No payment history</p>'
    );
    return;
  }

  payments.forEach((payment, index) => {
    console.log(`💳 Processing payment ${index + 1}:`, payment);

    const finalAmount = payment.final_amount_charged || 0;
    const originalAmount = payment.original_amount || finalAmount;
    const promoDiscount = payment.promo_discount_applied || 0;
    const referralCredits = payment.referral_credits_applied || 0;

    // Create description with discounts if applicable
    let description = payment.description || "Subscription";
    let amountDisplay = `$${parseFloat(finalAmount).toFixed(2)}`;

    // Show original amount if there were discounts
    if (promoDiscount > 0 || referralCredits > 0) {
      amountDisplay = `$${parseFloat(finalAmount).toFixed(2)}`;
    }

    // Create the paid for user display
    let paidForDisplay = "";
    if (payment.for_user_name && payment.for_user_name.trim()) {
      paidForDisplay = `<div style="font-size: 0.75em; color: #22c55e; margin-top: 2px;">👤 Paid for: ${payment.for_user_name}</div>`;
    } else if (payment.for_user && payment.for_user !== currentUser?.id) {
      // Fallback to showing user ID if name is not available but it's for someone else
      paidForDisplay = `<div style="font-size: 0.75em; color: #22c55e; margin-top: 2px;">👤 Paid for: User ${payment.for_user}</div>`;
    }

    $history.append(`
      <div class="billing-row">
        <div class="billing-label">
          <div>${new Date(payment.date).toLocaleDateString()}</div>
          <div style="font-size: 0.8em; color: #666;">${description}</div>
          ${paidForDisplay}
          ${
            payment.status === "pending"
              ? '<div style="font-size: 0.75em; color: #f59e0b;">Pending</div>'
              : ""
          }
        </div>
        <span class="billing-value">${amountDisplay}</span>
      </div>
    `);
  });

  console.log(
    "✅ Payment history displayed with enhanced details including paid for user"
  );
}

/*function updateUsageStats() {
  console.log("📈 updateUsageStats() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/usage_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/usage_tab.php`,
    method: "GET",
  })
    .done(function (response) {
      console.log("🎯🎯🎯 USAGE STATS RESPONSE:", response);
      if (response.success) {
        console.log("✅ Usage stats loaded successfully");
        // Access the nested data correctly
        const usage = response.data.usage;
        const stats = response.data.stats;
        const features = response.data.features;

        // Update messages display with input/output breakdown
        const messageLimit = usage.token_limit || 15;
        const tokensUsed = usage.tokens_used || 0;
        const inputTokensUsed = usage.input_tokens_used || 0;
        const outputTokensUsed = usage.output_tokens_used || 0;

        // Enhanced display with input/output breakdown
        $("#messages-used").html(`
          <div>${tokensUsed} / ${messageLimit}</div>
          <div style="font-size: 0.7rem; color: #6b6b6b; margin-top: 0.25rem;">
            <span style="color: #3b82f6;">Input: ${inputTokensUsed}</span> • 
            <span style="color: #22c55e;">Output: ${outputTokensUsed}</span>
          </div>
        `);

        console.log(
          "📨 Messages usage updated:",
          tokensUsed,
          "/",
          messageLimit,
          "(Input:",
          inputTokensUsed,
          "Output:",
          outputTokensUsed,
          ")"
        );

        // Rest of the function remains the same...
        // Update memory display - check if plan is higher than free
        const memoryUsed = 0; // This doesn't seem to be provided in the response

        // Determine if user has unlimited memory using multiple checks
        let isUnlimitedMemory = false;

        // Primary check: use usage.is_unlimited from the response
        if (usage.is_unlimited === true) {
          isUnlimitedMemory = true;
          console.log(
            "🎯 Unlimited detected from usage.is_unlimited:",
            usage.is_unlimited
          );
        }

        // Secondary check: check user plan name
        const userPlan = response.data.user?.plan;
        if (userPlan && userPlan.toLowerCase() !== "free") {
          isUnlimitedMemory = true;
          console.log("🎯 Unlimited detected from user plan:", userPlan);
        }

        // Tertiary check: check token limit (unlimited plans typically have very high limits)
        if (usage.token_limit >= 999999) {
          isUnlimitedMemory = true;
          console.log(
            "🎯 Unlimited detected from high token limit:",
            usage.token_limit
          );
        }

        if (isUnlimitedMemory) {
          $("#memory-used").text("Unlimited");
          console.log("🧠 Memory usage updated: Unlimited");
        } else {
          // For free plans, show the actual memory limit
          const memoryFeature = features?.memory || "3K tokens";
          const memoryLimit = memoryFeature.replace(" tokens", "");
          $("#memory-used").text(`${memoryUsed} / ${memoryLimit}`);
          console.log("🧠 Memory usage updated:", memoryUsed, "/", memoryLimit);
        }

        // Update progress ring
        const percent = Math.round((tokensUsed / messageLimit) * 100);
        $("#usage-percent").text(`${percent}% used`);
        console.log("📊 Usage percentage:", percent);

        // Update progress circle
        const offset = 314 - (314 * percent) / 100;
        $("#usage-progress").css("stroke-dashoffset", offset);
        console.log("🔵 Progress circle offset:", offset);

        // Update other stats - use stats object and provide fallbacks
        const totalMemories = stats.total_memories || 0;
        const learningProgress = stats.learning_progress || 0;
        $("#total-memories").text(totalMemories.toLocaleString());
        $("#ai-learning").text(learningProgress + "%");
        console.log("📊 Additional stats updated");

        // Log the time until reset for debugging
        console.log("⏰ Time until reset:", usage.time_until_reset);
      } else {
        console.error("❌ Usage stats load failed:", response);
      }
    })
    .fail(function (xhr, status, error) {
      console.log("🚨🚨🚨 USAGE STATS ERROR from usage_tab.php:", {
        xhr,
        status,
        error,
      });
    });
}*/

// ================== PAYMENT FUNCTIONS ==================

function showUpgrade() {
  console.log("⬆️ showUpgrade() called");
  $("#upgrade-modal").addClass("active");
  console.log("💳 Upgrade modal shown");

  // Get current user plan (normalize to lowercase for comparison)
  const currentPlan = (currentUser?.plan || "free").toLowerCase().trim();
  console.log("📋 Current user plan:", currentPlan);

  // 🔧 ENHANCED RESET: More thoroughly reset all plan options
  $(".plan-option").each(function () {
    const $this = $(this);

    // Remove classes
    $this.removeClass("current-plan disabled selected");

    // Remove all click handlers
    $this.off("click");

    // Remove current-plan-banner more thoroughly
    $this.find(".current-plan-banner").remove();
    $this.children(".current-plan-banner").remove(); // In case it's a direct child

    // Alternative: Remove any element with the banner text
    $this.find('span:contains("✓ Current Plan")').parent().remove();

    console.log("🧹 Cleaned plan option:", $this.data("plan"));
  });

  // Additional cleanup - remove any stray banners that might exist
  $(".current-plan-banner").remove();

  // 🔧 Re-attach the standard click handler for plan selection
  $(".plan-option").on("click", function () {
    const planId = $(this).data("plan");
    console.log("📋 Plan option clicked:", planId);

    // Only proceed if not disabled
    if (!$(this).hasClass("disabled")) {
      selectPlan(planId);
    }
  });

  // Only add banner and disable if user is on a PAID plan (not free)
  // Free plan users should not see any "current plan" indicators
  if (
    currentPlan !== "free" &&
    currentPlan !== "" &&
    currentPlan !== "null" &&
    currentPlan !== "undefined"
  ) {
    const $currentPlanOption = $(`.plan-option[data-plan="${currentPlan}"]`);

    if ($currentPlanOption.length > 0) {
      console.log("🏷️ Adding current plan banner for paid plan:", currentPlan);

      // Add current plan banner
      $currentPlanOption.addClass("current-plan disabled");

      // Create the banner element
      const bannerHtml = `
        <div class="current-plan-banner" style="text-align: right; position: relative; top: 100px; height: 0px; display: flex; justify-content: end;">
          <span style="color: white; background-color: black; padding: 3px; border-radius: 5px; display: flex; width: 120px; align-self: flex-end;">✓ Current Plan</span>
        </div>
      `;

      $currentPlanOption.prepend(bannerHtml);

      // Prevent selection of current plan with specific handler
      $currentPlanOption.off("click").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        showToast("This is your current plan", "info");
        return false;
      });

      console.log("🏷️ Current plan banner added to:", currentPlan);
    } else {
      console.log("⚠️ Plan option element not found for:", currentPlan);
    }
  } else {
    console.log(
      "📋 User is on free plan - no current plan banner will be shown"
    );
  }

  // ✨ NEW: Ensure credit balance is loaded before updating display
  if (!$("#credit-balance").text() || $("#credit-balance").text() === "$0.00") {
    console.log("💳 Loading credit balance before updating display");
    refreshCreditBalance();
    // Add a small delay or use a callback
    setTimeout(() => {
      updateCheckoutDetails();
    }, 100);
  } else {
    updateCheckoutDetails();
  }
}
function selectPlan(planId) {
  console.log("📋 selectPlan() called for:", planId);

  selectedPlan = planId;
  $(".plan-option").removeClass("selected");
  $(`.plan-option[data-plan="${planId}"]`).addClass("selected");

  console.log("✅ Plan selected:", selectedPlan);

  // NEW: Check if there's an applied promo code that needs re-validation
  if (window.appliedPromoCode && window.appliedPromoCode.code) {
    console.log(
      "🎫 Re-validating promo code for new plan:",
      window.appliedPromoCode.code
    );

    // IMPORTANT: Clear the promo code immediately to prevent showing invalid discount
    const originalPromoCode = window.appliedPromoCode.code;
    clearPromoCodeState();

    // Then re-validate and potentially restore it
    revalidatePromoCodeForPlan(originalPromoCode);
  } else {
    // No promo code to validate, just update checkout details
    updateCheckoutDetails();
  }
}

function clearPromoCodeState() {
  console.log("🧹 clearPromoCodeState() called - clearing all promo code data");

  // Clear the stored promo code data
  window.appliedPromoCode = null;

  // Reset UI elements
  $("#promo-code").val("").prop("readonly", false);
  $("#apply-promo-btn")
    .text("Apply") // 🔧 FIX: Always reset to "Apply"
    .removeClass("success-state")
    .prop("disabled", false);
  $("#remove-promo-btn").remove();

  // Force update checkout details to remove discount
  updateCheckoutDetails();

  console.log("✅ Promo code state completely cleared");
}

// Fixed clearChoosePlanPromoCodeState function
function clearChoosePlanPromoCodeState() {
  console.log(
    "🧹 clearChoosePlanPromoCodeState() called - clearing all promo code data"
  );

  // Clear the stored promo code data
  window.appliedPromoCode = null;

  // Reset UI elements
  $("#choose-plan-promo-code").val("").prop("readonly", false);
  $("#apply-choose-plan-promo-btn")
    .text("Apply") // 🔧 FIX: Always reset to "Apply"
    .removeClass("success-state")
    .prop("disabled", false);
  $("#remove-choose-plan-promo-btn").remove();

  // Force update display to remove discount
  updateChoosePlanDisplay();

  console.log("✅ Choose plan promo code state completely cleared");
}

function revalidatePromoCodeForPlan(promoCode) {
  console.log(
    "🔄 revalidatePromoCodeForPlan() called for:",
    promoCode,
    "on plan:",
    selectedPlan
  );

  // Show validation state
  $("#apply-promo-btn").text("Validating...").prop("disabled", true);

  validatePromoCode(promoCode)
    .done(function (response) {
      console.log("🎯 PROMO RE-VALIDATION RESPONSE:", response);

      if (response.success) {
        console.log("✅ Promo code is still valid for new plan - restoring");

        // RESTORE the promo code since it's valid
        window.appliedPromoCode = {
          code: promoCode,
          discount_type: response.data.discount_type,
          discount_value: response.data.discount_value,
          duration_months: response.data.duration_months,
          description: response.data.description,
        };

        // Restore UI state
        $("#promo-code").val(promoCode).prop("readonly", true);

        let buttonText = "Applied ✓";
        if (response.data.duration_months) {
          buttonText +=
            response.data.duration_months === 1
              ? " (1 month)"
              : ` (${response.data.duration_months} months)`;
        }
        $("#apply-promo-btn")
          .text(buttonText)
          .addClass("success-state")
          .prop("disabled", false);

        // Add remove button back
        if (!$("#remove-promo-btn").length) {
          $("#apply-promo-btn").after(
            '<button type="button" class="btn btn-text" id="remove-promo-btn" style="margin-left: 0.5rem;">Remove</button>'
          );
        }

        showToast("Promo code is valid for selected plan", "success");
        updateCheckoutDetails(); // This will now show the discount
      } else {
        console.warn(
          "❌ Promo code is not valid for new plan - keeping it cleared"
        );

        // DON'T restore the promo code - it stays cleared
        // Show error message with plan info
        let errorMessage =
          response.message || `Promo code not valid for ${selectedPlan} plan`;
        showToast(errorMessage, "error");

        // 🔧 FIX: Reset button text and state when validation fails
        $("#apply-promo-btn")
          .text("Apply")
          .removeClass("success-state")
          .prop("disabled", false);

        // Checkout details already updated (no discount will show)
      }
    })
    .fail(function (xhr) {
      console.error("🚨 PROMO RE-VALIDATION ERROR:", xhr);

      // Handle both network errors and validation errors that return error status codes
      let errorMsg = "Error validating promo code for new plan";

      if (xhr.responseJSON) {
        errorMsg =
          xhr.responseJSON.message || xhr.responseJSON.error || errorMsg;
      }

      showToast(errorMsg, "error");

      // 🔧 FIX: Reset button text and state on any error
      $("#apply-promo-btn")
        .text("Apply")
        .removeClass("success-state")
        .prop("disabled", false);
    })
    .always(function () {
      // 🔧 FIX: Ensure button is always enabled after validation completes
      // This is a safety net in case the above handlers don't execute properly
      setTimeout(function () {
        if (
          $("#apply-promo-btn").prop("disabled") &&
          $("#apply-promo-btn").text() === "Validating..."
        ) {
          console.log("🔧 Safety net: Resetting stuck validation button");
          $("#apply-promo-btn")
            .text("Apply")
            .removeClass("success-state")
            .prop("disabled", false);
        }
      }, 100);
    });
}

function revalidatePromoCodeForChoosePlan(promoCode) {
  console.log(
    "🔄 revalidatePromoCodeForChoosePlan() called for:",
    promoCode,
    "on plan:",
    selectedPlan
  );

  $("#apply-choose-plan-promo-btn")
    .text("Validating...")
    .prop("disabled", true);

  validatePromoCode(promoCode)
    .done(function (response) {
      console.log("🎯 CHOOSE PLAN PROMO RE-VALIDATION RESPONSE:", response);

      if (response.success) {
        console.log("✅ Promo code is still valid for new plan - restoring");

        // RESTORE the promo code since it's valid
        window.appliedPromoCode = {
          code: promoCode,
          discount_type: response.data.discount_type,
          discount_value: response.data.discount_value,
          duration_months: response.data.duration_months,
          description: response.data.description,
        };

        // Restore UI state
        $("#choose-plan-promo-code").val(promoCode).prop("readonly", true);

        let buttonText = "Applied ✓";
        if (response.data.duration_months) {
          buttonText +=
            response.data.duration_months === 1
              ? " (1 month)"
              : ` (${response.data.duration_months} months)`;
        }
        $("#apply-choose-plan-promo-btn")
          .text(buttonText)
          .addClass("success-state")
          .prop("disabled", false);

        // Add remove button back
        if (!$("#remove-choose-plan-promo-btn").length) {
          $("#apply-choose-plan-promo-btn").after(
            '<button type="button" class="btn btn-text" id="remove-choose-plan-promo-btn" style="margin-left: 0.5rem;">Remove</button>'
          );
        }

        showToast("Promo code is valid for selected plan", "success");
        updateChoosePlanDisplay(); // This will now show the discount
      } else {
        console.warn(
          "❌ Promo code is not valid for new plan - keeping it cleared"
        );

        // DON'T restore the promo code - it stays cleared
        let errorMessage =
          response.message || `Promo code not valid for ${selectedPlan} plan`;
        showToast(errorMessage, "error");

        // 🔧 FIX: Reset button text and state when validation fails
        $("#apply-choose-plan-promo-btn")
          .text("Apply")
          .removeClass("success-state")
          .prop("disabled", false);

        // Display already updated (no discount will show)
      }
    })
    .fail(function (xhr) {
      console.error("🚨 CHOOSE PLAN PROMO RE-VALIDATION ERROR:", xhr);

      // Handle both network errors and validation errors that return error status codes
      let errorMsg = "Error validating promo code for new plan";

      if (xhr.responseJSON) {
        errorMsg =
          xhr.responseJSON.message || xhr.responseJSON.error || errorMsg;
      }

      showToast(errorMsg, "error");

      // 🔧 FIX: Reset button text and state on any error
      $("#apply-choose-plan-promo-btn")
        .text("Apply")
        .removeClass("success-state")
        .prop("disabled", false);
    })
    .always(function () {
      // 🔧 FIX: Ensure button is always enabled after validation completes
      // This is a safety net in case the above handlers don't execute properly
      setTimeout(function () {
        if (
          $("#apply-choose-plan-promo-btn").prop("disabled") &&
          $("#apply-choose-plan-promo-btn").text() === "Validating..."
        ) {
          console.log(
            "🔧 Safety net: Resetting stuck choose plan validation button"
          );
          $("#apply-choose-plan-promo-btn")
            .text("Apply")
            .removeClass("success-state")
            .prop("disabled", false);
        }
      }, 100);
    });
}

function getPlanId(planName) {
  const planMapping = {
    free: 1,
    pro: 2,
    elite: 3,
    enterprise: 4,
  };

  console.log(
    "🔄 Converting plan name to ID:",
    planName,
    "->",
    planMapping[planName]
  );
  return planMapping[planName] || 1; // Default to free if unknown
}

// Enhanced validatePromoCode function to use current selectedPlan
function validatePromoCode(promoCode) {
  console.log("🎫 validatePromoCode() called for:", promoCode);
  console.log("📋 Current selected plan for validation:", selectedPlan);
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/payments/validate_promo_code.php`
  );

  return $.ajax({
    url: `${API_BASE_URL}/payments/validate_promo_code.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      promo_code: promoCode,
      plan_id: getPlanId(selectedPlan) || null,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Validate promo code request starting");
      console.log("🎫 Promo code:", promoCode);
      console.log("📋 Plan ID:", getPlanId(selectedPlan));
    },
    success: function (response) {
      console.log(
        "🎯🎯🎯 PROMO CODE VALIDATION RESPONSE from validate_promo_code.php:",
        response
      );
    },
    error: function (xhr, status, error) {
      console.log(
        "🚨🚨🚨 PROMO CODE VALIDATION ERROR from validate_promo_code.php:",
        { xhr, status, error }
      );
    },
  });
}

function applyPromoCode() {
  console.log("🎫 applyPromoCode() called");

  const promoCode = $("#promo-code").val();
  console.log("🎫 Promo code entered:", promoCode);
  console.log("📋 Current selected plan:", selectedPlan);

  if (!promoCode) {
    console.warn("⚠️ No promo code entered");
    showToast("Please enter a promo code", "error");
    return;
  }

  if (!selectedPlan) {
    console.warn("⚠️ No plan selected");
    showToast("Please select a plan first", "error");
    return;
  }

  // Disable the apply button during validation
  $("#apply-promo-btn").prop("disabled", true).text("Validating...");
  console.log("⏳ Promo code validation started");

  // Call validation function
  validatePromoCode(promoCode)
    .done(function (response) {
      console.log("🎯🎯🎯 PROMO CODE VALIDATION RESPONSE:", response);

      if (response.success) {
        console.log("✅ Promo code is valid for selected plan");

        // Build description with duration info
        let description = response.data.description;
        let successMessage = `Promo code applied! ${description}`;

        showToast(successMessage, "success");

        // Store the promo code data for checkout
        window.appliedPromoCode = {
          code: promoCode,
          discount_type: response.data.discount_type,
          discount_value: response.data.discount_value,
          duration_months: response.data.duration_months,
          description: response.data.description,
        };

        console.log("💾 Promo code data stored:", window.appliedPromoCode);

        // Update checkout details with new discount
        updateCheckoutDetails();

        // Change button to show success state with duration info
        let buttonText = "Applied ✓";
        if (response.data.duration_months) {
          buttonText +=
            response.data.duration_months === 1
              ? " (1 month)"
              : ` (${response.data.duration_months} months)`;
        }

        $("#apply-promo-btn").text(buttonText).addClass("success-state");
        $("#promo-code").prop("readonly", true);

        // Add remove promo option
        if (!$("#remove-promo-btn").length) {
          $("#apply-promo-btn").after(
            '<button type="button" class="btn btn-text" id="remove-promo-btn" style="margin-left: 0.5rem;">Remove</button>'
          );
        }
      } else {
        console.error("❌ Promo code is invalid for selected plan:", response);

        // Enhanced error message for plan-specific issues
        let errorMessage = response.message || "Invalid promo code";
        if (errorMessage.includes("only valid for")) {
          errorMessage += ` You selected ${selectedPlan} plan.`;
        }

        showToast(errorMessage, "error");

        // Reset any applied promo code
        window.appliedPromoCode = null;
        updateCheckoutDetails();

        // 🔧 FIX: Reset button text on validation failure
        $("#apply-promo-btn").prop("disabled", false).text("Apply");
      }
    })
    .fail(function (xhr) {
      console.log("🚨🚨🚨 PROMO CODE VALIDATION ERROR:", xhr);

      try {
        const errorResponse = JSON.parse(xhr.responseText);
        handlePromoCodeError(errorResponse);
      } catch (parseError) {
        showToast("Error validating promo code", "error");
        window.appliedPromoCode = null;
        updateCheckoutDetails();
      }

      // 🔧 FIX: Reset button text on validation error
      $("#apply-promo-btn").prop("disabled", false).text("Apply");
    })
    .always(function () {
      console.log("🏁 Promo code validation complete");
      // 🔧 FIX: Only re-enable the button here, don't change text
      // The text is already set in the success/fail handlers above
      $("#apply-promo-btn").prop("disabled", false);
    });
}

// Fixed applyChoosePlanPromoCode function
function applyChoosePlanPromoCode() {
  console.log("🎫 applyChoosePlanPromoCode() called");

  const promoCode = $("#choose-plan-promo-code").val();
  console.log("🎫 Promo code entered:", promoCode);
  console.log("📋 Current selected plan:", selectedPlan);

  if (!promoCode) {
    showToast("Please enter a promo code", "error");
    return;
  }

  if (!selectedPlan) {
    showToast("Please select a plan first", "error");
    return;
  }

  // Update button state
  $("#apply-choose-plan-promo-btn")
    .prop("disabled", true)
    .text("Validating...");

  // Use existing validatePromoCode function
  validatePromoCode(promoCode)
    .done(function (response) {
      if (response.success) {
        console.log("✅ Promo code is valid for selected plan");

        // Store the promo code data
        window.appliedPromoCode = {
          code: promoCode,
          discount_type: response.data.discount_type,
          discount_value: response.data.discount_value,
          duration_months: response.data.duration_months,
          description: response.data.description,
        };

        // Update UI to success state
        let buttonText = "Applied ✓";
        if (response.data.duration_months) {
          buttonText +=
            response.data.duration_months === 1
              ? " (1 month)"
              : ` (${response.data.duration_months} months)`;
        }

        $("#apply-choose-plan-promo-btn")
          .text(buttonText)
          .addClass("success-state");
        $("#choose-plan-promo-code").prop("readonly", true);

        // Add remove button
        if (!$("#remove-choose-plan-promo-btn").length) {
          $("#apply-choose-plan-promo-btn").after(
            '<button type="button" class="btn btn-text" id="remove-choose-plan-promo-btn" style="margin-left: 0.5rem;">Remove</button>'
          );
        }

        showToast(
          `Promo code applied! ${response.data.description}`,
          "success"
        );
        updateChoosePlanDisplay();
      } else {
        console.error("❌ Promo code invalid for selected plan:", response);

        let errorMessage = response.message || "Invalid promo code";
        if (errorMessage.includes("only valid for")) {
          errorMessage += ` You selected ${selectedPlan} plan.`;
        }

        showToast(errorMessage, "error");
        window.appliedPromoCode = null;
        updateChoosePlanDisplay();

        // 🔧 FIX: Reset button text on validation failure
        $("#apply-choose-plan-promo-btn").prop("disabled", false).text("Apply");
      }
    })
    .fail(function (xhr) {
      try {
        const errorResponse = JSON.parse(xhr.responseText);
        handlePromoCodeError(errorResponse);
      } catch (parseError) {
        showToast("Error validating promo code", "error");
        window.appliedPromoCode = null;
        updateChoosePlanDisplay();
      }

      // 🔧 FIX: Reset button text on validation error
      $("#apply-choose-plan-promo-btn").prop("disabled", false).text("Apply");
    })
    .always(function () {
      // 🔧 FIX: Only re-enable the button here, don't change text
      // The text is already set in the success/fail handlers above
      $("#apply-choose-plan-promo-btn").prop("disabled", false);
    });
}

// Optional: Helper function to handle promo removal
$(document).on("click", "#remove-promo-btn", function () {
  console.log("🗑️ Removing promo code");

  // Reset the promo code state
  window.appliedPromoCode = null;

  // Reset UI elements
  $("#promo-code").val("").prop("readonly", false);
  $("#apply-promo-btn").text("Apply").removeClass("success-state");
  $("#remove-promo-btn").remove();

  // Update checkout details
  updateCheckoutDetails();

  showToast("Promo code removed", "info");
});

// Function to remove applied promo code
function removePromoCode() {
  console.log("🗑️ removePromoCode() called");

  window.appliedPromoCode = null;
  $("#promo-code").val("").prop("readonly", false);
  $("#apply-promo-btn").removeClass("success-state").text("Apply");
  $("#remove-promo-btn").remove();

  console.log("✅ Promo code removed");
  updateCheckoutDetails();
  showToast("Promo code removed", "success");
}

function fetchAllAvailableCredits(targetPlan) {
  console.log("💳 fetchAllAvailableCredits() called for plan:", targetPlan);

  return $.ajax({
    url: `${API_BASE_URL}/payments/get_all_credits.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      target_plan: targetPlan,
      current_plan: currentUser?.plan || "free",
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Fetch all available credits request starting");
      console.log("📋 Target plan:", targetPlan);
      console.log("📋 Current plan:", currentUser?.plan || "free");
    },
    success: function (response) {
      console.log("🎯🎯🎯 ALL CREDITS INFO RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ All available credits fetched successfully");
        const parsedResponse = response;
        return parsedResponse.data;
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Failed to fetch all available credits:", response);
        throw new Error(response.message || "Failed to fetch credit info");
      } else {
        console.warn("Unexpected response format", response);
        throw new Error("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 ALL CREDITS ERROR:", {
        xhr,
        status,
        error,
      });
      throw new Error("Failed to fetch available credits");
    },
  });
}

function proceedToCheckout() {
  console.log("🛒 proceedToCheckout() called");
  console.log("📋 Selected plan:", selectedPlan);

  if (!selectedPlan) {
    console.warn("⚠️ No plan selected for checkout");
    showToast("Please select a plan", "error");
    return;
  }

  // Check if this is a downgrade
  const currentPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const prices = { free: 0, pro: 25, elite: 120, enterprise: 150 };
  const currentPlanPrice = prices[currentPlan] || 0;
  const selectedPlanPrice = prices[selectedPlan] || 0;
  const isDowngrade = selectedPlanPrice < currentPlanPrice;

  // NEW: Block enterprise users from downgrading directly
  if (currentPlan === "enterprise" && isDowngrade) {
    console.log(
      "🚫 Enterprise user attempting downgrade from upgrade modal - blocking"
    );

    const userTeamRole = currentUser?.team_role || "member";
    let blockMessage;

    if (userTeamRole === "admin") {
      blockMessage =
        `❌ Team Leader - Leave Team Required\n\n` +
        `As the team leader, you must manage your team before changing plans.\n\n` +
        `Please go to settings and either:\n` +
        `• Delete your team, OR\n` +
        `• Transfer leadership to another member and leave\n\n` +
        `Then return to select your new plan.`;
    } else {
      blockMessage =
        `❌ Team Member - Leave Team Required\n\n` +
        `You must leave your team before switching to an individual plan.\n\n` +
        `Please go to settings and click "Leave Team".\n` +
        `Then return to select your new plan.`;
    }

    alert(blockMessage);

    // Close upgrade modal and redirect to team section
    $("#upgrade-modal").removeClass("active");
    showSection("team");
    return;
  }

  if (isDowngrade) {
    console.log("📉 DOWNGRADE DETECTED - Initiating downgrade flow");
    initiateDowngrade(selectedPlan);
  } else {
    console.log("📈 UPGRADE DETECTED - Proceeding to Stripe checkout");
    // Get the applied promo code
    const promoCode = window.appliedPromoCode
      ? window.appliedPromoCode.code
      : "";
    console.log("🎫 Applied promo code for checkout:", promoCode || "NONE");

    // Skip checkout summary and go directly to Stripe
    initializeCheckoutDirect(selectedPlan, promoCode);
  }
}

// Add this new function for simple downgrade confirmation (add around line 1750)
function showSimpleDowngradeConfirmation(data) {
  console.log("📅 showSimpleDowngradeConfirmation() called with:", data);

  const currentPlan = data.current_plan || "current plan";
  const newPlan = data.new_plan || "new plan";
  const effectiveDate = data.effective_date
    ? new Date(data.effective_date).toLocaleDateString()
    : "next billing cycle";
  const newPrice = data.new_price || "new rate";

  const message = `✅ Downgrade Scheduled! Your plan will change from ${currentPlan} to ${newPlan} on ${effectiveDate}. Next billing: $${newPrice}/month.`;

  showToast(message, "success");

  // Refresh billing info after a short delay
  setTimeout(() => {
    loadBillingInfo();
  }, 2000);
}

// Modified initiateDowngrade function (replace the existing one around line 1776)
function initiateDowngrade(targetPlan) {
  console.log("📉 initiateDowngrade() called for plan:", targetPlan);
  console.log("💳 Processing downgrade request");

  // Get the applied promo code for downgrade
  const promoCode = window.appliedPromoCode ? window.appliedPromoCode.code : "";
  console.log("🎫 Applied promo code for downgrade:", promoCode || "NONE");

  // SECURITY: Only send boolean flag for credit application (should be false for downgrades)
  const availableCredits =
    parseFloat($("#credit-balance").text().replace("$", "")) || 0;
  const applyCredits = false; // Never apply credits for downgrades

  console.log("💳 Available credits:", availableCredits);
  console.log(
    "🔐 Apply credits flag (always false for downgrades):",
    applyCredits
  );

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/payments/checkout.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/payments/checkout.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      plan_id: getPlanId(targetPlan),
      promo_code: promoCode,
      referral_code: "", // No referral codes for downgrades
      apply_credits: applyCredits, // Always false for downgrades
      is_downgrade: true, // Flag to indicate this is a downgrade
      skip_summary: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Downgrade checkout request starting");
      console.log("📋 Target plan:", targetPlan);
      console.log("🎫 Promo code:", promoCode || "NONE");
      console.log("💳 Apply credits:", applyCredits);
    },
    success: function (response) {
      console.log("🎯🎯🎯 DOWNGRADE CHECKOUT RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Downgrade processed successfully");
        const parsedResponse = response;

        // Close modals
        $("#upgrade-modal").removeClass("active");
        $("#choose-plan-modal").removeClass("active");

        // Check if this is a downgrade response (no checkout URL)
        if (parsedResponse.data.type === "downgrade_scheduled") {
          console.log("📅 Downgrade scheduled - showing confirmation");

          // Simple toast notification
          showSimpleDowngradeConfirmation(parsedResponse.data);
        } else if (parsedResponse.data.checkout_url) {
          // Fallback: redirect to Stripe if checkout URL is provided
          showToast("Redirecting to confirm downgrade...", "info");
          window.location.href = parsedResponse.data.checkout_url;
        } else {
          console.error("❌ No checkout URL provided for downgrade");
          showToast("Downgrade initialization failed", "error");
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Downgrade checkout initialization failed:", response);
        alert(response.message || "Downgrade failed");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 DOWNGRADE CHECKOUT ERROR from checkout.php:", {
        xhr,
        status,
        error,
      });
      alert("Error initializing downgrade");
    },
  });
}

function initializeCheckoutDirect(planId, promoCode = "", referralCode = "") {
  console.log("🛒 initializeCheckoutDirect() called - skipping summary");
  console.log("📋 Plan ID:", planId);
  console.log("🎫 Promo code:", promoCode || "NONE");
  console.log("🔗 Referral code:", referralCode || "NONE");

  // SECURITY: Only send boolean flag for credit application
  const availableCredits =
    parseFloat($("#credit-balance").text().replace("$", "")) || 0;
  const applyCredits = availableCredits > 0;

  console.log("💳 Available credits:", availableCredits);
  console.log("🔐 Apply credits flag:", applyCredits);

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/payments/checkout.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/payments/checkout.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      plan_id: getPlanId(planId),
      promo_code: promoCode,
      referral_code: referralCode,
      apply_credits: applyCredits,
      skip_summary: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Initialize checkout direct request starting");
      console.log("📋 Plan ID:", getPlanId(planId));
      console.log("🎫 Promo code:", promoCode || "NONE");
      console.log("🔗 Referral code:", referralCode || "NONE");
      console.log("💳 Apply credits:", applyCredits);
    },
    success: function (response) {
      console.log("🎯🎯🎯 DIRECT CHECKOUT RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Direct checkout initialized, redirecting to Stripe");
        const parsedResponse = response;

        // Redirect directly to Stripe without showing summary
        if (parsedResponse.data.checkout_url) {
          window.location.href = parsedResponse.data.checkout_url;
        } else {
          console.error("❌ No checkout URL provided");
          alert("Checkout initialization failed");
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Direct checkout initialization failed:", response);
        alert(response.message || "Checkout failed");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 DIRECT CHECKOUT ERROR from checkout.php:", {
        xhr,
        status,
        error,
      });
      alert("Error initializing checkout");
    },
  });
}

function reorderBreakdownItems(breakdown, prorationDetails) {
  console.log("🔄 Reordering breakdown items");

  const orderedItems = [];
  const itemMap = {};

  // Create a map for easy lookup
  breakdown.forEach((item) => {
    const desc = item.description.toLowerCase();
    if (desc.includes("plan") || desc.includes("monthly")) {
      itemMap.plan = item;
    } else if (desc.includes("promo")) {
      itemMap.promo = item;
    } else if (desc.includes("unused") || desc.includes("credit for")) {
      itemMap.unused = item;
    } else if (desc.includes("referral")) {
      itemMap.referral = item;
    } else if (desc.includes("total")) {
      itemMap.total = item;
    } else {
      itemMap.other = itemMap.other || [];
      itemMap.other.push(item);
    }
  });

  // Add items in the required order
  if (itemMap.plan) orderedItems.push(itemMap.plan);
  if (itemMap.promo) {
    // Enhance promo description with duration if available
    if (window.appliedPromoCode && window.appliedPromoCode.duration_months) {
      const months = window.appliedPromoCode.duration_months;
      const monthText = months === 1 ? "1 month" : `${months} months`;
      itemMap.promo.description = itemMap.promo.description.replace(
        /Promo: (.+)/,
        `Promo: $1 for ${monthText}`
      );
    }
    orderedItems.push(itemMap.promo);
  }
  if (itemMap.unused) {
    // Update description to show proration details
    if (prorationDetails) {
      itemMap.unused.description = `Credit for unused time (prorated: ${prorationDetails.remaining_days}/${prorationDetails.total_days_in_month} days)`;
    }
    orderedItems.push(itemMap.unused);
  }
  if (itemMap.referral) orderedItems.push(itemMap.referral);
  if (itemMap.other) orderedItems.push(...itemMap.other);
  if (itemMap.total) orderedItems.push(itemMap.total);

  console.log(
    "✅ Breakdown items reordered:",
    orderedItems.map((item) => item.description)
  );
  return orderedItems;
}

function refreshCreditBalance() {
  console.log("🔄 refreshCreditBalance() called");

  $.ajax({
    url: `${API_BASE_URL}/dashboard/billing_tab.php`,
    method: "GET",
    dataType: "json",
    data: { action: "get_credit_balance" },
    beforeSend: function (xhr) {
      console.log("🚀 Refresh credit balance request starting");
    },
    success: function (response) {
      if (response.status === "success" || response.success === true) {
        console.log("✅ Credit balance refreshed");
        const parsedResponse = response;
        if (parsedResponse.data.credits) {
          updateCreditBalance(parsedResponse.data.credits);

          // Also update checkout displays if they're visible
          if ($("#upgrade-modal").hasClass("active")) {
            updateCheckoutDetails();
          }
          if ($("#choose-plan-modal").hasClass("active")) {
            updateChoosePlanDisplay();
          }
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Failed to refresh credit balance:", response);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 CREDIT BALANCE ERROR from billing_tab.php:", {
        xhr,
        status,
        error,
      });
    },
  });
}

// Cancel Plan Function - Add this to your Micro_Learner-app.js file

function cancelPlan() {
  console.log("🗑️ cancelPlan() called");
  console.log("👤 Current user plan:", currentUser?.plan);
  console.log("👥 Current user team role:", currentUser?.team_role);

  const userPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const userTeamRole = currentUser?.team_role || null;

  // ✨ NEW: Prevent free plan users from canceling
  if (userPlan === "free" || userPlan === "" || userPlan === "null") {
    console.log("🆓 Free plan user attempted to cancel - blocking action");
    alert(
      "❌ Cannot Cancel Free Plan\n\nYou are currently on the Free plan, which doesn't require cancellation.\n\nIf you'd like to upgrade to a paid plan, please use the 'Change Plan' button in your billing settings."
    );
    showToast("You cannot cancel a free plan", "info");
    return;
  }

  const isEnterpriseAdmin =
    userPlan === "enterprise" && userTeamRole === "admin";
  const isEnterpriseMember =
    userPlan === "enterprise" && userTeamRole === "member";
  const isProOrElite = userPlan === "pro" || userPlan === "elite";

  // Different confirmation messages based on plan type
  let firstConfirmationMessage;
  let finalConfirmationMessage;

  if (isEnterpriseAdmin) {
    // Admin cancelling - affects entire team (IMMEDIATE)
    firstConfirmationMessage =
      "⚠️ TEAM LEADER CANCELLATION WARNING\n\n" +
      "As the team leader, cancelling your subscription will immediately:\n" +
      "• Remove ALL team members from the team\n" +
      "• Demote EVERYONE (including yourself) to the Free plan\n" +
      "• Disable Enterprise features for the entire team\n" +
      "• Stop all team subscriptions immediately\n\n" +
      "Are you sure you want to cancel and disband the entire team?";

    finalConfirmationMessage =
      "🚨 FINAL CONFIRMATION: TEAM DISBANDMENT\n\n" +
      "This will immediately disband your entire team and cancel all Enterprise subscriptions.\n\n" +
      "📋 What will happen RIGHT NOW:\n" +
      "• ALL team members will be removed from the team immediately\n" +
      "• EVERYONE will be demoted to the Free plan (including you)\n" +
      "• All Enterprise features will be disabled for the entire team\n" +
      "• Team configurations and shared settings will be lost\n" +
      "• All team members will be notified of the disbandment\n" +
      "• Memories will be preserved but limited to 3K words on Free plan\n" +
      "• This action cannot be undone\n\n" +
      "⚠️ WARNING: This affects your entire team, not just your account!\n\n" +
      "Continue with team disbandment and subscription cancellation?";
  } else if (isEnterpriseMember) {
    // Team member cancelling - only affects themselves (IMMEDIATE)
    firstConfirmationMessage =
      "⚠️ TEAM MEMBER CANCELLATION WARNING\n\n" +
      "Cancelling your subscription will immediately:\n" +
      "• Remove YOU from the team\n" +
      "• Demote YOU to the Free plan\n" +
      "• Disable Enterprise features for your account\n" +
      "• The rest of the team will continue normally\n\n" +
      "Are you sure you want to leave the team and cancel your subscription?";

    finalConfirmationMessage =
      "🚨 FINAL CONFIRMATION: LEAVE TEAM\n\n" +
      "This will immediately remove you from the team and cancel your Enterprise subscription.\n\n" +
      "📋 What will happen RIGHT NOW:\n" +
      "• YOU will be removed from the team immediately\n" +
      "• YOUR account will be demoted to the Free plan\n" +
      "• Enterprise features will be disabled for your account\n" +
      "• Your memories will be preserved but limited to 3K words on Free plan\n" +
      "• The team leader will be notified of your departure\n" +
      "• The rest of the team will continue normally\n" +
      "• You can be re-invited to the team later if desired\n\n" +
      "Continue with leaving the team and subscription cancellation?";
  } else if (isProOrElite) {
    // Pro/Elite cancelling - SCHEDULED for end of billing period
    const planName = userPlan.charAt(0).toUpperCase() + userPlan.slice(1);

    firstConfirmationMessage =
      `⚠️ ${planName.toUpperCase()} PLAN CANCELLATION\n\n` +
      "Your subscription will be scheduled for cancellation at the end of your billing period:\n\n" +
      "📅 What will happen:\n" +
      `• Your ${planName} plan will remain active until your billing period ends\n` +
      "• You'll keep full access to all features until then\n" +
      "• At the end of your billing period, you'll automatically switch to the Free plan\n" +
      "• Your memories will be preserved but limited to 3K words on Free plan\n" +
      "• You can cancel this scheduled cancellation anytime before it takes effect\n\n" +
      "Are you sure you want to schedule your subscription cancellation?";

    finalConfirmationMessage =
      `🚨 FINAL CONFIRMATION: SCHEDULE ${planName.toUpperCase()} CANCELLATION\n\n` +
      "This will schedule your subscription to be cancelled at the end of your billing period.\n\n" +
      "📋 What will happen:\n" +
      `• Your ${planName} plan will remain fully active until your billing period ends\n` +
      "• You'll continue to have access to all features until then\n" +
      "• At the end of your billing period, you'll automatically switch to Free plan\n" +
      "• Your memories will be preserved but limited to 3K words on Free plan\n" +
      "• You can cancel this scheduled cancellation anytime from your billing settings\n" +
      "• You can also upgrade to a different plan anytime\n\n" +
      `Continue with scheduling ${planName} cancellation for end of billing period?`;
  } else {
    // Regular subscription cancellation (fallback)
    firstConfirmationMessage =
      "Are you sure you want to cancel your subscription? You will continue to have access to your current plan until it expires.";

    finalConfirmationMessage =
      "FINAL CONFIRMATION: Your subscription will be cancelled and you'll continue to have full access until the end of your current billing period. After that, your account will automatically switch to the Free plan.\n\n" +
      "📅 You'll keep full access until your billing period ends\n" +
      "💾 Your memories will be preserved but limited to 3K words on the Free plan\n" +
      "🔄 You can reactivate your subscription anytime\n\n" +
      "Continue with cancellation?";
  }

  // First confirmation dialog with plan-specific message
  if (!confirm(firstConfirmationMessage)) {
    console.log("❌ User cancelled plan cancellation");
    return;
  }

  // Get password confirmation from user for security - UPDATED for Google users
  const password = prompt(
    "Security verification required. Please enter your password, or if you use Google login, enter 'CONFIRM' to proceed:"
  );

  if (!password) {
    console.log("❌ User cancelled - no password provided");
    return;
  }

  // Final confirmation with plan-specific detailed explanation
  if (!confirm(finalConfirmationMessage)) {
    console.log("❌ User cancelled final confirmation");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/payments/cancel_subscription.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/payments/cancel_subscription.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      password: password,
      confirm_cancellation: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Cancel plan request starting");
      console.log("👤 User plan:", userPlan);
      console.log("👥 User team role:", userTeamRole);
    },
    success: function (response) {
      console.log("🎯🎯🎯 CANCEL PLAN RESPONSE:", response);

      // Check if response has success property
      if (response.status === "success" || response.success === true) {
        console.log("✅ Plan cancellation processed successfully");
        const parsedResponse = response;

        // Get cancellation details
        const cancellationDetails = parsedResponse.data || parsedResponse;
        const cancellationType =
          cancellationDetails.cancellation_type || "unknown";
        const billingPeriodEnd =
          cancellationDetails.billing_period_end ||
          cancellationDetails.current_period_end;
        const currentPlan =
          cancellationDetails.current_plan ||
          currentUser?.plan ||
          "your current plan";

        let successMessage;

        // 🔥 NEW: Handle different response types based on cancellation type
        if (cancellationType === "immediate") {
          console.log("📱 Processing immediate cancellation response");

          if (isEnterpriseAdmin) {
            // Admin immediate cancellation - team disbanded
            successMessage =
              "✅ Team Disbanded and Subscription Cancelled\n\n" +
              `Your ${currentPlan} subscription has been cancelled and your team has been disbanded immediately.\n\n` +
              "📋 What happened:\n" +
              "• All team members were removed from the team immediately\n" +
              "• Everyone (including you) was demoted to the Free plan\n" +
              "• Enterprise features were disabled for all team members\n" +
              "• All team members were notified of the disbandment\n" +
              "• Team configurations have been reset\n" +
              "• All memories were preserved but are now limited to 3K words\n\n" +
              "💡 You can create a new team or upgrade individually anytime!";
          } else if (isEnterpriseMember) {
            // Member immediate cancellation - left team
            successMessage =
              "✅ Left Team and Subscription Cancelled\n\n" +
              `You have been removed from the team and your account has been updated immediately.\n\n` +
              "📋 What happened:\n" +
              "• You were removed from the team immediately\n" +
              "• Your account was demoted to the Free plan\n" +
              "• Enterprise features were disabled for your account\n" +
              "• The team leader was notified of your departure\n" +
              "• Your memories were preserved but are now limited to 3K words\n" +
              "• The rest of the team continues normally\n\n" +
              "💡 You can upgrade individually or be re-invited to a team anytime!";
          } else {
            // Other immediate cancellations
            successMessage =
              "✅ Subscription Cancelled Immediately\n\n" +
              `Your ${currentPlan} subscription has been cancelled and you've been switched to the Free plan.\n\n` +
              "📋 What happened:\n" +
              "• Your subscription was cancelled immediately\n" +
              "• Your account was switched to the Free plan\n" +
              "• Your memories were preserved but are now limited to 3K words\n" +
              "• You can upgrade anytime to restore full memory access\n\n" +
              "💡 Your memories aren't deleted - upgrade anytime to restore full access!";
          }

          // Update UI immediately for immediate cancellations
          $("#current-plan").text("Free");
          $("#billing-status").text("Active");

          // Update currentUser object
          if (currentUser) {
            currentUser.plan = "Free";
            currentUser.team_role = null;
            localStorage.setItem(
              "Micro_Learner_user",
              JSON.stringify(currentUser)
            );
          }

          // Refresh dashboard to reflect immediate plan change
          initializeDashboard("Free");
          showDashboard();
        } else if (cancellationType === "scheduled") {
          console.log("📅 Processing scheduled cancellation response");

          const planName = userPlan.charAt(0).toUpperCase() + userPlan.slice(1);
          const formattedEndDate = billingPeriodEnd
            ? new Date(billingPeriodEnd).toLocaleDateString()
            : "end of billing period";

          // Scheduled cancellation success message
          successMessage =
            `✅ ${planName} Cancellation Scheduled Successfully\n\n` +
            `Your ${currentPlan} subscription has been scheduled for cancellation.\n\n` +
            "📋 What happens next:\n" +
            `• Your ${planName} plan remains fully active until ${formattedEndDate}\n` +
            "• You'll keep all premium features until then\n" +
            "• At the end of your billing period, you'll automatically switch to Free plan\n" +
            "• Your memories will be preserved but limited to 3K words on Free plan\n" +
            "• You can cancel this scheduled cancellation anytime from billing settings\n" +
            "• You can also upgrade to a different plan anytime\n\n" +
            "💡 Your subscription remains fully functional until the scheduled cancellation date!";

          // Update UI to show scheduled cancellation status
          $("#current-plan").text(
            currentPlan + " (Scheduled for Cancellation)"
          );
          $("#billing-status").text(`Active until ${formattedEndDate}`);

          // Add or update the scheduled cancellation info in billing section
          if (!$("#next-month-plan-row").length) {
            $("#current-plan-row").after(`
              <div class="billing-row" id="next-month-plan-row">
                <div class="billing-label">
                  <div>Scheduled Change</div>
                  <div style="font-size: 0.8em; color: #666;">Cancellation scheduled</div>
                </div>
                <div>Free Plan <small style="color: #666; font-size: 0.8em; display: block;">Effective: ${formattedEndDate}</small></div>
              </div>
            `);
          } else {
            $("#next-month-plan-row").show();
            $("#next-month-plan-row")
              .find("div:last")
              .html(
                `Free Plan <small style="color: #666; font-size: 0.8em; display: block;">Effective: ${formattedEndDate}</small>`
              );
          }

          // Add cancel scheduled cancellation button
          if (!$("#cancel-scheduled-change-row").length) {
            $("#next-month-plan-row").after(`
              <div class="billing-row" id="cancel-scheduled-change-row">
                <div class="billing-label">
                  <div>Scheduled Cancellation</div>
                  <div style="font-size: 0.8em; color: #666;">You can cancel this scheduled cancellation anytime</div>
                </div>
                <button class="btn btn-text" id="cancel-scheduled-change-btn" style="color: #e00;">
                  Cancel Scheduled Cancellation
                </button>
              </div>
            `);
          } else {
            $("#cancel-scheduled-change-row").show();
          }
        } else {
          console.log("❓ Unknown cancellation type, using fallback message");

          // Fallback for unknown cancellation types
          successMessage =
            "✅ Subscription Cancellation Processed\n\n" +
            `Your ${currentPlan} subscription cancellation has been processed.\n\n` +
            "📋 Details:\n" +
            `• Access until: ${
              billingPeriodEnd
                ? new Date(billingPeriodEnd).toLocaleDateString()
                : "end of billing period"
            }\n` +
            "• Memories will be preserved\n" +
            "• You can upgrade anytime\n\n" +
            "Check your billing section for more details.";
        }

        // Add refund info if present
        if (cancellationDetails.refund_info) {
          successMessage += `\n\n💰 Refund: ${cancellationDetails.refund_info}`;
        }

        alert(successMessage);

        // Hide the cancel plan button since subscription is now cancelled or scheduled for cancellation
        $("#cancel-plan-btn").hide();

        // Update danger zone buttons
        updateDangerZoneButtons();

        // Refresh billing info to get updated status
        loadBillingInfo();

        // Show toast notification
        const toastMessage =
          cancellationType === "scheduled"
            ? "Subscription cancellation scheduled successfully"
            : "Subscription cancelled successfully";
        showToast(toastMessage, "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        // Handle case where response doesn't indicate success
        console.error("❌ Plan cancellation failed:", response);
        const errorMessage =
          response.error || response.message || "Plan cancellation failed";
        alert("Cancellation failed: " + errorMessage);
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 CANCEL PLAN ERROR:", { xhr, status, error });

      let errorMessage = "An error occurred during plan cancellation.";

      // Handle different response formats
      if (xhr.responseJSON) {
        // If response is already parsed JSON
        if (xhr.responseJSON.error) {
          errorMessage = xhr.responseJSON.error;
        } else if (xhr.responseJSON.debug && xhr.responseJSON.exception) {
          // Handle debug mode response
          errorMessage = `Cancellation failed: ${xhr.responseJSON.exception}`;
          console.log("Debug info:", xhr.responseJSON.debug);
        }
      } else if (xhr.responseText) {
        // Try to parse response text
        try {
          const parsed = JSON.parse(xhr.responseText);
          if (parsed.error) {
            errorMessage = parsed.error;
          } else if (parsed.debug && parsed.exception) {
            errorMessage = `Cancellation failed: ${parsed.exception}`;
            console.log("Debug info:", parsed.debug);
          }
        } catch (e) {
          // If parsing fails, check for specific HTTP status messages
          if (xhr.status === 401) {
            errorMessage = "Session expired. Please log in again.";
          } else if (xhr.status === 405) {
            errorMessage = "Method not allowed.";
          } else if (xhr.status === 500) {
            errorMessage = "Server error occurred during plan cancellation.";
          } else if (xhr.status === 400) {
            errorMessage =
              "Invalid request. Please check your information and try again.";
          }
        }
      }

      alert(errorMessage);
      showToast(errorMessage, "error");
    },
  });
}

function updatePayment() {
  console.log("💳 updatePayment() called");
  console.log("📡 Requesting Stripe portal session URL...");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/payments/create-stripe-portal-session.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/payments/create-stripe-portal-session.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({}),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Update payment request starting");
    },
    success: function (response) {
      console.log("🎯🎯🎯 PAYMENT UPDATE RESPONSE:", response);

      // Fixed: Check response.success and use response.data.url
      if (response.status === "success" || response.success === true) {
        console.log("✅ Portal session created successfully");
        const parsedResponse = response;
        if (parsedResponse.data && parsedResponse.data.url) {
          console.log("🔗 Redirecting to:", parsedResponse.data.url);
          window.location.href = parsedResponse.data.url;
        } else {
          console.error("❌ No portal URL in response");
          alert("Failed to open payment settings. Please try again.");
        }
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Payment update failed:", response);
        alert("Failed to open payment settings. Please try again.");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 PAYMENT UPDATE ERROR:", {
        xhr,
        status,
        error,
      });

      // Try to parse error response for better debugging
      try {
        const errorResponse = JSON.parse(xhr.responseText);
        console.log("📋 Error details:", errorResponse);

        if (errorResponse.message) {
          alert(errorResponse.message);
        } else {
          alert("Something went wrong. Try again later.");
        }
      } catch (e) {
        alert("Something went wrong. Try again later.");
      }
    },
  });
}

function togglePricing(type) {
  console.log("🔄 togglePricing() called for:", type);

  $(".toggle-option").removeClass("active");
  $(
    `.toggle-option:contains(${type.charAt(0).toUpperCase() + type.slice(1)})`
  ).addClass("active");

  // Update prices based on monthly/annual
  const isAnnual = type === "annual";
  console.log("📅 Is annual pricing:", isAnnual);

  $(".price-amount[data-monthly]").each(function () {
    const monthly = $(this).data("monthly");
    const annual = $(this).data("annual");
    $(this).text("$" + (isAnnual ? annual : monthly));
    console.log("💰 Price updated - Monthly:", monthly, "Annual:", annual);
  });
}

// ================== SETTINGS FUNCTIONS ==================

function saveSettings() {
  console.log("⚙️ saveSettings() called");

  const settings = {
    display_name: $("#display-name").val(),
    email_notifications: $("#email-notifications").is(":checked"),
    auto_detect_questions: $("#auto-detect-questions").is(":checked"), // ✨ NEW: Include toggle
  };

  console.log("⚙️ Settings to save:", settings);
  console.log(
    "🎯 Auto detect questions value:",
    settings.auto_detect_questions
  );
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/settings_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/settings_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({ action: "save_settings", settings }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Save settings request starting");
      console.log("👤 Display name:", $("#display-name").val());
      console.log(
        "📧 Email notifications:",
        $("#email-notifications").is(":checked")
      );
      console.log(
        "🎯 Auto detect questions:",
        $("#auto-detect-questions").is(":checked")
      );
    },
    success: function (response) {
      console.log("🎯🎯🎯 SAVE SETTINGS RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Settings saved successfully");
        showToast("Settings saved!", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        console.error("❌ Settings save failed:", response);
        alert(response.message || "Failed to save settings");
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 SAVE SETTINGS ERROR from settings_tab.php:", {
        xhr,
        status,
        error,
      });
      alert("Failed to save settings");
    },
  });
}

function deleteAccount() {
  console.log("🗑️ deleteAccount() called");
  console.log("👤 Current user plan:", currentUser?.plan);
  console.log("👥 Current user team role:", currentUser?.team_role);

  const userPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const userTeamRole = currentUser?.team_role || null;
  const isEnterpriseAdmin =
    userPlan === "enterprise" && userTeamRole === "admin";
  const isEnterpriseMember =
    userPlan === "enterprise" && userTeamRole === "member";

  // Different confirmation messages based on enterprise status
  let firstConfirmationMessage;
  let finalConfirmationMessage;

  if (isEnterpriseAdmin) {
    // Enterprise team leader deleting account - affects entire team
    firstConfirmationMessage =
      "⚠️ ENTERPRISE TEAM LEADER ACCOUNT DELETION WARNING\n\n" +
      "As the team leader, deleting your account will have SEVERE consequences for your entire team:\n\n" +
      "🔥 IMMEDIATE TEAM DESTRUCTION:\n" +
      "• Your entire team will be permanently deleted\n" +
      "• ALL team members will be immediately demoted to the Free plan\n" +
      "• All Enterprise features will be disabled for everyone\n" +
      "• Team configurations and shared settings will be lost forever\n" +
      "• All team members will lose access to Enterprise features\n\n" +
      "💰 FINANCIAL IMPACT:\n" +
      "• NO REFUNDS will be provided for any subscriptions\n" +
      "• All team member subscriptions will be cancelled immediately\n" +
      "• You will lose all credits and unused time\n\n" +
      "🚨 PERMANENT DELETION:\n" +
      "• Your account will be PERMANENTLY deleted and CANNOT be recovered\n" +
      "• You will NEVER be able to access this account again\n" +
      "• All your data, memories, and configurations will be lost forever\n\n" +
      "This affects your ENTIRE TEAM, not just your account!\n\n" +
      "Are you absolutely sure you want to delete your account and disband your entire team?";

    finalConfirmationMessage =
      "🚨 FINAL WARNING: ENTERPRISE TEAM DESTRUCTION\n\n" +
      "This will permanently delete your account and destroy your entire enterprise team.\n\n" +
      "📋 What will happen to YOUR ENTIRE TEAM:\n" +
      "• ALL team members will be removed and demoted to Free plan immediately\n" +
      "• Your team will be permanently deleted and cannot be restored\n" +
      "• Enterprise features will be disabled for everyone\n" +
      "• Team configurations, shared prompts, and settings will be lost forever\n" +
      "• All team members will be notified of the team destruction\n" +
      "• All team subscriptions will be cancelled with NO REFUNDS\n\n" +
      "📋 What will happen to YOUR ACCOUNT:\n" +
      "• Your account will be PERMANENTLY deleted\n" +
      "• You will NEVER be able to recover this account\n" +
      "• All your personal data, memories, and settings will be lost forever\n" +
      "• This action is IRREVERSIBLE and CANNOT be undone\n\n" +
      "⚠️ WARNING: This affects your entire team and destroys everyone's Enterprise access!\n\n" +
      "💔 IMPACT ON YOUR TEAM MEMBERS:\n" +
      "• They will immediately lose all Enterprise features\n" +
      "• Their memories will be limited to 3K words on Free plan\n" +
      "• They will need to upgrade individually or find a new team\n\n" +
      "Continue with account deletion and team destruction?";
  } else if (isEnterpriseMember) {
    // Enterprise team member deleting account
    firstConfirmationMessage =
      "⚠️ ENTERPRISE TEAM MEMBER ACCOUNT DELETION WARNING\n\n" +
      "Deleting your account will have immediate consequences:\n\n" +
      "🔥 IMMEDIATE REMOVAL:\n" +
      "• You will be immediately removed from your enterprise team\n" +
      "• You will lose access to all Enterprise features\n" +
      "• Your team leader will be notified of your departure\n\n" +
      "🚨 PERMANENT DELETION:\n" +
      "• Your account will be PERMANENTLY deleted and CANNOT be recovered\n" +
      "• You will NEVER be able to access this account again\n" +
      "• All your data, memories, and configurations will be lost forever\n" +
      "• You cannot rejoin the team with this account (it will no longer exist)\n\n" +
      "💾 DATA LOSS:\n" +
      "• All your memories and personal configurations will be deleted\n" +
      "• This action is IRREVERSIBLE and CANNOT be undone\n" +
      "• The team will continue normally without you\n\n" +
      "⚠️ NOTE: If you just want to leave the team without deleting your account, " +
      "use the 'Leave Team' option instead.\n\n" +
      "Are you sure you want to permanently delete your account and be removed from the team?";

    finalConfirmationMessage =
      "🚨 FINAL WARNING: PERMANENT ACCOUNT DELETION\n\n" +
      "This will permanently delete your account and remove you from the enterprise team.\n\n" +
      "📋 What will happen RIGHT NOW:\n" +
      "• You will be immediately removed from the enterprise team\n" +
      "• Your account will be PERMANENTLY deleted\n" +
      "• You will NEVER be able to recover or access this account again\n" +
      "• All your personal data, memories, and settings will be lost forever\n" +
      "• Your team leader will be notified of your departure\n" +
      "• This action is IRREVERSIBLE and CANNOT be undone\n\n" +
      "📋 What this means:\n" +
      "• The team will continue without you\n" +
      "• You cannot rejoin with this account (it will no longer exist)\n" +
      "• If you want to join a team again, you'll need to create a new account\n" +
      "• All your current data and settings will be permanently lost\n\n" +
      "⚠️ ALTERNATIVE: If you just want to leave the team without deleting your account, " +
      "cancel this and use 'Leave Team' instead.\n\n" +
      "Continue with permanent account deletion?";
  } else {
    // Regular account deletion (non-enterprise)
    firstConfirmationMessage =
      "⚠️ ACCOUNT DELETION WARNING\n\n" +
      "Deleting your account will permanently remove all your data:\n\n" +
      "🚨 PERMANENT DELETION:\n" +
      "• Your account will be PERMANENTLY deleted and CANNOT be recovered\n" +
      "• All your memories, configurations, and data will be lost forever\n" +
      "• You will NEVER be able to access this account again\n" +
      "• This action is IRREVERSIBLE and CANNOT be undone\n\n" +
      "Are you sure you want to permanently delete your account?";

    finalConfirmationMessage =
      "🚨 FINAL WARNING: PERMANENT ACCOUNT DELETION\n\n" +
      "This will permanently delete your account and all associated data.\n\n" +
      "📋 What will happen:\n" +
      "• Your account will be PERMANENTLY deleted\n" +
      "• All your memories, settings, and data will be lost forever\n" +
      "• You will NEVER be able to recover this account\n" +
      "• This action is IRREVERSIBLE and CANNOT be undone\n\n" +
      "Continue with permanent account deletion?";
  }

  // First confirmation dialog with plan-specific message
  if (!confirm(firstConfirmationMessage)) {
    console.log("❌ User cancelled account deletion");
    return;
  }

  // Get password confirmation from user for security - UPDATED for Google users
  const password = prompt(
    "Security verification required. Please enter your password, or if you use Google login, enter 'CONFIRM' to proceed:"
  );

  if (!password) {
    console.log("❌ User cancelled - no password provided");
    return;
  }

  // Final confirmation with plan-specific detailed explanation
  if (!confirm(finalConfirmationMessage)) {
    console.log("❌ User cancelled final confirmation");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/auth/delete_account.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/auth/delete_account.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      password: password,
      confirm_delete: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🚀 Delete account request starting");
      console.log("👤 User plan:", userPlan);
      console.log("👥 User team role:", userTeamRole);
    },
    success: function (response) {
      console.log("🎯🎯🎯 DELETE ACCOUNT RESPONSE:", response);

      // Check if response has success property (from sendSuccess function)
      if (response.status === "success" || response.success === true) {
        console.log("✅ Account deleted successfully");
        const parsedResponse = response;

        // Show success message with deletion details
        const deletedUser =
          parsedResponse.data?.deleted_user || parsedResponse.deleted_user;
        const deletedAt =
          parsedResponse.data?.deleted_at || parsedResponse.deleted_at;

        let successMessage;

        if (isEnterpriseAdmin) {
          successMessage =
            "✅ Account Deleted and Team Disbanded\n\n" +
            "Your account has been permanently deleted and your enterprise team has been disbanded.\n\n" +
            "📋 What happened:\n" +
            "• Your account was permanently deleted\n" +
            "• Your entire team was disbanded\n" +
            "• All team members were demoted to Free plan\n" +
            "• All team subscriptions were cancelled\n" +
            "• Team members were notified of the disbandment\n\n" +
            "This account and team cannot be recovered. You will now be logged out.";
        } else if (isEnterpriseMember) {
          successMessage =
            "✅ Account Deleted and Removed from Team\n\n" +
            "Your account has been permanently deleted and you have been removed from the enterprise team.\n\n" +
            "📋 What happened:\n" +
            "• Your account was permanently deleted\n" +
            "• You were removed from the enterprise team\n" +
            "• Your team leader was notified\n" +
            "• The team continues without you\n\n" +
            "This account cannot be recovered. You will now be logged out.";
        } else {
          successMessage =
            "✅ Account Deleted Successfully\n\n" +
            "Your account has been permanently deleted.\n\n" +
            "📋 What happened:\n" +
            "• Your account was permanently deleted\n" +
            "• All your data was removed\n" +
            "• This action cannot be undone\n\n" +
            "You will now be logged out. Hopefully you come back soon with a new account!";
        }

        alert(successMessage);

        // 🔥 ENHANCED CLEANUP - Clear ALL browser data aggressively
        console.log("🧹 Starting comprehensive browser data cleanup...");

        try {
          // 1. Clear all localStorage
          localStorage.clear();
          console.log("✅ localStorage cleared completely");

          // 2. Clear all sessionStorage
          sessionStorage.clear();
          console.log("✅ sessionStorage cleared completely");

          // 3. Clear ALL cookies for this domain (not just auth cookies)
          document.cookie.split(";").forEach(function (cookie) {
            const eqPos = cookie.indexOf("=");
            const name =
              eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
            // Clear with multiple path variations to be thorough
            document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/`;
            document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=${window.location.hostname}`;
            document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=.${window.location.hostname}`;
          });
          console.log("✅ All cookies cleared completely");

          // 4. Clear global variables
          if (typeof window.authToken !== "undefined") {
            window.authToken = null;
            delete window.authToken;
          }
          if (typeof window.currentUser !== "undefined") {
            window.currentUser = null;
            delete window.currentUser;
          }
          if (typeof window.selectedPlan !== "undefined") {
            window.selectedPlan = null;
            delete window.selectedPlan;
          }
          if (typeof window.appliedPromoCode !== "undefined") {
            window.appliedPromoCode = null;
            delete window.appliedPromoCode;
          }
          console.log("✅ Global variables cleared");

          // 5. Clear any cached data
          if ("caches" in window) {
            caches
              .keys()
              .then(function (cacheNames) {
                return Promise.all(
                  cacheNames.map(function (cacheName) {
                    return caches.delete(cacheName);
                  })
                );
              })
              .then(() => {
                console.log("✅ Cache storage cleared");
              });
          }

          // 6. Clear local variables
          authToken = null;
          currentUser = null;
          selectedPlan = null;

          console.log("✅ Comprehensive cleanup completed");
        } catch (cleanupError) {
          console.error("⚠️ Error during cleanup:", cleanupError);
          // Continue anyway - the main deletion succeeded
        }

        // 7. Force page reload to ensure clean state
        console.log("🔄 Forcing page reload to ensure clean state...");
        setTimeout(() => {
          window.location.href = window.location.origin;
        }, 1000);
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        // Handle case where response doesn't indicate success
        console.error("❌ Account deletion failed:", response);
        const errorMessage =
          response.error || response.message || "Account deletion failed";
        alert("Account deletion failed: " + errorMessage);
      } else {
        console.warn("Unexpected response format", response);
        alert("Unexpected response format");
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 DELETE ACCOUNT ERROR:", { xhr, status, error });

      let errorMessage = "An error occurred during account deletion.";

      // Handle different response formats
      if (xhr.responseJSON) {
        // If response is already parsed JSON
        if (xhr.responseJSON.error) {
          errorMessage = xhr.responseJSON.error;
        } else if (xhr.responseJSON.debug && xhr.responseJSON.exception) {
          // Handle debug mode response
          errorMessage = `Deletion failed: ${xhr.responseJSON.exception}`;
          console.log("Debug info:", xhr.responseJSON.debug);
        }
      } else if (xhr.responseText) {
        // Try to parse response text
        try {
          const parsed = JSON.parse(xhr.responseText);
          if (parsed.error) {
            errorMessage = parsed.error;
          } else if (parsed.debug && parsed.exception) {
            errorMessage = `Deletion failed: ${parsed.exception}`;
            console.log("Debug info:", parsed.debug);
          }
        } catch (e) {
          // If parsing fails, check for specific HTTP status messages
          if (xhr.status === 401) {
            errorMessage = "Session expired. Please log in again.";
          } else if (xhr.status === 405) {
            errorMessage = "Method not allowed.";
          } else if (xhr.status === 500) {
            errorMessage = "Server error occurred during account deletion.";
          }
        }
      }

      alert(errorMessage);
    },
  });
}

// ================== RESOURCES TAB FUNCTIONS ==================

function openResource(type) {
  console.log("📚 openResource() called for:", type);

  const resourceUrls = {
    quickstart: "/docs/quickstart",
    api: "/docs/api",
    videos: "/tutorials",
    forum: "/community",
  };

  console.log("🔗 Resource URL:", resourceUrls[type]);
  showToast(`Opening ${type} resource...`, "success");
  console.log("Opening resource:", resourceUrls[type]);
}

function searchKnowledgeBase() {
  console.log("🔍 searchKnowledgeBase() called");

  const query = $("#kb-search").val();
  console.log("🔍 Knowledge base search query:", query);

  if (!query) {
    console.warn("⚠️ Empty search query");
    showToast("Please enter a search term", "error");
    return;
  }

  showToast(`Searching for: ${query}`, "success");

  // In production, make API call
  console.log("Searching knowledge base:", query);
}

function openSupport() {
  console.log("🆘 openSupport() called");

  const isPriority = ["pro", "elite", "enterprise"].includes(
    currentUser?.plan || "free"
  );

  console.log("🎯 User plan:", currentUser?.plan || "free");
  console.log("⭐ Is priority support:", isPriority);

  showToast(
    isPriority ? "Opening priority support..." : "Opening support...",
    "success"
  );
  console.log("Opening support, priority:", isPriority);
}

// ================== COMPANY TAB FUNCTIONS ==================

function openBlogPost(slug) {
  console.log("📝 openBlogPost() called for slug:", slug);
  showToast(`Opening blog post: ${slug}`, "success");
  console.log("Opening blog post:", slug);
}

function openBlog() {
  console.log("📝 openBlog() called");
  showToast("Opening blog...", "success");
  console.log("Opening blog");
}

function openJob(jobId) {
  console.log("💼 openJob() called for job ID:", jobId);
  showToast(`Opening job listing: ${jobId}`, "success");
  console.log("Opening job:", jobId);
}

function openCareers() {
  console.log("💼 openCareers() called");
  showToast("Opening careers page...", "success");
  console.log("Opening careers page");
}

function getUrlParameter(name) {
  console.log("🔗 getUrlParameter() called for:", name);
  const urlParams = new URLSearchParams(window.location.search);
  const value = urlParams.get(name);
  console.log("🔗 URL parameter value:", value);
  return value;
}

function formatCurrency(amount) {
  const formatted = Math.abs(amount).toFixed(2);
  return amount < 0 ? `-${formatted}` : `${formatted}`;
}

function escapeHtml(text) {
  const map = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#039;",
  };
  return text.replace(/[&<>"']/g, (m) => map[m]);
}

function getTimeAgo(date) {
  const seconds = Math.floor((new Date() - date) / 1000);

  if (seconds < 60) return "Just now";
  if (seconds < 3600) return Math.floor(seconds / 60) + " minutes ago";
  if (seconds < 86400) return Math.floor(seconds / 3600) + " hours ago";
  if (seconds < 604800) return Math.floor(seconds / 86400) + " days ago";

  return date.toLocaleDateString();
}

function showToast(message, type = "success") {
  console.log("🍞 showToast() called:", message, type);

  const $toast = $("#toast");
  $toast.text(message);
  $toast.removeClass("success error").addClass(type + " show");

  setTimeout(() => {
    $toast.removeClass("show");
    console.log("🍞 Toast hidden");
  }, 3000);
}

function downloadApp() {
  console.log("📱 downloadApp() called");
  showToast("Download will start...", "success");

  // Replace with your actual download URLs
  const downloadUrls = {
    windows: "https://your-domain.com/apps/your-app-windows.exe",
    mac: "https://your-domain.com/apps/your-app-mac.dmg",
    linux: "https://your-domain.com/apps/your-app-linux.AppImage",
  };

  // Detect platform and download appropriate version
  const platform = navigator.platform.toLowerCase();
  let downloadUrl;

  if (platform.includes("win")) {
    downloadUrl = downloadUrls.windows;
  } else if (platform.includes("mac")) {
    downloadUrl = downloadUrls.mac;
  } else {
    downloadUrl = downloadUrls.linux;
  }

  // Create hidden download link
  const link = document.createElement("a");
  link.href = downloadUrl;
  link.download = downloadUrl.split("/").pop(); // Extract filename
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  // Optional: Track download completion
  setTimeout(() => {
    showToast("Download completed!", "success");
  }, 2000);
}

// Global flag to track if we're in the middle of auth operations
let isAuthInProgress = false;

// ================== DASHBOARD INITIALIZATION ==================

function initializeDashboard(planType) {
  console.log("🏗️ initializeDashboard() called for plan:", planType);

  // Set currentPlan global
  currentPlan = planType;

  // Initialize dashboard based on plan type
  /* if (planType === "enterprise") {
    // Enable enterprise features
    $("#team-section").show();
    $("#context-control").show();
  } else if (planType === "elite") {
    // Enable elite features
    $("#context-control").show();
  }*/

  console.log("✅ Dashboard initialized for plan:", planType);
}

// ================== MAIN AUTHENTICATION CHECK (PAGE LOAD ONLY) ==================

function initializeAuthenticationCheck() {
  console.log("🔐 Checking authentication on page load/refresh ONLY");

  // ✨ NEW: Try to get auth data from cookies first if not in memory
  if (!authToken) {
    authToken = getCookie("auth_token");
    console.log(
      "🍪 Auth token from cookie:",
      authToken ? "EXISTS" : "NOT_FOUND"
    );
  }

  if (!currentUser) {
    const userCookie = getCookie("current_user");
    if (userCookie) {
      try {
        currentUser = JSON.parse(userCookie);
        console.log(
          "🍪 Current user from cookie:",
          currentUser ? "EXISTS" : "NOT_FOUND"
        );
      } catch (e) {
        console.error("❌ Failed to parse current user cookie:", e);
        deleteCookie("current_user");
      }
    }
  }

  console.log("🔑 Auth token exists:", !!authToken);

  if (authToken) {
    const userData = localStorage.getItem("Micro_Learner_user");
    console.log(
      "👤 User data from localStorage:",
      userData ? "EXISTS" : "NOT_FOUND"
    );

    // ONLY validate token with server on page load/refresh
    console.log(
      "🔄 Page load detected - validating token with server via auto login"
    );

    attemptAutoLogin()
      .then(function (success) {
        if (success) {
          console.log("✅ Token validation successful on page load");
          // No need to start session monitoring - the global AJAX error handler
          // will automatically detect 401 responses and logout when needed
        } else {
          console.log("❌ Token validation failed on page load");
          handleFailedAutoLogin(userData);
        }
      })
      .catch(function (error) {
        console.error("🚨 Auto login attempt failed with error:", error);
        handleFailedAutoLogin(userData);
      });
  } else {
    console.log("❌ No auth token on page load, showing landing page");
    showLanding();
  }
}

function handleFailedAutoLogin(userData) {
  // Token is invalid - check if we have cached user data as fallback
  if (userData) {
    console.log(
      "⚠️ Token invalid but cached data exists - using cached data temporarily"
    );
    try {
      currentUser = JSON.parse(userData);
      console.log("👤 Using cached user data:", currentUser);

      // FIXED: Initialize dashboard with plan restrictions before showing it
      initializeDashboard(currentUser.plan);
      showDashboard();
      loadDashboardData();
      showToast("Using offline data - some features may be limited", "warning");
    } catch (parseError) {
      console.error("❌ Failed to parse cached user data:", parseError);
      clearAuthData();
      showLanding();
    }
  } else {
    console.log("❌ No valid token and no cached data, showing landing page");
    clearAuthData();
    showLanding();
  }
}
$(document).ready(function () {
  console.log("🚀 Document ready - initializing event listeners");

  console.log("👥 Setting up enterprise invite modal event listeners");

  // Close modal button
  $("#close-enterprise-invite").on("click", function () {
    console.log("❌ Close enterprise invite modal button clicked");
    // Don't allow closing without making a decision
    showToast(
      "Please review your team invitations and choose to accept or decline",
      "info"
    );
  });

  // Decline all invites button
  $("#decline-all-invites-btn").on("click", function () {
    console.log("❌ Decline all invites button clicked");
    declineAllEnterpriseInvites();
  });

  // Prevent closing modal by clicking outside - require explicit decision
  $("#enterprise-invite-modal").on("click", function (e) {
    if ($(e.target).hasClass("modal")) {
      console.log(
        "ℹ️ Clicked outside enterprise invite modal - requiring decision"
      );
      showToast(
        "Please review your team invitations and choose to accept or decline",
        "info"
      );
    }
  });

  console.log("✅ Enterprise invite modal event listeners initialized");

  // Initialize Google Sign-In when page loads
  initializeGoogleSignIn();

  // Render actual Google button in hidden div
  if (typeof google !== "undefined" && google.accounts) {
    google.accounts.id.renderButton(
      document.getElementById("google-signin-button"),
      {
        theme: "outline",
        size: "large",
        text: "continue_with",
      }
    );
  }

  console.log("✅ All event listeners initialized successfully");

  // Cancel plan button listener
  $(document).on("click", "#cancel-plan-btn", function () {
    console.log("🗑️ Cancel plan button clicked");
    cancelPlan();
  });

  console.log("✅ Cancel plan event listeners initialized");

  // Initialize authentication check with auto login support
  initializeAuthenticationCheck();

  // Check for payment success/cancel
  const payment = getUrlParameter("payment");
  console.log("💳 Payment URL parameter:", payment);

  if (payment === "success") {
    console.log("✅ Payment successful detected");
    showToast("Payment successful! Your plan has been upgraded.", "success");
    window.history.replaceState({}, document.title, window.location.pathname);
  } else if (payment === "cancelled") {
    console.log("❌ Payment cancelled detected");
    showToast("Payment cancelled", "error");
    window.history.replaceState({}, document.title, window.location.pathname);
  }

  // Add loading spinner
  $("body").append(
    '<div class="loading-spinner" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;"><div class="loading"></div></div>'
  );
  console.log("⏳ Loading spinner added to DOM");

  // ====== NAVIGATION EVENT LISTENERS ======
  console.log("🧭 Setting up navigation event listeners");
  $(document).on("click", "#nav-login-btn", function () {
    console.log("🔐 Nav login button clicked");
    showLogin();
  });
  $(document).on("click", "#nav-signup-btn", function () {
    console.log("📝 Nav signup button clicked");
    showSignup();
  });
  $(document).on("click", "#dashboard-nav-btn", function () {
    console.log("📊 Dashboard nav button clicked");
    showDashboard();
  });

  // ====== FORM SUBMISSIONS ======
  console.log("📝 Setting up form submission listeners");
  $("#login-form").on("submit", function (e) {
    console.log("🔐 Login form submitted");
    handleLogin(e);
  });
  $("#signup-form").on("submit", function (e) {
    console.log("📝 Signup form submitted");
    handleSignup(e);
  });

  // ====== MODAL CONTROLS ======
  console.log("🪟 Setting up modal control listeners");
  $(".modal-close").on("click", function () {
    console.log("❌ Modal close button clicked");
    $(this).closest(".modal").removeClass("active");
  });

  $(".show-login-link").on("click", function () {
    console.log("🔐 Show login link clicked");
    showLogin();
  });
  $(".show-signup-link").on("click", function () {
    console.log("📝 Show signup link clicked");
    showSignup();
  });

  // ====== DASHBOARD MENU ======
  console.log("📊 Setting up dashboard menu listeners");
  $(".menu-item").on("click", function () {
    const section = $(this).text().toLowerCase().replace(" ", "-");
    console.log("📂 Menu item clicked for section:", section);
    showSection(section);
  });

  // ====== CONFIGURATION TAB ======
  console.log("⚙️ Setting up configuration tab listeners");
  $("#save-config-btn").on("click", function () {
    console.log("💾 Save config button clicked");
    saveConfig();
  });

  // AI Model Selection
  $(".modal-option").on("click", function () {
    console.log("🤖 AI model option clicked:", $(this).data("model"));
    $(".modal-option").removeClass("selected");
    $(this).addClass("selected");
    selectedModel = $(this).data("model");
    console.log("🤖 Selected model updated to:", selectedModel);
  });

  // Context Slider
  $("#context-slider").on("input", function () {
    const value = $(this).val();
    console.log("🎛️ Context slider changed to:", value);
    $("#context-value").text(value);
  });

  // ====== MEMORY TAB ======
  console.log("🧠 Setting up memory tab listeners");
  $("#memory-search").on(
    "keyup",
    debounce(function () {
      console.log("🔍 Memory search keyup triggered");
      searchMemories();
    }, 300)
  );

  // Memory actions (using delegation for dynamic content)
  $(document).on("click", ".edit-memory-btn", function () {
    const memoryId = $(this).data("id");
    console.log("✏️ Edit memory button clicked for ID:", memoryId);
    editMemory(memoryId);
  });

  $(document).on("click", ".delete-memory-btn", function () {
    const memoryId = $(this).data("id");
    console.log("🗑️ Delete memory button clicked for ID:", memoryId);
    deleteMemory(memoryId);
  });

  // ====== TEAM TAB ======
  console.log("👥 Setting up team tab listeners");
  $("#invite-member-btn").on("click", function () {
    console.log("📧 Invite member button clicked");
    inviteMember();
  });

  $(document).on("click", ".remove-member-btn", function () {
    const userId = $(this).data("id");
    console.log("🗑️ Remove member button clicked for user ID:", userId);
    removeMember(userId);
  });

  // ====== BILLING TAB ======
  console.log("💳 Setting up billing tab listeners");
  $("#change-plan-btn").on("click", function () {
    console.log("📋 Change plan button clicked");
    showUpgrade();
  });
  $("#stats-upgrade-btn").on("click", function () {
    console.log("📊 Stats upgrade button clicked");
    showUpgrade();
  });
  $("#update-payment-btn").on("click", function () {
    console.log("💳 Update payment button clicked");
    updatePayment();
  });
  $("#copy-referral-btn").on("click", function () {
    console.log("📋 Copy referral button clicked");
    copyReferralCode();
  });

  // ✨ NEW: Cancel scheduled plan change button listener
  $(document).on("click", "#cancel-scheduled-change-btn", function () {
    console.log("🔄 Cancel scheduled plan change button clicked");
    cancelScheduledPlanChange();
  });

  // ====== UPGRADE MODAL ======
  console.log("⬆️ Setting up upgrade modal listeners");
  $(".plan-option").on("click", function () {
    const planId = $(this).data("plan");
    console.log("📋 Plan option clicked:", planId);
    selectPlan(planId);
  });

  $("#apply-promo-btn").on("click", function () {
    console.log("🎫 Apply promo button clicked");
    applyPromoCode();
  });

  // Add remove promo code listener using delegation
  $(document).on("click", "#remove-promo-btn", function () {
    console.log("🗑️ Remove promo button clicked");
    removePromoCode();
  });

  $("#proceed-checkout-btn").on("click", function () {
    console.log("🛒 Proceed to checkout button clicked");
    proceedToCheckout();
  });

  // ====== PRICING TOGGLE ======
  console.log("🔄 Setting up pricing toggle listeners");
  $(".toggle-option").on("click", function () {
    const type = $(this).text().toLowerCase();
    console.log("🔄 Pricing toggle clicked for:", type);
    togglePricing(type);
  });

  // ====== SETTINGS TAB ======
  console.log("⚙️ Setting up settings tab listeners");
  $("#save-settings-btn").on("click", function () {
    console.log("💾 Save settings button clicked");
    saveSettings();
  });
  $("#delete-account-btn").on("click", function () {
    console.log("🗑️ Delete account button clicked");
    deleteAccount();
  });

  // ====== OTHER BUTTONS ======
  console.log("🔘 Setting up other button listeners");
  $("#logout-btn").on("click", function () {
    console.log("🚪 Logout button clicked");
    logout();
  });
  // ====== HERO BUTTONS ======
  console.log("🦸 Setting up hero button listeners");
  $(".hero-actions .btn-primary").on("click", function () {
    console.log("🦸 Hero primary button clicked");
    showSignup();
  });
  $(".hero-actions .btn-outline").on("click", function () {
    console.log("🦸 Hero outline button clicked");
    downloadApp();
  });

  // ====== PRICING CARDS ======
  console.log("💳 Setting up pricing card plan selection listeners");
  // Enhanced plan button listeners that capture the selected plan
  $(".plan-button")
    .off("click")
    .on("click", function () {
      const $card = $(this).closest(".pricing-card");
      const planName = $card.find(".plan-name").text().toLowerCase();

      console.log("📝 Plan button clicked for plan:", planName);

      // Only capture plan selection for paid plans
      if (planName !== "free") {
        console.log("💳 Paid plan selected, storing selection:", planName);
        selectPlanFromPricing(planName);
      } else {
        console.log("🆓 Free plan selected, showing regular signup");
        preSelectedPlan = null; // Clear any existing selection
        showSignup();
      }
    });

  // ====== HERO BUTTONS ======
  console.log("🦸 Setting up hero button listeners");
  $(".hero-actions .btn-primary")
    .off("click")
    .on("click", function () {
      console.log("🦸 Hero primary button clicked - no plan pre-selection");
      preSelectedPlan = null; // Clear any existing selection
      showSignup();
    });

  // ====== RESOURCES TAB EVENT LISTENERS ======
  console.log("📚 Setting up resources tab listeners");
  // Resource buttons
  $(document).on("click", "[data-resource]", function () {
    const resourceType = $(this).data("resource");
    console.log("📚 Resource button clicked:", resourceType);
    openResource(resourceType);
  });

  // Knowledge base search
  $("#kb-search-btn").on("click", function () {
    console.log("🔍 Knowledge base search button clicked");
    searchKnowledgeBase();
  });
  $("#kb-search").on("keypress", function (e) {
    if (e.which === 13) {
      console.log("🔍 Knowledge base search Enter key pressed");
      searchKnowledgeBase();
    }
  });

  // Contact support
  $("#contact-support-btn").on("click", function () {
    console.log("🆘 Contact support button clicked");
    openSupport();
  });

  // ====== COMPANY TAB EVENT LISTENERS ======
  console.log("🏢 Setting up company tab listeners");
  // Blog post links
  $(document).on("click", "[data-blog-post]", function (e) {
    e.preventDefault();
    const blogSlug = $(this).data("blog-post");
    console.log("📝 Blog post link clicked:", blogSlug);
    openBlogPost(blogSlug);
  });

  // View all posts
  $("#view-all-posts-btn").on("click", function () {
    console.log("📝 View all posts button clicked");
    openBlog();
  });

  // Job listings
  $(document).on("click", "[data-job]", function () {
    const jobId = $(this).data("job");
    console.log("💼 Job listing clicked:", jobId);
    openJob(jobId);
  });

  // View all positions
  $("#view-all-positions-btn").on("click", function () {
    console.log("💼 View all positions button clicked");
    openCareers();
  });

  /*
  // Periodic usage update
  console.log("⏰ Setting up periodic usage update");
  setInterval(function () {
    console.log("⏰ Periodic usage stats update triggered");
    updateUsageStats();
  }, 180000); // Every minute
  */

  // Delete team button listener
  $(document).on("click", "#delete-team-btn", function () {
    console.log("🗑️ Delete team button clicked");
    deleteTeam();
  });

  console.log("✅ Delete team event listeners initialized");

  // Team name editing
  $(document).on("click", "#edit-team-name-btn", editTeamName);
  $(document).on("click", "#save-team-name-btn", saveTeamName);
  $(document).on("click", "#cancel-team-name-btn", cancelTeamNameEdit);

  // Team description editing
  $(document).on("click", "#edit-team-description-btn", editTeamDescription);
  $(document).on("click", "#save-team-description-btn", saveTeamDescription);
  $(document).on(
    "click",
    "#cancel-team-description-btn",
    cancelTeamDescriptionEdit
  );

  // Double-click to edit (for convenience)
  $(document).on("dblclick", "#team-name-text", function () {
    if ($("#edit-team-name-btn").is(":visible")) {
      editTeamName();
    }
  });

  $(document).on("dblclick", "#team-description-text", function () {
    if ($("#edit-team-description-btn").is(":visible")) {
      editTeamDescription();
    }
  });

  // Enter key to save
  $(document).on("keypress", "#team-name-input", function (e) {
    if (e.which === 13) {
      saveTeamName();
    }
  });

  // Leave team button listener
  $(document).on("click", "#leave-team-btn", function () {
    console.log("🚪 Leave team button clicked");
    leaveTeam();
  });

  console.log("✅ Leave team event listeners initialized");

  console.log("✅ Enhanced team management event listeners initialized");

  // ====== FORGOT PASSWORD EVENT LISTENERS ======
  console.log("🔐 Setting up forgot password event listeners");

  // Forgot password link in login modal
  $("#forgot-password-link").on("click", function (e) {
    e.preventDefault();
    console.log("🔐 Forgot password link clicked");
    showForgotPassword();
  });

  // Step 1: Email form submission
  $("#forgot-password-email-form").on("submit", function (e) {
    console.log("📧 Forgot password email form submitted");
    handleForgotPasswordEmailSubmit(e);
  });

  // Step 2: Verification code form submission
  $("#forgot-password-code-form").on("submit", function (e) {
    console.log("🔢 Verification code form submitted");
    handleVerificationCodeSubmit(e);
  });

  // Step 3: Password reset form submission
  $("#forgot-password-reset-form").on("submit", function (e) {
    console.log("🔒 Password reset form submitted");
    handlePasswordResetSubmit(e);
  });

  // Resend verification code button
  $("#resend-code-btn").on("click", function () {
    console.log("🔄 Resend code button clicked");
    resendVerificationCode();
  });

  // Back to login links
  $(".back-to-login-link").on("click", function (e) {
    e.preventDefault();
    console.log("🔙 Back to login link clicked");
    goBackToLogin();
  });

  // Back to email step link
  $(".back-to-email-link").on("click", function (e) {
    e.preventDefault();
    console.log("🔙 Back to email link clicked");
    goBackToEmailStep();
  });

  // Go to login button after successful reset
  $("#go-to-login-btn").on("click", function () {
    console.log("🔙 Go to login button clicked after successful reset");
    goToLoginAfterSuccess();
  });

  // Forgot password modal close button
  $("#forgot-password-modal .modal-close").on("click", function () {
    console.log("❌ Forgot password modal close button clicked");
    closeModal("forgot-password-modal");
  });

  // Auto-format verification code input (numbers only, max 6 digits)
  $("#verification-code").on("input", function () {
    let value = $(this).val().replace(/\D/g, ""); // Remove non-digits
    if (value.length > 6) {
      value = value.substring(0, 6); // Limit to 6 digits
    }
    $(this).val(value);

    // Auto-submit when 6 digits are entered
    if (value.length === 6) {
      console.log(
        "🔢 Auto-submitting verification code after 6 digits entered"
      );
      $("#forgot-password-code-form").submit();
    }
  });

  // Real-time password confirmation validation
  $("#confirm-new-password").on("input", function () {
    const newPassword = $("#new-password").val();
    const confirmPassword = $(this).val();

    if (confirmPassword && newPassword !== confirmPassword) {
      $(this).css("border-color", "#e53e3e");
    } else {
      $(this).css("border-color", "");
    }
  });

  console.log("✅ Forgot password event listeners initialized");
  console.log("✅ All event listeners initialized successfully");
});

// Debounce helper
function debounce(func, wait) {
  console.log("⏳ Debounce function created with wait:", wait);
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      console.log("⏳ Debounced function executing");
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function initializeDashboard(plan) {
  console.log("📊 initializeDashboard() called for plan:", plan);

  // Validate and normalize plan input
  const planMap = {
    free: "Free",
    pro: "Pro",
    elite: "Elite",
    enterprise: "Enterprise",
  };

  const normalizedPlan = planMap[plan?.toLowerCase()] || plan || "Free";
  console.log("📊 Normalized plan:", normalizedPlan);

  // ALWAYS reset dashboard first
  resetDashboard();

  // Apply plan-specific restrictions
  switch (normalizedPlan) {
    case "Free":
      hideTeamsTab();
      hideConfigurationTab();
      break;
    case "Pro":
      hideTeamsTab();
      break;
    case "Elite":
      hideTeamsTab();
      break;
    case "Enterprise":
      // Enterprise has access to everything
      break;
  }

  console.log(`✅ Dashboard initialized for ${normalizedPlan} plan`);
}

function hideTeamsTab() {
  console.log("🔍 hideTeamsTab: Starting execution");

  const teamsItem = document.querySelector(".Team-menu-item");

  if (!teamsItem) {
    console.warn("⚠️ hideTeamsTab: Teams item not found");
    return;
  }

  console.log("✅ hideTeamsTab: Teams item found", teamsItem);
  console.log(
    "📝 hideTeamsTab: Teams item text content:",
    teamsItem.textContent
  );

  teamsItem.style.display = "none";
  console.log("✅ hideTeamsTab: Teams tab hidden successfully");
}

function hideConfigurationTab() {
  console.log("🔍 hideConfigurationTab: Starting execution");

  const ConfigurationItem = document.querySelector(".Configuration-menu-item");

  if (!ConfigurationItem) {
    console.warn("⚠️ hideConfigurationTab: Configuration item not found");
    return;
  }

  console.log(
    "✅ hideConfigurationTab: Configuration item found",
    ConfigurationItem
  );
  console.log(
    "📝 hideConfigurationTab: Configuration item text content:",
    ConfigurationItem.textContent
  );

  ConfigurationItem.style.display = "none";
  console.log("✅ hideConfigurationTab: Configuration tab hidden successfully");
}

// Helper function to reset dashboard and show all elements
function resetDashboard() {
  console.log("🔍 resetDashboard: Starting execution");
  const dashboardMenu = document.querySelector(".dashboard-menu");

  if (!dashboardMenu) {
    console.warn("⚠️ resetDashboard: Dashboard menu not found");
    return;
  }

  console.log("✅ resetDashboard: Dashboard menu found", dashboardMenu);

  const allMenuItems = dashboardMenu.querySelectorAll(
    'li, .menu-item, [style*="display: none"]'
  );

  console.log(
    `📊 resetDashboard: Found ${allMenuItems.length} menu items to reset`
  );

  allMenuItems.forEach((item, index) => {
    console.log(`🔄 resetDashboard: Resetting item ${index + 1}:`, item);
    item.style.display = "";
  });

  console.log("✅ resetDashboard: All menu items reset successfully");
}
// Enhanced Team Management Functions

let allTeamMembers = [];
let currentUserRole = "member";

// Enhanced loadTeamData function to store data for search
function loadTeamData() {
  console.log("👥 loadTeamData() called");
  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/team_tab.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/team_tab.php`,
    method: "GET",
    dataType: "json",
    data: { action: "get_team_data" },
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for loadTeamData");
      console.log("📋 Request data:", { action: "get_team_data" });
    },
    success: function (response) {
      console.log("🎯🎯🎯 TEAM DATA RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Team data loaded successfully");
        const teamData = response.data;
        const userRole = teamData.current_user_role;

        console.log("🔐 User role from server:", userRole);

        // Store data globally for search functionality
        allTeamMembers = teamData.members || [];
        currentUserRole = userRole || "member";

        // Set role FIRST and verify it worked
        setupTeamEditPermissions(userRole);
        updateDangerZoneButtons();

        // VERIFY the role was set before proceeding
        const actualRole = currentUser?.team_role;
        console.log(
          "🔍 Verifying role was set - currentUser.team_role:",
          actualRole
        );

        if (actualRole !== userRole) {
          console.error(
            "❌ Role assignment failed! Expected:",
            userRole,
            "Got:",
            actualRole
          );
          // Force set it again
          if (currentUser) {
            currentUser.team_role = userRole;
            console.log("🔧 Force-set team_role to:", userRole);
          }
        }

        // Update team info
        updateTeamInfo(teamData.team_info);

        // Display team members - now pass the role explicitly as backup
        displayFilteredTeamMembers();

        // Update team statistics
        updateTeamStatistics(teamData.statistics);
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 TEAM DATA ERROR from team_tab.php:", {
        xhr,
        status,
        error,
      });
    },
  });
}

function displayFilteredTeamMembers(searchTerm = "") {
  console.log(
    "🔍 displayFilteredTeamMembers() called with search term:",
    searchTerm
  );

  let filteredMembers = allTeamMembers;

  // Filter members if search term provided
  if (searchTerm && searchTerm.trim()) {
    const term = searchTerm.toLowerCase().trim();
    console.log("🔍 Filtering members with term:", term);

    filteredMembers = allTeamMembers.filter((member) => {
      // Search in name
      const nameMatch = member.name && member.name.toLowerCase().includes(term);

      // Search in email
      const emailMatch =
        member.email && member.email.toLowerCase().includes(term);

      // Search in AI model (handle both possible field names)
      const currentModel = member.current_modal || member.current_model || "";

      // Convert model ID to display name for search
      const modelDisplayNames = {
        "deepseek-r1": "DeepSeek R1",
        "deepseek-chat": "DeepSeek Chat",
        chatgpt: "ChatGPT",
        "claude-3.5": "Claude 3.5",
        "claude-4.0": "Claude 4.0",
      };

      const modelDisplayName = modelDisplayNames[currentModel] || currentModel;
      const modelMatch =
        modelDisplayName.toLowerCase().includes(term) ||
        currentModel.toLowerCase().includes(term);

      console.log(
        `👤 ${member.name}: name=${nameMatch}, email=${emailMatch}, model=${modelMatch}`
      );

      return nameMatch || emailMatch || modelMatch;
    });

    console.log(
      `🔍 Filtered ${allTeamMembers.length} members to ${filteredMembers.length}`
    );
  }

  // Use the existing function to display the filtered results
  displayTeamMembersWithPromptsFixed(filteredMembers, currentUserRole);

  // Update the total count if there's a search
  if (searchTerm && searchTerm.trim()) {
    updateSearchResultsCount(filteredMembers.length, allTeamMembers.length);
  } else {
    clearSearchResultsCount();
  }
}

function updateSearchResultsCount(filteredCount, totalCount) {
  console.log(`📊 updateSearchResultsCount: ${filteredCount}/${totalCount}`);

  // Remove existing search results indicator
  $(".search-results-indicator").remove();

  // Add search results indicator
  const $indicator = $(`
    <div class="search-results-indicator" style="
      padding: 0.75rem 1rem;
      margin-bottom: 1rem;
      background: #f0f9ff;
      border: 1px solid #e0f2fe;
      border-radius: 8px;
      font-size: 0.875rem;
      color: #0369a1;
    ">
      <span style="font-weight: 500;">Search Results:</span> 
      Showing ${filteredCount} of ${totalCount} team members
      ${
        filteredCount === 0
          ? '<span style="color: #dc2626; margin-left: 0.5rem;">No matches found</span>'
          : ""
      }
    </div>
  `);

  $("#team-members-container").before($indicator);
}

// Function to clear search results count
function clearSearchResultsCount() {
  $(".search-results-indicator").remove();
}

// Debounce function for search input
function debounceSearch(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Create debounced search function
const debouncedMemberSearch = debounceSearch(function (searchTerm) {
  console.log("🔍 Debounced search executing for:", searchTerm);
  displayFilteredTeamMembers(searchTerm);
}, 300);

// Function to handle member search
function handleMemberSearch() {
  const searchTerm = $("#member-search-input").val();
  console.log("🔍 handleMemberSearch() called with term:", searchTerm);

  // Use debounced search to avoid too many filter operations
  debouncedMemberSearch(searchTerm);
}

// Function to clear member search
function clearMemberSearch() {
  console.log("🧹 clearMemberSearch() called");

  $("#member-search-input").val("");
  displayFilteredTeamMembers();
}

// Search input listener
$(document).on("input", "#member-search-input", function () {
  console.log("🔍 Member search input changed");
  handleMemberSearch();
});

// Enter key listener
$(document).on("keypress", "#member-search-input", function (e) {
  if (e.which === 13) {
    // Enter key
    console.log("🔍 Enter key pressed in member search");
    handleMemberSearch();
  }
});

// Clear search when input is completely empty
$(document).on("keyup", "#member-search-input", function () {
  const searchTerm = $(this).val();
  if (searchTerm === "") {
    console.log("🧹 Search input cleared, showing all members");
    clearMemberSearch();
  }
});

// Update team information display
function updateTeamInfo(teamInfo) {
  console.log("📝 updateTeamInfo() called with:", teamInfo);

  $("#team-name-text").text(teamInfo.name || "Unnamed Team");
  $("#team-description-text").text(
    teamInfo.description || "No description provided"
  );

  console.log("✅ Team info updated");
}
function setupTeamEditPermissions(userRole) {
  console.log("🔐 setupTeamEditPermissions() called with role:", userRole);
  console.log("🔍 currentUser before assignment:", currentUser);

  // Store the user role for use in other functions
  if (currentUser) {
    console.log(
      "🔄 Setting currentUser.team_role from",
      currentUser.team_role,
      "to",
      userRole
    );
    currentUser.team_role = userRole;
    console.log(
      "✅ currentUser.team_role after assignment:",
      currentUser.team_role
    );

    // ADDITIONAL: Update localStorage to persist the role
    localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));
    console.log("💾 Updated localStorage with new team_role");

    // ✨ ADD THIS CALL HERE
    ensureTeamRoleConsistency();
  } else {
    console.error("❌ currentUser is null/undefined - cannot set team_role");
    console.log("🔍 Attempting to find currentUser in localStorage...");

    // Fallback: try to get from localStorage
    const storedUser = localStorage.getItem("Micro_Learner_user");
    if (storedUser) {
      try {
        currentUser = JSON.parse(storedUser);
        currentUser.team_role = userRole;
        localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));
        console.log(
          "🔄 Restored currentUser from localStorage and set team_role"
        );
      } catch (e) {
        console.error("❌ Failed to parse stored user data:", e);
      }
    }
  }

  if (userRole === "admin") {
    $("#edit-team-name-btn").show();
    $("#edit-team-description-btn").show();
    $("#invite-member-btn").show();
    console.log("✅ Edit permissions enabled for team lead");
  } else {
    $("#edit-team-name-btn").hide();
    $("#edit-team-description-btn").hide();
    $("#invite-member-btn").hide();
    console.log("🔒 Edit permissions disabled for team member");
  }
}

function displayTeamMembersWithPromptsFixed(members, fallbackRole = null) {
  console.log(
    "👥 displayTeamMembersWithPromptsFixed() called with",
    members.length,
    "members"
  );
  console.log("🔐 Fallback role parameter:", fallbackRole);

  const $container = $("#team-members-container");
  $container.empty();

  if (members.length === 0) {
    $container.html(
      '<div class="no-results">No team members found matching your search</div>'
    );
    return;
  }

  // Try multiple ways to get the user role
  let currentUserRole = currentUser?.team_role || fallbackRole || "member";

  console.log("🔐 Role resolution:");
  console.log("  - currentUser?.team_role:", currentUser?.team_role);
  console.log("  - fallbackRole:", fallbackRole);
  console.log("  - Final role used:", currentUserRole);

  // Double-check: if we still don't have admin role but fallback says admin, use fallback
  if (currentUserRole === "member" && fallbackRole === "admin") {
    console.log("🔧 Using fallback role instead of stored role");
    currentUserRole = fallbackRole;
  }

  if (!currentUser?.team_role) {
    console.warn(
      "⚠️ WARNING: currentUser.team_role is still not set - using fallback role"
    );
  }

  let displayedMembersCount = 0;

  members.forEach((member, index) => {
    // ✨ NEW: Skip rendering card for current user
    if (
      currentUser &&
      (member.email === currentUser.email || member.id === currentUser.id)
    ) {
      console.log(`👤 Skipping current user: ${member.name} (${member.email})`);
      return; // Skip this iteration
    }

    displayedMembersCount++;
    console.log(`👤 Processing team member ${index + 1}:`, member.name);
    console.log(
      `🤖 Member current model:`,
      member.current_modal || member.current_model || "Not specified"
    );

    const initials = member.name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase();

    const statusClass =
      member.role === "admin"
        ? "admin"
        : member.status === "pending"
        ? "pending"
        : "member";

    // Show remove button if: member is not admin AND current user is admin
    const showRemoveButton =
      member.role !== "admin" && currentUserRole === "admin";

    console.log(`🗑️ Remove button for ${member.name}: ${showRemoveButton}`);
    console.log(`   - member.role: "${member.role}"`);
    console.log(`   - currentUserRole: "${currentUserRole}"`);
    console.log(`   - member.role !== "admin": ${member.role !== "admin"}`);
    console.log(
      `   - currentUserRole === "admin": ${currentUserRole === "admin"}`
    );

    // Get the current AI model (handle both possible field names)
    const currentModel =
      member.current_modal || member.current_model || "Not specified";

    // Convert model ID to display name
    const modelDisplayNames = {
      "deepseek-r1": "DeepSeek R1",
      "deepseek-chat": "DeepSeek Chat",
      chatgpt: "ChatGPT",
      "claude-3.5": "Claude 3.5",
      "claude-4.0": "Claude 4.0",
    };

    const modelDisplayName = modelDisplayNames[currentModel] || currentModel;

    const $memberCard = $(`
      <div class="team-member-card" data-member-id="${member.id}">
        <div class="team-member-header">
          <div class="team-member-info">
            <div class="team-member-name-row">
              <div class="team-member-avatar">${initials}</div>
              <h5>${member.name}</h5>
            </div>
            <div class="team-member-details">
              <p>${member.email}</p>
              <!--<div class="team-member-model">
                <span class="model-label">AI Model:</span>
                <span class="model-badge">${modelDisplayName}</span>
              </div>-->
            </div>
          </div>
          <div class="team-member-role-badge">
            <span class="status-badge ${statusClass}">
              ${
                member.role === "admin"
                  ? "Team Lead"
                  : member.status === "pending"
                  ? "Pending"
                  : "Member"
              }
            </span>
          </div>
        </div>
        
        <div class="team-member-actions">
          ${
            showRemoveButton
              ? `<button class="team-action-btn danger" onclick="removeMember(${member.id})">🗑️ Remove</button>`
              : `<!-- No remove button: member.role="${member.role}", currentUserRole="${currentUserRole}" -->`
          }
        </div>
        
        <!--<div class="team-member-prompt">
          <h6>Micro Training</h6>
          <div class="team-member-prompt-text ${
            !member.pre_prompt ? "team-member-prompt-empty" : ""
          }">
            ${member.pre_prompt || "No custom Micro Training configured"}
          </div>
        </div>-->
      </div>
    `);

    $container.append($memberCard);
  });

  // ✨ NEW: Check if any members were actually displayed after filtering
  if (displayedMembersCount === 0) {
    $container.html('<div class="no-results">No other team members</div>');
    console.log(
      "ℹ️ No team members to display after filtering out current user"
    );
    return;
  }

  console.log(
    "✅ Team members with prompts and AI models displayed successfully (current user hidden)"
  );
}

// VERIFICATION: Add a check in displayTeamMembersWithPrompts
function displayTeamMembersWithPrompts(members) {
  console.log(
    "👥 displayTeamMembersWithPrompts() called with",
    members.length,
    "members"
  );

  // VERIFY role is available
  const currentUserRole = currentUser?.team_role || "member";
  console.log("🔐 Using role for member permissions:", currentUserRole);

  if (!currentUser?.team_role) {
    console.warn(
      "⚠️ WARNING: currentUser.team_role is not set - remove buttons may not work correctly"
    );
  }

  const $container = $("#team-members-container");
  $container.empty();

  if (members.length === 0) {
    $container.html(
      '<div class="no-results">No team members found matching your search</div>'
    );
    return;
  }

  members.forEach((member, index) => {
    console.log(`👤 Processing team member ${index + 1}:`, member.name);

    const initials = member.name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase();

    const statusClass =
      member.role === "admin"
        ? "admin"
        : member.status === "pending"
        ? "pending"
        : "member";

    // Clearer logic for remove button
    const showRemoveButton =
      member.role !== "admin" && currentUserRole === "admin";

    console.log(
      `🗑️ Remove button for ${member.name}: ${showRemoveButton} (member.role: "${member.role}", currentUserRole: "${currentUserRole}")`
    );

    const $memberCard = $(`
      <div class="team-member-card" data-member-id="${member.id}">
        <div class="team-member-header">
          <div class="team-member-info">
            <div class="team-member-name-row">
              <div class="team-member-avatar">${initials}</div>
              <h5>${member.name}</h5>
            </div>
            <div class="team-member-details">
              <p>${member.email}</p>
            </div>
          </div>
          <div class="team-member-role-badge">
            <span class="status-badge ${statusClass}">
              ${
                member.role === "admin"
                  ? "Team Lead"
                  : member.status === "pending"
                  ? "Pending"
                  : "Member"
              }
            </span>
          </div>
        </div>
        
        <div class="team-member-actions">
          ${
            showRemoveButton
              ? `<button class="team-action-btn danger" onclick="removeMember(${member.id})">🗑️ Remove</button>`
              : ""
          }
        </div>
        
        <!--<div class="team-member-prompt">
          <h6>Micro Training</h6>
          <div class="team-member-prompt-text ${
            !member.pre_prompt ? "team-member-prompt-empty" : ""
          }">
            ${member.pre_prompt || "No custom Micro Training configured"}
          </div>
        </div>-->
      </div>
    `);

    $container.append($memberCard);
  });

  console.log("✅ Team members with prompts displayed successfully");
}

function filterMembers(searchTerm) {
  if (!searchTerm.trim()) {
    filteredMembers = allMembers;
  } else {
    const term = searchTerm.toLowerCase();
    filteredMembers = allMembers.filter(
      (member) =>
        member.name.toLowerCase().includes(term) ||
        member.email.toLowerCase().includes(term) ||
        member.model.toLowerCase().includes(term)
    );
  }
  displayTeamMembersWithPrompts(filteredMembers);
}

// Update team statistics
function updateTeamStatistics(stats) {
  console.log("📊 updateTeamStatistics() called with:", stats);

  $("#total-members-count").text(stats.total_members || 0);
  $("#total-team-usage").text(stats.total_usage || 0);
  $("#avg-usage-per-member").text(stats.avg_usage_per_member || 0);

  console.log("✅ Team statistics updated");
}

// Team name editing functions
function editTeamName() {
  console.log("✏️ editTeamName() called");

  const currentName = $("#team-name-text").text();
  $("#team-name-input").val(currentName);

  $("#team-name-display").hide();
  $("#team-name-edit").show();
  $("#team-name-input").focus();
}

function saveTeamName() {
  console.log("💾 saveTeamName() called");

  const newName = $("#team-name-input").val().trim();

  if (!newName) {
    showToast("Team name cannot be empty", "error");
    return;
  }

  // Add character limit validation (30 characters)
  if (newName.length > 30) {
    showToast("Team name cannot exceed 30 characters", "error");
    return;
  }

  console.log("📝 Saving team name:", newName);

  $.ajax({
    url: `${API_BASE_URL}/dashboard/team_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      action: "update_team_name",
      team_name: newName,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for saveTeamName");
      console.log("📋 Request data:", {
        action: "update_team_name",
        team_name: newName,
      });
    },
    success: function (response) {
      console.log("🎯🎯🎯 SAVE TEAM NAME RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Team name saved successfully");
        $("#team-name-text").text(newName);
        cancelTeamNameEdit();
        showToast("Team name updated!", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 SAVE TEAM NAME ERROR from team_tab.php:", {
        xhr,
        status,
        error,
      });
      showToast("Error updating team name", "error");
    },
  });
}

function cancelTeamNameEdit() {
  console.log("❌ cancelTeamNameEdit() called");

  $("#team-name-display").show();
  $("#team-name-edit").hide();
}

// Team description editing functions
function editTeamDescription() {
  console.log("✏️ editTeamDescription() called");

  const currentDescription = $("#team-description-text").text();
  $("#team-description-input").val(
    currentDescription === "Team description" ? "" : currentDescription
  );

  $("#team-description-display").hide();
  $("#team-description-edit").show();
  $("#team-description-input").focus();
}

function saveTeamDescription() {
  console.log("💾 saveTeamDescription() called");

  const newDescription = $("#team-description-input").val().trim();

  // Add character limit validation (400 characters)
  if (newDescription.length > 400) {
    showToast("Team description cannot exceed 400 characters", "error");
    return;
  }

  console.log("📝 Saving team description:", newDescription);

  $.ajax({
    url: `${API_BASE_URL}/dashboard/team_tab.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      action: "update_team_description",
      team_description: newDescription,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for saveTeamDescription");
      console.log("📋 Request data:", {
        action: "update_team_description",
        team_description: newDescription,
      });
    },
    success: function (response) {
      console.log("🎯🎯🎯 SAVE TEAM DESCRIPTION RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Team description saved successfully");
        $("#team-description-text").text(
          newDescription || "No description provided"
        );
        cancelTeamDescriptionEdit();
        showToast("Team description updated!", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 SAVE TEAM DESCRIPTION ERROR from team_tab.php:", {
        xhr,
        status,
        error,
      });
      showToast("Error updating team description", "error");
    },
  });
}

function cancelTeamDescriptionEdit() {
  console.log("❌ cancelTeamDescriptionEdit() called");

  $("#team-description-display").show();
  $("#team-description-edit").hide();
}

// View member activity
function viewMemberActivity(memberId) {
  console.log("📊 viewMemberActivity() called for member:", memberId);

  // Implementation for viewing member activity
  showToast(`Viewing activity for member ${memberId}`, "info");
}

// Update the existing loadTeamMembers function to use the new enhanced version
function loadTeamMembers() {
  console.log("👥 loadTeamMembers() called - using enhanced team data loader");
  loadTeamData();
}

// ================== ENTERPRISE INVITE MODAL FUNCTIONS ==================

function showEnterpriseInviteModal(invites) {
  console.log(
    "👥 showEnterpriseInviteModal() called with",
    invites.length,
    "invites"
  );

  if (!invites || invites.length === 0) {
    console.log("ℹ️ No invites to display");
    return;
  }

  // Show multiple invites notice if more than one invite
  if (invites.length > 1) {
    $("#multiple-invites-notice").show();
    $("#decline-all-invites-btn").show();
    console.log("📋 Multiple invites detected, showing notice");
  } else {
    $("#multiple-invites-notice").hide();
    $("#decline-all-invites-btn").hide();
  }

  // Populate invites list
  displayEnterpriseInvites(invites);

  // Show the modal
  $("#enterprise-invite-modal").addClass("active");
  console.log("✅ Enterprise invite modal shown");
}

function displayEnterpriseInvites(invites) {
  console.log(
    "📋 displayEnterpriseInvites() called with",
    invites.length,
    "invites"
  );

  const $invitesList = $("#enterprise-invites-list");
  $invitesList.empty();

  if (invites.length === 0) {
    $invitesList.html(`
      <div class="enterprise-invites-empty">
        <div class="enterprise-invites-empty-icon">👥</div>
        <p>No pending team invitations</p>
      </div>
    `);
    return;
  }

  invites.forEach((invite, index) => {
    console.log(`👤 Processing invite ${index + 1}:`, invite);

    const $inviteCard = $(`
      <div class="invite-card" data-invite-id="${
        invite.invite_id
      }" data-team-id="${invite.team_id}">
        <div class="invite-header">
          <div class="team-icon">🏢</div>
          <div class="invite-info">
            <h3>${escapeHtml(invite.team_name)}</h3>
            <p>Invited by ${escapeHtml(invite.team_leader_name)}</p>
          </div>
        </div>

        <div class="invite-details">
          <div class="detail-row">
            <span class="detail-label">Team Leader</span>
            <span class="detail-value">${escapeHtml(
              invite.team_leader_name
            )}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Plan</span>
            <span class="detail-value">
              <span class="plan-badge">Enterprise</span>
            </span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Team Size</span>
            <span class="detail-value">${
              invite.team_size || "Multiple"
            } members</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Features</span>
            <span class="detail-value">Full access, shared prompts, team analytics</span>
          </div>
        </div>

        <div class="invite-actions">
          <button class="btn btn-accept" onclick="acceptEnterpriseInvite(${
            invite.invite_id
          }, ${invite.team_id}, '${escapeHtml(invite.team_name)}')">
            Accept Invitation
          </button>
          <button class="btn btn-decline" onclick="declineEnterpriseInvite(${
            invite.invite_id
          }, '${escapeHtml(invite.team_name)}')">
            Decline
          </button>
        </div>
      </div>
    `);

    $invitesList.append($inviteCard);
  });

  console.log("✅ Enterprise invites displayed successfully");
}

function closeEnterpriseInviteModal() {
  console.log("❌ closeEnterpriseInviteModal() called");

  $("#enterprise-invite-modal").removeClass("active");
  console.log("✅ Enterprise invite modal closed");
}

// Modified handleLogin function - add this check after successful login
function checkForEnterpriseInvitesAfterAuth(authResponse) {
  console.log("🔍 checkForEnterpriseInvitesAfterAuth() called");

  if (
    authResponse &&
    authResponse.enterprise_invites &&
    authResponse.enterprise_invites.length > 0
  ) {
    console.log("👥 Enterprise invites found, showing modal");

    // Small delay to ensure dashboard is loaded
    setTimeout(() => {
      showEnterpriseInviteModal(authResponse.enterprise_invites);
    }, 500);
  } else {
    console.log("ℹ️ No enterprise invites found");
  }
}

// ================== EVENT LISTENERS FOR ENTERPRISE INVITE MODAL ==================

// Helper function to escape HTML to prevent XSS
function escapeHtml(text) {
  if (!text) return "";
  const map = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#039;",
  };
  return text.replace(/[&<>"']/g, function (m) {
    return map[m];
  });
}
function leaveTeam() {
  console.log("🚪 leaveTeam() called");

  // First confirmation dialog
  if (
    !confirm(
      "Are you sure you want to leave this team? This action will:\n\n• Remove you from the team immediately\n• Downgrade your account to the Free plan\n• You'll lose access to Enterprise features\n• The team leader can invite you back later if desired"
    )
  ) {
    console.log("❌ User cancelled team leave");
    return;
  }

  // Get password confirmation from user for security - UPDATED for Google users
  const password = prompt(
    "Security verification required. Please enter your password, or if you use Google login, enter 'CONFIRM' to proceed:"
  );

  if (!password) {
    console.log("❌ User cancelled - no password provided");
    return;
  }

  // Final confirmation with detailed explanation
  if (
    !confirm(
      "FINAL CONFIRMATION: You will be removed from the team and downgraded to the Free plan.\n\n" +
        "📋 What will happen:\n" +
        "• You'll be removed from the team immediately\n" +
        "• Your account will be downgraded to Free plan\n" +
        "• You'll lose access to Enterprise features\n" +
        "• Your memories will be preserved but limited to 3K words\n" +
        "• The team leader will be notified of your departure\n\n" +
        "Continue with leaving the team?"
    )
  ) {
    console.log("❌ User cancelled final confirmation");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/leave_team.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/leave_team.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      password: password,
      confirm_leave: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for leaveTeam");
      console.log("📋 Request data:", {
        password: password,
        confirm_leave: true,
      });
    },
    success: function (response) {
      console.log("🎯🎯🎯 LEAVE TEAM RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Left team successfully");

        const leaveDetails = response.data || response;

        let successMessage =
          "✅ Successfully Left Team\n\n" +
          "You have been removed from the team and your account has been updated.\n\n" +
          "📋 What happened:\n" +
          "• You were removed from the team\n" +
          "• Your account was downgraded to Free plan\n" +
          "• The team leader was notified\n" +
          "• Your memories are preserved (limited to 3K words on Free plan)\n\n";

        if (leaveDetails.new_plan) {
          successMessage += `Your account is now on the ${leaveDetails.new_plan} plan.\n\n`;
        }

        successMessage +=
          "💡 You can upgrade anytime to restore full memory access or join another team!";

        alert(successMessage);

        // Update the current user data to reflect plan change
        if (currentUser) {
          currentUser.plan = leaveDetails.new_plan || "Free";
          currentUser.team_role = null;
          localStorage.setItem(
            "Micro_Learner_user",
            JSON.stringify(currentUser)
          );
        }

        // Refresh the dashboard to reflect changes
        initializeDashboard(currentUser?.plan || "free");
        showDashboard();
        loadDashboardData();

        // Update danger zone buttons
        updateDangerZoneButtons();

        // Show billing section to see updated plan
        showSection("billing");

        showToast("Successfully left team", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 LEAVE TEAM ERROR:", { xhr, status, error });

      let errorMessage = "An error occurred while leaving the team.";

      if (xhr.responseJSON) {
        if (xhr.responseJSON.error) {
          errorMessage = xhr.responseJSON.error;
        } else if (xhr.responseJSON.debug && xhr.responseJSON.exception) {
          errorMessage = `Leave team failed: ${xhr.responseJSON.exception}`;
          console.log("Debug info:", xhr.responseJSON.debug);
        }
      } else if (xhr.responseText) {
        try {
          const parsed = JSON.parse(xhr.responseText);
          if (parsed.error) {
            errorMessage = parsed.error;
          } else if (parsed.debug && parsed.exception) {
            errorMessage = `Leave team failed: ${parsed.exception}`;
            console.log("Debug info:", parsed.debug);
          }
        } catch (e) {
          if (xhr.status === 401) {
            errorMessage = "Session expired. Please log in again.";
          } else if (xhr.status === 403) {
            errorMessage = "You don't have permission to leave this team.";
          } else if (xhr.status === 500) {
            errorMessage = "Server error occurred while leaving team.";
          } else if (xhr.status === 400) {
            errorMessage =
              "Invalid request. Please check your information and try again.";
          }
        }
      }

      alert(errorMessage);
      showToast(errorMessage, "error");
    },
  });
}

// Function to update danger zone button visibility
function updateDangerZoneButtons() {
  console.log("⚠️ updateDangerZoneButtons() called");
  console.log("👤 Current user plan:", currentUser?.plan);
  console.log("👥 Current user team role:", currentUser?.team_role);

  const userPlan = (currentUser?.plan || "free").toLowerCase().trim();
  const userTeamRole = currentUser?.team_role || null;

  console.log("🔍 Normalized plan:", userPlan);
  console.log("🔍 Normalized team role:", userTeamRole);

  // Show Cancel Plan button only for paid plans (not free)
  if (userPlan !== "free" && userPlan !== "" && userPlan !== "null") {
    $("#cancel-plan-btn").show();
    console.log("💳 Cancel plan button shown for paid plan:", userPlan);
  } else {
    $("#cancel-plan-btn").hide();
    console.log("🆓 Cancel plan button hidden for free plan");
  }

  // ✨ NEW: Show Leave Team button for enterprise members (not admins)
  if (userPlan === "enterprise" && userTeamRole === "member") {
    $("#leave-team-btn").show();
    $("#delete-team-btn").hide();
    console.log("👥 Leave team button shown for enterprise team member");
  } else {
    $("#leave-team-btn").hide();
    console.log("🔒 Leave team button hidden - not an enterprise member");
  }

  // ✨ UPDATED: Show Delete Team button for enterprise admin users
  if (userPlan === "enterprise" && userTeamRole === "admin") {
    $("#delete-team-btn").show();
    $("#leave-team-btn").hide();
    console.log("👥 Delete team button shown for enterprise team admin");
  } else if (userTeamRole !== "member") {
    $("#delete-team-btn").hide();
    console.log(
      `🔒 Delete team button hidden - Plan: ${userPlan}, Role: ${userTeamRole}`
    );
  }
}

function deleteTeam() {
  console.log("🗑️ deleteTeam() called");

  // First confirmation dialog
  if (
    !confirm(
      "Are you sure you want to delete your team? This action will remove all team members and demote everyone to the free plan.\n\nYou'll choose the timing in the next step."
    )
  ) {
    console.log("❌ User cancelled team deletion");
    return;
  }

  // FIRST: Ask for deletion timing preference (before security confirmations)
  const deletionChoice = confirm(
    "⏰ CHOOSE DELETION TIMING\n\n" +
      "When would you like to delete the team?\n\n" +
      "Click 'OK' for IMMEDIATE DELETION (right now)\n" +
      "Click 'Cancel' for END OF BILLING PERIOD deletion\n\n" +
      "═══════════════════════════════════════\n\n" +
      "🔥 IMMEDIATE DELETION:\n" +
      "• Team deleted right now\n" +
      "• All members downgraded immediately\n" +
      "• Enterprise access stops today\n" +
      "• No refunds provided\n\n" +
      "📅 END OF BILLING PERIOD:\n" +
      "• Team continues until your subscription expires\n" +
      "• Automatic deletion when billing period ends\n" +
      "• You keep Enterprise features until then\n" +
      "• Can cancel scheduled deletion if needed\n" +
      "• ⚠️ WARNING: Possible additional monthly charges for team members if their billing cycles don't align with deletion date"
  );

  const deletionTiming = deletionChoice ? "immediate" : "end_of_period";
  console.log("⏰ User selected deletion timing:", deletionTiming);

  // Show timing-specific confirmation message
  const timingConfirmMessage =
    deletionTiming === "immediate"
      ? "You selected IMMEDIATE DELETION.\n\n" +
        "Your team will be deleted right now and all members will be downgraded immediately.\n\n" +
        "Continue with the security confirmation steps?"
      : "You selected END OF BILLING PERIOD deletion.\n\n" +
        "Your team will be scheduled for automatic deletion when your subscription expires. " +
        "You'll keep Enterprise features until then and can cancel this scheduled deletion if needed.\n\n" +
        "⚠️ BILLING WARNING: There is a possibility that you might still incur some monthly subscription charges for your team members' monthly plans if their individual billing cycles don't align perfectly with your team deletion date.\n\n" +
        "Continue with the security confirmation steps?";

  if (!confirm(timingConfirmMessage)) {
    console.log("❌ User cancelled after timing selection");
    return;
  }

  // NOW: Get password confirmation
  const password = prompt(
    `🔐 SECURITY CONFIRMATION\n\n` +
      `You selected: ${
        deletionTiming === "immediate"
          ? "IMMEDIATE DELETION"
          : "END OF BILLING PERIOD DELETION"
      }\n\n` +
      `Please enter your password, or if you use Google login, enter 'CONFIRM' to proceed:`
  );

  if (!password) {
    console.log("❌ User cancelled - no password provided");
    return;
  }

  // Get confirmation text for extra security
  const confirmationText = prompt(
    `📝 FINAL SECURITY CHECK\n\n` +
      `Deletion timing: ${
        deletionTiming === "immediate" ? "IMMEDIATE" : "END OF BILLING PERIOD"
      }\n\n` +
      `To confirm team deletion, please type exactly: DELETE TEAM`
  );

  if (confirmationText !== "DELETE TEAM") {
    console.log("❌ Invalid confirmation text provided:", confirmationText);
    alert(
      "❌ Invalid confirmation text.\n\nYou must type exactly 'DELETE TEAM' to proceed.\n\nDeletion cancelled for security."
    );
    return;
  }

  // Final confirmation with timing-specific details
  const finalConfirmationMessage =
    deletionTiming === "immediate"
      ? "🔥 FINAL CONFIRMATION: IMMEDIATE DELETION\n\n" +
        "This will permanently delete your team RIGHT NOW.\n\n" +
        "📋 What will happen immediately:\n" +
        "• All team members removed from the team\n" +
        "• Everyone downgraded from Enterprise plan\n" +
        "• Enterprise features stop immediately\n" +
        "• This action cannot be undone\n" +
        "• No refunds will be provided\n\n" +
        "⚠️ PROCEED WITH IMMEDIATE TEAM DELETION?"
      : "📅 FINAL CONFIRMATION: SCHEDULED DELETION\n\n" +
        "Your team will be scheduled for deletion at the end of your billing period.\n\n" +
        "📋 What will happen:\n" +
        "• Team continues normally until billing period ends\n" +
        "• All Enterprise features remain active until then\n" +
        "• Automatic deletion when billing expires\n" +
        "• All members downgraded when deletion occurs\n" +
        "• You can cancel this scheduled deletion before it happens\n\n" +
        "⚠️ BILLING WARNING: There is a possibility that you might still incur some monthly subscription charges for your team members' monthly plans if their individual billing cycles don't align perfectly with your team deletion date.\n\n" +
        "✅ PROCEED WITH SCHEDULED TEAM DELETION?";

  if (!confirm(finalConfirmationMessage)) {
    console.log("❌ User cancelled final confirmation");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/delete_team.php`
  );

  $.ajax({
    url: `${API_BASE_URL}/dashboard/delete_team.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      password: password,
      confirmation: confirmationText,
      deletion_timing: deletionTiming,
      confirm_deletion: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for deleteTeam");
      console.log("📋 Request data:", {
        password: password,
        confirmation: confirmationText,
        deletion_timing: deletionTiming,
        confirm_deletion: true,
      });
    },
    success: function (response) {
      console.log("🎯🎯🎯 DELETE TEAM RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Team deletion request processed successfully");

        const deletionDetails = response.data || response;

        let successMessage;

        if (deletionTiming === "immediate") {
          successMessage =
            "🔥 TEAM DELETED IMMEDIATELY\n\n" +
            "Your team has been permanently deleted and all members have been notified.\n\n" +
            "📋 What happened:\n" +
            "• All team members were removed from the team\n" +
            "• Team configurations have been deleted\n" +
            "• Everyone has been downgraded to Free plan\n" +
            "• Enterprise features have been disabled\n" +
            "• Your plan has been updated\n\n";

          if (deletionDetails.new_plan) {
            successMessage += `Your account is now on the ${deletionDetails.new_plan} plan.\n\n`;
          }

          successMessage +=
            "Thank you for using our Enterprise features. You can upgrade again anytime!";

          // 🔥 COMPREHENSIVE REINITIALIZATION after immediate team deletion
          console.log(
            "🔄 Starting comprehensive reinitialization after team deletion"
          );

          // 1. Update currentUser data completely
          if (currentUser) {
            console.log("👤 Updating currentUser data after team deletion");
            currentUser.plan = deletionDetails.new_plan || "Free";
            currentUser.team_role = null; // Clear team role

            // Store updated user data
            localStorage.setItem(
              "Micro_Learner_user",
              JSON.stringify(currentUser)
            );

            // ✨ NEW: Update auth cookies with new user data
            setCookie("current_user", JSON.stringify(currentUser));
            console.log("🍪 Updated user cookies after team deletion");
          }

          // 2. Close the modal first (if we're in one)
          closeModal("upgrade-modal");
          closeModal("choose-plan-modal");

          // 3. Complete dashboard reinitialization (with delay for better UX)
          setTimeout(() => {
            console.log("🔄 Reinitializing dashboard after team deletion");

            // Reinitialize dashboard with new plan restrictions
            initializeDashboard(currentUser?.plan || "Free");

            // Show dashboard
            showDashboard();

            // Load all dashboard data fresh
            loadDashboardData();

            // Update danger zone buttons for new plan
            updateDangerZoneButtons();

            // Show billing section to see updated plan
            showSection("billing");

            console.log(
              "✅ Dashboard reinitialization complete after team deletion"
            );
          }, 1000);
        } else {
          // Scheduled deletion
          const scheduledDate = deletionDetails.scheduled_deletion_date
            ? new Date(
                deletionDetails.scheduled_deletion_date
              ).toLocaleDateString()
            : "end of your billing period";

          successMessage =
            "📅 TEAM DELETION SCHEDULED\n\n" +
            `Your team has been scheduled for deletion on ${scheduledDate}.\n\n` +
            "📋 What happens next:\n" +
            "• Your team continues normally until deletion date\n" +
            "• All Enterprise features remain active until then\n" +
            "• Team members will be notified before deletion\n" +
            "• All members will be downgraded to Free plan when deletion happens\n\n" +
            "⚠️ BILLING REMINDER: Please note that there may be additional monthly subscription charges for team members if their individual billing cycles don't align with the deletion date.\n\n" +
            "🔄 CANCELLATION OPTION:\n" +
            "You can cancel this scheduled deletion anytime before it occurs.\n" +
            "Look for the cancellation option in your billing section.\n\n" +
            "💡 Your team remains fully functional until the scheduled deletion date!";

          // For scheduled deletion, refresh billing info to show the scheduled change
          loadBillingInfo();
        }

        alert(successMessage);
        showToast(
          deletionTiming === "immediate"
            ? "Team deleted immediately"
            : "Team deletion scheduled successfully",
          "success"
        );
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 DELETE TEAM ERROR:", { xhr, status, error });

      let errorMessage = "An error occurred during team deletion.";

      if (xhr.responseJSON) {
        if (xhr.responseJSON.error) {
          errorMessage = xhr.responseJSON.error;
        } else if (xhr.responseJSON.debug && xhr.responseJSON.exception) {
          errorMessage = `Team deletion failed: ${xhr.responseJSON.exception}`;
          console.log("Debug info:", xhr.responseJSON.debug);
        }
      } else if (xhr.responseText) {
        try {
          const parsed = JSON.parse(xhr.responseText);
          if (parsed.error) {
            errorMessage = parsed.error;
          } else if (parsed.debug && parsed.exception) {
            errorMessage = `Team deletion failed: ${parsed.exception}`;
            console.log("Debug info:", parsed.debug);
          }
        } catch (e) {
          if (xhr.status === 401) {
            errorMessage = "Session expired. Please log in again.";
          } else if (xhr.status === 403) {
            errorMessage = "You don't have permission to delete this team.";
          } else if (xhr.status === 500) {
            errorMessage = "Server error occurred during team deletion.";
          } else if (xhr.status === 400) {
            errorMessage =
              "Invalid request. Please check your information and try again.";
          }
        }
      }

      alert("❌ " + errorMessage);
      showToast(errorMessage, "error");
    },
  });
}
function cancelScheduledPlanChange() {
  console.log("🔄 cancelScheduledPlanChange() called");

  // First confirmation dialog
  if (
    !confirm(
      "Are you sure you want to cancel your scheduled plan change? This will keep your current plan active and remove the scheduled downgrade."
    )
  ) {
    console.log("❌ User cancelled scheduled plan change cancellation");
    return;
  }

  // Get security confirmation from user
  const password = prompt(
    "Security verification required. Please enter your password, or if you use Google login, enter 'CONFIRM' to proceed:"
  );

  if (!password) {
    console.log("❌ User cancelled - no confirmation provided");
    return;
  }

  // Final confirmation with detailed explanation
  if (
    !confirm(
      "FINAL CONFIRMATION: Cancel your scheduled plan change?\n\n" +
        "📋 What will happen:\n" +
        "• Your scheduled plan change will be cancelled\n" +
        "• Your current plan will continue at the next billing cycle\n" +
        "• No changes to your current subscription\n" +
        "• You can schedule a new plan change anytime\n\n" +
        "Continue with cancelling the scheduled plan change?"
    )
  ) {
    console.log("❌ User cancelled final confirmation");
    return;
  }

  console.log(
    "🌐 Making AJAX request to:",
    `${API_BASE_URL}/dashboard/cancel_scheduled_plan_change.php`
  );

  // Show loading state
  const originalButtonText = $("#cancel-scheduled-change-btn").text();
  $("#cancel-scheduled-change-btn")
    .prop("disabled", true)
    .text("Cancelling...");

  $.ajax({
    url: `${API_BASE_URL}/dashboard/cancel_scheduled_plan_change.php`,
    method: "POST",
    dataType: "json",
    data: JSON.stringify({
      password: password,
      confirm_cancellation: true,
    }),
    contentType: "application/json",
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for cancelScheduledPlanChange");
      console.log("📋 Request data:", {
        password: password,
        confirm_cancellation: true,
      });
    },
    success: function (response) {
      console.log("🎯🎯🎯 CANCEL SCHEDULED PLAN CHANGE RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Scheduled plan change cancelled successfully");

        // Show success message with cancellation details
        const cancellationDetails = response.data || response;
        const currentPlan =
          cancellationDetails.current_plan ||
          currentUser?.plan ||
          "your current plan";

        let successMessage =
          "✅ Scheduled Plan Change Cancelled Successfully\n\n" +
          `Your scheduled plan change has been cancelled and your ${currentPlan} subscription will continue normally.\n\n` +
          "📋 What happened:\n" +
          "• Scheduled plan change was cancelled\n" +
          "• Your current plan will continue at next billing cycle\n" +
          "• No changes to your current subscription\n" +
          "• You can schedule a new plan change anytime from your dashboard\n\n" +
          "💡 Your subscription will continue as normal without any changes!";

        alert(successMessage);

        // Hide the scheduled plan change row and cancel button
        $("#next-month-plan-row").hide();
        $("#cancel-scheduled-change-btn").hide();
        $("#cancel-scheduled-change-row").hide();

        // Refresh billing info to get updated status
        loadBillingInfo();

        // Show toast notification
        showToast("Scheduled plan change cancelled successfully", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 CANCEL SCHEDULED PLAN CHANGE ERROR:", {
        xhr,
        status,
        error,
      });

      let errorMessage =
        "An error occurred during scheduled plan change cancellation.";

      // Handle different response formats
      if (xhr.responseJSON) {
        // If response is already parsed JSON
        if (xhr.responseJSON.message) {
          errorMessage = xhr.responseJSON.message;
        } else if (xhr.responseJSON.error) {
          errorMessage = xhr.responseJSON.error;
        } else if (xhr.responseJSON.debug && xhr.responseJSON.exception) {
          // Handle debug mode response
          errorMessage = `Cancellation failed: ${xhr.responseJSON.exception}`;
          console.log("Debug info:", xhr.responseJSON.debug);
        }
      } else if (xhr.responseText) {
        // Try to parse response text
        try {
          const parsed = JSON.parse(xhr.responseText);
          if (parsed.message) {
            errorMessage = parsed.message;
          } else if (parsed.error) {
            errorMessage = parsed.error;
          } else if (parsed.debug && parsed.exception) {
            errorMessage = `Cancellation failed: ${parsed.exception}`;
            console.log("Debug info:", parsed.debug);
          }
        } catch (e) {
          // If parsing fails, check for specific HTTP status messages
          if (xhr.status === 401) {
            errorMessage =
              "Authentication failed. Please verify your credentials or log in again.";
          } else if (xhr.status === 405) {
            errorMessage = "Method not allowed.";
          } else if (xhr.status === 500) {
            errorMessage =
              "Server error occurred during cancellation. Please try again or contact support.";
          } else if (xhr.status === 400) {
            errorMessage =
              "Invalid request. Please check your information and try again.";
          } else if (xhr.status === 404) {
            errorMessage = "No pending scheduled plan change found.";
          }
        }
      }

      alert(errorMessage);
      showToast(errorMessage, "error");
    },
  }).always(function () {
    // Reset button state
    $("#cancel-scheduled-change-btn")
      .prop("disabled", false)
      .text(originalButtonText);
  });
}

// ================== FORGOT PASSWORD FUNCTIONS ==================

// Global variables for forgot password flow
let forgotPasswordEmail = "";
let resetToken = "";

function showForgotPassword() {
  console.log("🔐 showForgotPassword() called");

  // Close login modal and show forgot password modal
  closeModal("login-modal");
  $("#forgot-password-modal").addClass("active");

  // Reset to step 1 and clear all forms
  resetForgotPasswordModal();

  console.log("✅ Forgot password modal shown");
}

function resetForgotPasswordModal() {
  console.log("🔄 resetForgotPasswordModal() called");

  // Hide all steps
  $(".forgot-password-step").hide();

  // Show step 1
  $("#forgot-password-step-1").show();

  // Clear all form data
  $("#forgot-password-email").val("");
  $("#verification-code").val("");
  $("#new-password").val("");
  $("#confirm-new-password").val("");

  // Reset global variables
  forgotPasswordEmail = "";
  resetToken = "";

  // Reset button states
  $("#resend-code-btn").prop("disabled", false);

  console.log("✅ Forgot password modal reset to step 1");
}

function goToForgotPasswordStep(stepNumber) {
  console.log("📍 goToForgotPasswordStep() called for step:", stepNumber);

  // Hide all steps
  $(".forgot-password-step").hide();

  // Show requested step
  $(`#forgot-password-step-${stepNumber}`).show();

  console.log(`✅ Moved to forgot password step ${stepNumber}`);
}

function handleForgotPasswordEmailSubmit(e) {
  console.log("📧 handleForgotPasswordEmailSubmit() called");
  e.preventDefault();

  const email = $("#forgot-password-email").val().trim();
  console.log("📧 Email entered:", email);

  if (!email) {
    showToast("Please enter your email address", "error");
    return;
  }

  // Validate email format
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    showToast("Please enter a valid email address", "error");
    return;
  }

  // Store email globally
  forgotPasswordEmail = email;

  // Disable form and show loading
  const $submitBtn = $("#forgot-password-email-form button[type='submit']");
  const originalText = $submitBtn.text();
  $submitBtn.prop("disabled", true).text("Sending...");

  console.log("🌐 Making request to send verification code");

  // Create FormData to match your existing backend format
  const formData = new FormData();
  formData.append("verificationMethodreset", email);

  $.ajax({
    url: `${API_BASE_URL}/auth/forgot_password.php`,
    method: "POST",
    dataType: "json",
    data: formData,
    processData: false,
    contentType: false,
    beforeSend: function (xhr) {
      console.log(
        "🔐 AJAX Request initiated for handleForgotPasswordEmailSubmit"
      );
      console.log(
        "📋 Request data: FormData with verificationMethodreset =",
        email
      );
    },
    success: function (response) {
      console.log("🎯🎯🎯 FORGOT PASSWORD EMAIL RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Verification code sent successfully");

        // Update the email display in step 2
        $("#reset-email-display").text(email);

        // Move to step 2 (verification code)
        goToForgotPasswordStep(2);

        // Focus on verification code input
        setTimeout(() => {
          $("#verification-code").focus();
        }, 100);

        showToast("Verification code sent to your email", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 FORGOT PASSWORD EMAIL ERROR:", {
        xhr,
        status,
        error,
      });

      let errorMessage = "Failed to send verification code";
      if (xhr.responseJSON?.error) {
        errorMessage = xhr.responseJSON.error;
      } else if (xhr.status === 404) {
        errorMessage = "No account found with this email address";
      } else if (xhr.status === 429) {
        errorMessage = "Too many requests. Please try again later";
      }

      showToast(errorMessage, "error");
    },
  }).always(function () {
    // Re-enable form
    $submitBtn.prop("disabled", false).text(originalText);
  });
}

function handleVerificationCodeSubmit(e) {
  console.log("🔢 handleVerificationCodeSubmit() called");
  e.preventDefault();

  const code = $("#verification-code").val().trim();
  console.log("🔢 Verification code entered:", code);

  if (!code) {
    showToast("Please enter the verification code", "error");
    return;
  }

  if (code.length !== 6) {
    showToast("Verification code must be 6 digits", "error");
    return;
  }

  // Disable form and show loading
  const $submitBtn = $("#forgot-password-code-form button[type='submit']");
  const originalText = $submitBtn.text();
  $submitBtn.prop("disabled", true).text("Verifying...");

  console.log("🌐 Making request to verify code");

  // Create FormData to match your existing backend format
  const formData = new FormData();
  formData.append("verificationCode", code);

  $.ajax({
    url: `${API_BASE_URL}/auth/verify_reset_code.php`,
    method: "POST",
    dataType: "json",
    data: formData,
    processData: false,
    contentType: false,
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for handleVerificationCodeSubmit");
      console.log("📋 Request data: FormData with verificationCode =", code);
    },
    success: function (response) {
      console.log("🎯🎯🎯 VERIFY CODE RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Verification code verified successfully");

        // Move to step 3 (new password)
        goToForgotPasswordStep(3);

        // Focus on new password input
        setTimeout(() => {
          $("#new-password").focus();
        }, 100);

        showToast("Code verified successfully", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
        // Clear the code input for retry
        $("#verification-code").val("").focus();
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 VERIFY CODE ERROR:", { xhr, status, error });

      let errorMessage = "Invalid verification code";
      if (xhr.responseJSON?.error) {
        errorMessage = xhr.responseJSON.error;
      } else if (xhr.status === 410) {
        errorMessage =
          "Verification code has expired. Please request a new one";
      } else if (xhr.status === 429) {
        errorMessage = "Too many attempts. Please try again later";
      }

      showToast(errorMessage, "error");

      // Clear the code input for retry
      $("#verification-code").val("").focus();
    },
  }).always(function () {
    // Re-enable form
    $submitBtn.prop("disabled", false).text(originalText);
  });
}

function handlePasswordResetSubmit(e) {
  console.log("🔒 handlePasswordResetSubmit() called");
  e.preventDefault();

  const newPassword = $("#new-password").val();
  const confirmPassword = $("#confirm-new-password").val();

  console.log("🔒 Password lengths:", {
    new: newPassword.length,
    confirm: confirmPassword.length,
  });

  // Validation
  if (!newPassword || !confirmPassword) {
    showToast("Please fill in both password fields", "error");
    return;
  }

  if (newPassword.length < 8) {
    showToast("Password must be at least 8 characters long", "error");
    return;
  }

  if (newPassword !== confirmPassword) {
    showToast("Passwords do not match", "error");
    return;
  }

  // Disable form and show loading
  const $submitBtn = $("#forgot-password-reset-form button[type='submit']");
  const originalText = $submitBtn.text();
  $submitBtn.prop("disabled", true).text("Resetting...");

  console.log("🌐 Making request to reset password");

  // Create FormData to match your existing backend format
  const formData = new FormData();
  formData.append("newPassword", newPassword);

  $.ajax({
    url: `${API_BASE_URL}/auth/reset_password.php`,
    method: "POST",
    dataType: "json",
    data: formData,
    processData: false,
    contentType: false,
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for handlePasswordResetSubmit");
      console.log("📋 Request data: FormData with newPassword");
    },
    success: function (response) {
      console.log("🎯🎯🎯 RESET PASSWORD RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Password reset successfully");

        // Move to success step
        $("#forgot-password-success").show();
        $("#forgot-password-step-3").hide();

        showToast("Password reset successfully!", "success");
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 RESET PASSWORD ERROR:", { xhr, status, error });

      let errorMessage = "Failed to reset password";
      if (xhr.responseJSON?.error) {
        errorMessage = xhr.responseJSON.error;
      } else if (xhr.status === 410) {
        errorMessage = "Reset session has expired. Please start over";
      } else if (xhr.status === 400) {
        errorMessage = "Invalid password. Please choose a stronger password";
      }

      showToast(errorMessage, "error");
    },
  }).always(function () {
    // Re-enable form
    $submitBtn.prop("disabled", false).text(originalText);
  });
}

function resendVerificationCode() {
  console.log("🔄 resendVerificationCode() called");

  if (!forgotPasswordEmail) {
    console.error("❌ No email stored for resend");
    showToast("Error: Please start over", "error");
    return;
  }

  // Disable resend button temporarily
  const $resendBtn = $("#resend-code-btn");
  $resendBtn.prop("disabled", true).text("Sending...");

  console.log("🌐 Making request to resend code for:", forgotPasswordEmail);

  // Create FormData to match your existing backend format
  const formData = new FormData();
  formData.append("verificationMethodreset", forgotPasswordEmail);

  $.ajax({
    url: `${API_BASE_URL}/auth/forgot_password.php`,
    method: "POST",
    dataType: "json",
    data: formData,
    processData: false,
    contentType: false,
    beforeSend: function (xhr) {
      console.log("🔐 AJAX Request initiated for resendVerificationCode");
      console.log(
        "📋 Request data: FormData with verificationMethodreset =",
        forgotPasswordEmail
      );
    },
    success: function (response) {
      console.log("🎯🎯🎯 RESEND CODE RESPONSE:", response);

      if (response.status === "success" || response.success === true) {
        console.log("✅ Verification code resent successfully");
        showToast("New verification code sent!", "success");

        // Clear the current code input
        $("#verification-code").val("").focus();

        // Re-enable button after delay
        setTimeout(() => {
          $resendBtn
            .prop("disabled", false)
            .text("Didn't receive the code? Resend");
        }, 30000); // 30 second delay before allowing another resend
      } else if (
        response.status === "error" ||
        response.error === "error" ||
        response.success === false
      ) {
        alert(response.message);
        $resendBtn
          .prop("disabled", false)
          .text("Didn't receive the code? Resend");
      } else {
        console.warn("Unexpected response format", response);
      }
    },
    error: function (xhr, status, error) {
      console.log("🚨🚨🚨 RESEND CODE ERROR:", { xhr, status, error });

      let errorMessage = "Failed to resend verification code";
      if (xhr.responseJSON?.error) {
        errorMessage = xhr.responseJSON.error;
      } else if (xhr.status === 429) {
        errorMessage = "Please wait before requesting another code";
      }

      showToast(errorMessage, "error");
      $resendBtn
        .prop("disabled", false)
        .text("Didn't receive the code? Resend");
    },
  });
}

function goBackToLogin() {
  console.log("🔙 goBackToLogin() called");

  // Close forgot password modal and show login modal
  closeModal("forgot-password-modal");
  showLogin();
}

function goBackToEmailStep() {
  console.log("🔙 goBackToEmailStep() called");

  // Go back to step 1 (email entry)
  goToForgotPasswordStep(1);

  // Focus on email input
  setTimeout(() => {
    $("#forgot-password-email").focus();
  }, 100);
}

function goToLoginAfterSuccess() {
  console.log("🔙 goToLoginAfterSuccess() called");

  // Close forgot password modal and show login modal
  closeModal("forgot-password-modal");
  showLogin();

  // Show success message
  showToast("You can now sign in with your new password", "success");
}

function handleLoginSuccess(response, loginType = "standard") {
  console.log(`✅ handleLoginSuccess() called for ${loginType} login`);
  console.log("📦 Login response data:", response);

  // Prevent any auth operations during this process
  isAuthInProgress = true;

  try {
    // STEP 1: Clear ALL previous data first (aggressive cleanup)
    console.log("🧹 Step 1: Clearing all previous data");
    localStorage.clear();
    sessionStorage.clear();

    // Clear global variables
    authToken = null;
    currentUser = null;
    selectedPlan = null;
    window.authToken = null;
    window.currentUser = null;
    window.appliedPromoCode = null;

    // STEP 2: Extract and validate new auth data - HANDLE BOTH RESPONSE FORMATS
    console.log("📥 Step 2: Extracting new auth data");

    if (!response.success) {
      throw new Error("Login response indicates failure");
    }

    // 🔧 FIX: Handle both response formats
    let responseData;
    let newAuthToken;
    let newSessionToken;
    let newUserData;

    if (response.data) {
      // Standard format: data is nested under 'data' property
      console.log("📦 Using standard response format (nested data)");
      responseData = response.data;
      newAuthToken = responseData.token;
      newSessionToken = responseData.session_token;
      newUserData = responseData.user;
    } else {
      // Google auth format: data is at top level
      console.log("📦 Using Google auth response format (top-level data)");
      responseData = response;
      newAuthToken = response.token;
      newSessionToken = response.session_token;
      newUserData = response.user;
    }

    if (!newAuthToken || !newUserData) {
      throw new Error("Missing required auth data in response");
    }

    console.log("🔐 Extracted auth data:", {
      hasToken: !!newAuthToken,
      hasSessionToken: !!newSessionToken,
      hasUserData: !!newUserData,
      userEmail: newUserData?.email,
      userPlan: newUserData?.plan,
    });

    // STEP 3: Set new auth data globally
    console.log("🔐 Step 3: Setting new auth data");
    authToken = newAuthToken;
    currentUser = newUserData;
    window.authToken = newAuthToken;
    window.currentUser = newUserData;

    // Handle team role if present
    if (newUserData.team_role) {
      currentUser.team_role = newUserData.team_role;
      console.log("👥 Team role set:", newUserData.team_role);
    }

    // STEP 4: Store data persistently
    console.log("💾 Step 4: Storing data persistently");

    // localStorage
    localStorage.setItem("Micro_Learner_token", newAuthToken);
    localStorage.setItem("Micro_Learner_user", JSON.stringify(currentUser));

    // Cookies
    if (newSessionToken) {
      setCookie("session_token", newSessionToken);
    }
    setCookie("auth_token", newAuthToken);
    setCookie("current_user", JSON.stringify(currentUser));

    console.log("✅ Auth data stored successfully");

    // STEP 5: Close any open modals
    console.log("🪟 Step 5: Closing modals");
    $(".modal").removeClass("active");

    // STEP 6: Initialize dashboard with correct plan restrictions
    console.log(
      "📊 Step 6: Initializing dashboard for plan:",
      currentUser.plan
    );
    const userPlan = currentUser.plan || "Free";
    initializeDashboard(userPlan);

    // STEP 7: Show dashboard and load data (this will hide nav-center)
    console.log("🎯 Step 7: Showing dashboard and loading data");
    showDashboard(); // This now handles hiding nav-center
    loadDashboardData();
    //if (userPlan === "Free") {
    // or "free" if that's your expected format
    showSection("download-app");
    /*} else {
      showSection("configuration");
    }*/
    // STEP 8: Update danger zone buttons
    updateDangerZoneButtons();

    // STEP 9: Handle enterprise invites if present
    console.log("👥 Step 9: Checking for enterprise invites");

    // Check for enterprise invites in both response formats
    const enterpriseInvites =
      responseData.enterprise_invites || response.enterprise_invites;

    if (enterpriseInvites && enterpriseInvites.length > 0) {
      console.log("👥 Enterprise invites found - showing invite modal");

      showEnterpriseInviteModalWithCallback(
        enterpriseInvites,
        function (inviteAccepted) {
          if (inviteAccepted) {
            console.log(
              "✅ User accepted enterprise invite - refreshing dashboard"
            );
            setTimeout(() => {
              initializeDashboard(currentUser.plan);
              showDashboard(); // This will ensure nav-center stays hidden
              loadDashboardData();
              updateDangerZoneButtons();
              showSection("team");
            }, 1000);
          } else {
            console.log(
              "❌ User declined all invites - staying on current plan"
            );
          }
        }
      );
    }

    // STEP 10: Show success message
    console.log("🎉 Step 10: Showing success message");
    const welcomeMessage =
      loginType === "google"
        ? "Successfully signed in with Google!"
        : loginType === "auto"
        ? "Welcome back!"
        : "Welcome back!";

    showToast(welcomeMessage, "success");

    // STEP 11: Ensure team role consistency
    ensureTeamRoleConsistency();

    console.log("✅ Login success handling completed successfully");
    return true;
  } catch (error) {
    console.error("❌ Error in handleLoginSuccess:", error);

    // Clean up on error - this will show nav-center via showLanding()
    clearAuthData();
    showLanding();
    showToast("Login error occurred. Please try again.", "error");
    return false;
  } finally {
    // Always reset the auth progress flag
    isAuthInProgress = false;
  }
}

function copyReferralCode() {
  console.log("📋 copyReferralCode() called");

  const code = $("#referral-code-display").text(); // Changed from input to display
  console.log("🔗 Referral code to copy:", code);

  if (code && code !== "Loading..." && code !== "Not available") {
    navigator.clipboard.writeText(code).then(() => {
      console.log("✅ Referral code copied to clipboard");
      showToast("Referral code copied!", "success");
    });
  } else {
    console.warn("⚠️ No referral code to copy");
    showToast("No referral code available", "error");
  }
}
